diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/block/BlockAir.java src\modified/src/minecraft/net/minecraft/block/BlockAir.java
2a3,4
> import java.util.IdentityHashMap;
> import java.util.Map;
15a18,19
>     private static Map mapOriginalOpacity = new IdentityHashMap();
> 
68a73,91
>     public static void setLightOpacity(Block p_setLightOpacity_0_, int p_setLightOpacity_1_)
>     {
>         if (!mapOriginalOpacity.containsKey(p_setLightOpacity_0_))
>         {
>             mapOriginalOpacity.put(p_setLightOpacity_0_, Integer.valueOf(p_setLightOpacity_0_.lightOpacity));
>         }
> 
>         p_setLightOpacity_0_.lightOpacity = p_setLightOpacity_1_;
>     }
> 
>     public static void restoreLightOpacity(Block p_restoreLightOpacity_0_)
>     {
>         if (mapOriginalOpacity.containsKey(p_restoreLightOpacity_0_))
>         {
>             int i = ((Integer)mapOriginalOpacity.get(p_restoreLightOpacity_0_)).intValue();
>             setLightOpacity(p_restoreLightOpacity_0_, i);
>         }
>     }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/block/BlockEndPortal.java src\modified/src/minecraft/net/minecraft/block/BlockEndPortal.java
79c79
<         if (!entityIn.isRiding() && !entityIn.isBeingRidden() && entityIn.isNonBoss() && !worldIn.isRemote && entityIn.getEntityBoundingBox().intersectsWith(state.getBoundingBox(worldIn, pos).offset(pos)))
---
>         if (!worldIn.isRemote && !entityIn.isRiding() && !entityIn.isBeingRidden() && entityIn.isNonBoss() && entityIn.getEntityBoundingBox().intersectsWith(state.getBoundingBox(worldIn, pos).offset(pos)))
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/block/BlockFarmland.java src\modified/src/minecraft/net/minecraft/block/BlockFarmland.java
24a25
>     protected static final AxisAlignedBB field_194405_c = new AxisAlignedBB(0.0D, 0.9375D, 0.0D, 1.0D, 1.0D, 1.0D);
64c65
<                 this.func_190970_b(worldIn, pos);
---
>                 func_190970_b(worldIn, pos);
80c81
<             this.func_190970_b(worldIn, pos);
---
>             func_190970_b(worldIn, pos);
86c87
<     private void func_190970_b(World p_190970_1_, BlockPos p_190970_2_)
---
>     protected static void func_190970_b(World p_190970_0_, BlockPos p_190970_1_)
88,90c89,90
<         IBlockState iblockstate = Blocks.DIRT.getDefaultState();
<         p_190970_1_.setBlockState(p_190970_2_, iblockstate);
<         AxisAlignedBB axisalignedbb = iblockstate.getCollisionBoundingBox(p_190970_1_, p_190970_2_).offset(p_190970_2_);
---
>         p_190970_0_.setBlockState(p_190970_1_, Blocks.DIRT.getDefaultState());
>         AxisAlignedBB axisalignedbb = field_194405_c.offset(p_190970_1_);
92c92
<         for (Entity entity : p_190970_1_.getEntitiesWithinAABBExcludingEntity((Entity)null, axisalignedbb))
---
>         for (Entity entity : p_190970_0_.getEntitiesWithinAABBExcludingEntity((Entity)null, axisalignedbb))
94c94,95
<             entity.setPosition(entity.posX, axisalignedbb.maxY, entity.posZ);
---
>             double d0 = Math.min(axisalignedbb.maxY - axisalignedbb.minY, axisalignedbb.maxY - entity.getEntityBoundingBox().minY);
>             entity.setPositionAndUpdate(entity.posX, entity.posY + d0 + 0.001D, entity.posZ);
128c129
<             this.func_190970_b(worldIn, pos);
---
>             func_190970_b(worldIn, pos);
141c142
<             this.func_190970_b(worldIn, pos);
---
>             func_190970_b(worldIn, pos);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/block/BlockGrassPath.java src\modified/src/minecraft/net/minecraft/block/BlockGrassPath.java
59c59
<             p_190971_1_.setBlockState(p_190971_2_, Blocks.DIRT.getDefaultState());
---
>             BlockFarmland.func_190970_b(p_190971_1_, p_190971_2_);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/block/BlockJukebox.java src\modified/src/minecraft/net/minecraft/block/BlockJukebox.java
2a3,4
> import org.golde.lttclientmeme.LTTClient;
> 
8a11,12
> import net.minecraft.client.Minecraft;
> import net.minecraft.client.util.ITooltipFlag;
19a24
> import net.minecraft.util.ResourceLocation;
64a70,77
>             
>             if(recordStack.getTooltip(null, ITooltipFlag.TooltipFlags.NORMAL).get(1).contains("LTT")) {
>             	System.out.println("It do be workin");
>             	LTTClient.getInstance().queueInOpenGLThread(() -> {
>             		Minecraft.getMinecraft().entityRenderer.loadShader(new ResourceLocation("shaders/post/wobble.json"));
>             	});
>             }
>             
92a106,111
>                     
>                     if(itemstack.getTooltip(null, ITooltipFlag.TooltipFlags.NORMAL).get(1).contains("LTT")) {
> 	                    LTTClient.getInstance().queueInOpenGLThread(() -> {
> 	                		Minecraft.getMinecraft().entityRenderer.loadEntityShader(null);
> 	                	});
>                     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/block/BlockPistonBase.java src\modified/src/minecraft/net/minecraft/block/BlockPistonBase.java
309c309,310
<     public static boolean canPush(IBlockState blockStateIn, World worldIn, BlockPos pos, EnumFacing facing, boolean destroyBlocks, EnumFacing p_185646_5_)
---
>     @SuppressWarnings("incomplete-switch")
> 	public static boolean canPush(IBlockState blockStateIn, World worldIn, BlockPos pos, EnumFacing facing, boolean destroyBlocks, EnumFacing p_185646_5_)
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/block/material/MapColor.java src\modified/src/minecraft/net/minecraft/block/material/MapColor.java
66c66
<     public final int colorValue;
---
>     public int colorValue;
Only in src\modified/src/minecraft/net/minecraft/block/state: BlockStateBas#
Only in src\modified/src/minecraft/net/minecraft/block/state: BlockStateBas~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/block/state/BlockStateBase.java src\modified/src/minecraft/net/minecraft/block/state/BlockStateBase.java
4a5
> import com.google.common.collect.ImmutableTable;
11a13
> import net.minecraft.util.ResourceLocation;
33c35
<             return property.getName((T)entry);
---
>             return property.getName((T) entry);
35a38,86
>     private int blockId = -1;
>     private int blockStateId = -1;
>     private int metadata = -1;
>     private ResourceLocation blockLocation = null;
> 
>     public int getBlockId()
>     {
>         if (this.blockId < 0)
>         {
>             this.blockId = Block.getIdFromBlock(this.getBlock());
>         }
> 
>         return this.blockId;
>     }
> 
>     public int getBlockStateId()
>     {
>         if (this.blockStateId < 0)
>         {
>             this.blockStateId = Block.getStateId(this);
>         }
> 
>         return this.blockStateId;
>     }
> 
>     public int getMetadata()
>     {
>         if (this.metadata < 0)
>         {
>             this.metadata = this.getBlock().getMetaFromState(this);
>         }
> 
>         return this.metadata;
>     }
> 
>     public ResourceLocation getBlockLocation()
>     {
>         if (this.blockLocation == null)
>         {
>             this.blockLocation = Block.REGISTRY.getNameForObject(this.getBlock());
>         }
> 
>         return this.blockLocation;
>     }
> 
>     public ImmutableTable < IProperty<?>, Comparable<?>, IBlockState > getPropertyValueTable()
>     {
>         return null;
>     }
Only in src\modified/src/minecraft/net/minecraft/block/state: BlockStateCon#
Only in src\modified/src/minecraft/net/minecraft/block/state: BlockStateCon~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/block/state/BlockStateContainer.java src\modified/src/minecraft/net/minecraft/block/state/BlockStateContainer.java
19a20
> import java.util.Optional;
23a25
> import net.minecraft.block.BlockFlower;
41a44,46
> import net.minecraftforge.common.property.IUnlistedProperty;
> import optifine.BlockModelUtils;
> import optifine.Reflector;
60c65,75
<         this.block = blockIn;
---
>         this(blockIn, properties, (ImmutableMap)null);
>     }
> 
>     protected BlockStateContainer.StateImplementation createState(Block p_createState_1_, ImmutableMap < IProperty<?>, Comparable<? >> p_createState_2_, @Nullable ImmutableMap < IUnlistedProperty<?>, Optional<? >> p_createState_3_)
>     {
>         return new BlockStateContainer.StateImplementation(p_createState_1_, p_createState_2_);
>     }
> 
>     protected BlockStateContainer(Block p_i9_1_, IProperty<?>[] p_i9_2_, ImmutableMap < IUnlistedProperty<?>, Optional<? >> p_i9_3_)
>     {
>         this.block = p_i9_1_;
63c78
<         for (IProperty<?> iproperty : properties)
---
>         for (IProperty<?> iproperty : p_i9_2_)
65c80
<             validateProperty(blockIn, iproperty);
---
>             validateProperty(p_i9_1_, iproperty);
71c86
<         List<BlockStateContainer.StateImplementation> list1 = Lists.<BlockStateContainer.StateImplementation>newArrayList();
---
>         List<BlockStateContainer.StateImplementation> list = Lists.<BlockStateContainer.StateImplementation>newArrayList();
73c88
<         for (List < Comparable<? >> list : Cartesian.cartesianProduct(this.getAllowedValues()))
---
>         for (List < Comparable<? >> list1 : Cartesian.cartesianProduct(this.getAllowedValues()))
75,76c90,91
<             Map < IProperty<?>, Comparable<? >> map1 = MapPopulator. < IProperty<?>, Comparable<? >> createMap(this.properties.values(), list);
<             BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = new BlockStateContainer.StateImplementation(blockIn, ImmutableMap.copyOf(map1));
---
>             Map < IProperty<?>, Comparable<? >> map1 = MapPopulator. < IProperty<?>, Comparable<? >> createMap(this.properties.values(), list1);
>             BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = this.createState(p_i9_1_, ImmutableMap.copyOf(map1), p_i9_3_);
78c93
<             list1.add(blockstatecontainer$stateimplementation);
---
>             list.add(blockstatecontainer$stateimplementation);
81c96
<         for (BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation1 : list1)
---
>         for (BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation1 : list)
86c101
<         this.validStates = ImmutableList.<IBlockState>copyOf(list1);
---
>         this.validStates = ImmutableList.copyOf(list);
158a174,222
>     public static class Builder
>     {
>         private final Block block;
>         private final List < IProperty<? >> listed = Lists. < IProperty<? >> newArrayList();
>         private final List < IUnlistedProperty<? >> unlisted = Lists. < IUnlistedProperty<? >> newArrayList();
> 
>         public Builder(Block p_i11_1_)
>         {
>             this.block = p_i11_1_;
>         }
> 
>         public BlockStateContainer.Builder add(IProperty<?>... p_add_1_)
>         {
>             for (IProperty<?> iproperty : p_add_1_)
>             {
>                 this.listed.add(iproperty);
>             }
> 
>             return this;
>         }
> 
>         public BlockStateContainer.Builder add(IUnlistedProperty<?>... p_add_1_)
>         {
>             for (IUnlistedProperty<?> iunlistedproperty : p_add_1_)
>             {
>                 this.unlisted.add(iunlistedproperty);
>             }
> 
>             return this;
>         }
> 
>         public BlockStateContainer build()
>         {
>             IProperty<?>[] iproperty = new IProperty[this.listed.size()];
>             iproperty = (IProperty[])this.listed.toArray(iproperty);
> 
>             if (this.unlisted.size() == 0)
>             {
>                 return new BlockStateContainer(this.block, iproperty);
>             }
>             else
>             {
>                 IUnlistedProperty<?>[] iunlistedproperty = new IUnlistedProperty[this.unlisted.size()];
>                 iunlistedproperty = (IUnlistedProperty[])this.unlisted.toArray(iunlistedproperty);
>                 return (BlockStateContainer)Reflector.newInstance(Reflector.ExtendedBlockState_Constructor, this.block, iproperty, iunlistedproperty);
>             }
>         }
>     }
> 
170a235,241
>         protected StateImplementation(Block p_i8_1_, ImmutableMap < IProperty<?>, Comparable<? >> p_i8_2_, ImmutableTable < IProperty<?>, Comparable<?>, IBlockState > p_i8_3_)
>         {
>             this.block = p_i8_1_;
>             this.properties = p_i8_2_;
>             this.propertyValueTable = p_i8_3_;
>         }
> 
431c502,513
<             return this.block.getBoundingBox(this, blockAccess, pos);
---
>             Block.EnumOffsetType block$enumoffsettype = this.block.getOffsetType();
> 
>             if (block$enumoffsettype != Block.EnumOffsetType.NONE && !(this.block instanceof BlockFlower))
>             {
>                 AxisAlignedBB axisalignedbb = this.block.getBoundingBox(this, blockAccess, pos);
>                 axisalignedbb = BlockModelUtils.getOffsetBoundingBox(axisalignedbb, block$enumoffsettype, pos);
>                 return axisalignedbb;
>             }
>             else
>             {
>                 return this.block.getBoundingBox(this, blockAccess, pos);
>             }
463a546,570
>         public ImmutableTable < IProperty<?>, Comparable<?>, IBlockState > getPropertyValueTable()
>         {
>             return this.propertyValueTable;
>         }
> 
>         public int getLightOpacity(IBlockAccess p_getLightOpacity_1_, BlockPos p_getLightOpacity_2_)
>         {
>             return Reflector.callInt(this.block, Reflector.ForgeBlock_getLightOpacity, this, p_getLightOpacity_1_, p_getLightOpacity_2_);
>         }
> 
>         public int getLightValue(IBlockAccess p_getLightValue_1_, BlockPos p_getLightValue_2_)
>         {
>             return Reflector.callInt(this.block, Reflector.ForgeBlock_getLightValue, this, p_getLightValue_1_, p_getLightValue_2_);
>         }
> 
>         public boolean isSideSolid(IBlockAccess p_isSideSolid_1_, BlockPos p_isSideSolid_2_, EnumFacing p_isSideSolid_3_)
>         {
>             return Reflector.callBoolean(this.block, Reflector.ForgeBlock_isSideSolid, this, p_isSideSolid_1_, p_isSideSolid_2_, p_isSideSolid_3_);
>         }
> 
>         public boolean doesSideBlockRendering(IBlockAccess p_doesSideBlockRendering_1_, BlockPos p_doesSideBlockRendering_2_, EnumFacing p_doesSideBlockRendering_3_)
>         {
>             return Reflector.callBoolean(this.block, Reflector.ForgeBlock_doesSideBlockRendering, this, p_doesSideBlockRendering_1_, p_doesSideBlockRendering_2_, p_doesSideBlockRendering_3_);
>         }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/entity/AbstractClientPlayer.java src\modified/src/minecraft/net/minecraft/client/entity/AbstractClientPlayer.java
20a21,24
> import optifine.CapeUtils;
> import optifine.Config;
> import optifine.PlayerConfigurations;
> import optifine.Reflector;
27a32,34
>     private ResourceLocation locationOfCape = null;
>     private String nameClear = null;
>     private static final ResourceLocation TEXTURE_ELYTRA = new ResourceLocation("textures/entity/elytra.png");
31a39,47
>         this.nameClear = playerProfile.getName();
> 
>         if (this.nameClear != null && !this.nameClear.isEmpty())
>         {
>             this.nameClear = StringUtils.stripControlCodes(this.nameClear);
>         }
> 
>         CapeUtils.downloadCape(this);
>         PlayerConfigurations.getPlayerConfiguration(this);
89,90c105,117
<         NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
<         return networkplayerinfo == null ? null : networkplayerinfo.getLocationCape();
---
>         if (!Config.isShowCapes())
>         {
>             return null;
>         }
>         else if (this.locationOfCape != null)
>         {
>             return this.locationOfCape;
>         }
>         else
>         {
>             NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
>             return networkplayerinfo == null ? null : networkplayerinfo.getLocationCape();
>         }
171c198,227
<         return f;
---
>         return Reflector.ForgeHooksClient_getOffsetFOV.exists() ? Reflector.callFloat(Reflector.ForgeHooksClient_getOffsetFOV, this, f) : f;
>     }
> 
>     public String getNameClear()
>     {
>         return this.nameClear;
>     }
> 
>     public ResourceLocation getLocationOfCape()
>     {
>         return this.locationOfCape;
>     }
> 
>     public void setLocationOfCape(ResourceLocation p_setLocationOfCape_1_)
>     {
>         this.locationOfCape = p_setLocationOfCape_1_;
>     }
> 
>     public boolean hasElytraCape()
>     {
>         ResourceLocation resourcelocation = this.getLocationCape();
> 
>         if (resourcelocation == null)
>         {
>             return false;
>         }
>         else
>         {
>             return resourcelocation != this.locationOfCape;
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java src\modified/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java
19a20
> import net.minecraft.client.gui.inventory.GuiContainer;
916a918,922
>                 if (this.mc.currentScreen instanceof GuiContainer)
>                 {
>                     this.closeScreen();
>                 }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/BossInfoClient.java src\modified/src/minecraft/net/minecraft/client/gui/BossInfoClient.java
38c38,39
<     public void updateFromPacket(SPacketUpdateBossInfo packetIn)
---
>     @SuppressWarnings("incomplete-switch")
> 	public void updateFromPacket(SPacketUpdateBossInfo packetIn)
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/FontRenderer.java src\modified/src/minecraft/net/minecraft/client/gui/FontRenderer.java
11a12
> import java.util.Properties;
24a26,30
> import optifine.Config;
> import optifine.CustomColors;
> import optifine.FontUtils;
> import optifine.GlBlendState;
> 
48c54
<     private final ResourceLocation locationFontTexture;
---
>     private ResourceLocation locationFontTexture;
101a108,114
>     public GameSettings gameSettings;
>     public ResourceLocation locationFontTextureBase;
>     public boolean enabled = true;
>     public float offsetBold = 1.0F;
>     private float[] charWidthFloat = new float[256];
>     private boolean blend = false;
>     private GlBlendState oldBlendState = new GlBlendState();
104a118,119
>         this.gameSettings = gameSettingsIn;
>         this.locationFontTextureBase = location;
108c123,124
<         textureManagerIn.bindTexture(this.locationFontTexture);
---
>         this.locationFontTexture = FontUtils.getHdFontLocation(this.locationFontTextureBase);
>         this.bindTexture(this.locationFontTexture);
146a163,169
>         this.locationFontTexture = FontUtils.getHdFontLocation(this.locationFontTextureBase);
> 
>         for (int i = 0; i < UNICODE_PAGE_LOCATIONS.length; ++i)
>         {
>             UNICODE_PAGE_LOCATIONS[i] = null;
>         }
> 
158c181
<             iresource = Minecraft.getMinecraft().getResourceManager().getResource(this.locationFontTexture);
---
>             iresource = this.getResource(this.locationFontTexture);
170,177c193,202
<         int lvt_3_2_ = bufferedimage.getWidth();
<         int lvt_4_1_ = bufferedimage.getHeight();
<         int[] lvt_5_1_ = new int[lvt_3_2_ * lvt_4_1_];
<         bufferedimage.getRGB(0, 0, lvt_3_2_, lvt_4_1_, lvt_5_1_, 0, lvt_3_2_);
<         int lvt_6_1_ = lvt_4_1_ / 16;
<         int lvt_7_1_ = lvt_3_2_ / 16;
<         boolean lvt_8_1_ = true;
<         float lvt_9_1_ = 8.0F / (float)lvt_7_1_;
---
>         Properties props = FontUtils.readFontProperties(this.locationFontTexture);
>         this.blend = FontUtils.readBoolean(props, "blend", false);
>         int imgWidth = bufferedimage.getWidth();
>         int imgHeight = bufferedimage.getHeight();
>         int charW = imgWidth / 16;
>         int charH = imgHeight / 16;
>         float kx = (float)imgWidth / 128.0F;
>         float boldScaleFactor = Config.limit(kx, 1.0F, 2.0F);
>         this.offsetBold = 1.0F / boldScaleFactor;
>         float offsetBoldConfig = FontUtils.readFloat(props, "offsetBold", -1.0F);
179c204
<         for (int lvt_10_1_ = 0; lvt_10_1_ < 256; ++lvt_10_1_)
---
>         if (offsetBoldConfig >= 0.0F)
181,182c206,207
<             int j1 = lvt_10_1_ % 16;
<             int k1 = lvt_10_1_ / 16;
---
>             this.offsetBold = offsetBoldConfig;
>         }
184,187c209,210
<             if (lvt_10_1_ == 32)
<             {
<                 this.charWidth[lvt_10_1_] = 4;
<             }
---
>         int[] aint = new int[imgWidth * imgHeight];
>         bufferedimage.getRGB(0, 0, imgWidth, imgHeight, aint, 0, imgWidth);
189c212,216
<             int l1;
---
>         for (int i1 = 0; i1 < 256; ++i1)
>         {
>             int j1 = i1 % 16;
>             int k1 = i1 / 16;
>             int l1 = 0;
191c218
<             for (l1 = lvt_7_1_ - 1; l1 >= 0; --l1)
---
>             for (l1 = charW - 1; l1 >= 0; --l1)
193,194c220,221
<                 int i2 = j1 * lvt_7_1_ + l1;
<                 boolean flag1 = true;
---
>                 int i2 = j1 * charW + l1;
>                 boolean flag = true;
196c223
<                 for (int j2 = 0; j2 < lvt_6_1_ && flag1; ++j2)
---
>                 for (int j2 = 0; j2 < charH && flag; ++j2)
198c225,227
<                     int k2 = (k1 * lvt_7_1_ + j2) * lvt_3_2_;
---
>                     int k2 = (k1 * charH + j2) * imgWidth;
>                     int l2 = aint[i2 + k2];
>                     int i3 = l2 >> 24 & 255;
200c229
<                     if ((lvt_5_1_[i2 + k2] >> 24 & 255) != 0)
---
>                     if (i3 > 16)
202c231
<                         flag1 = false;
---
>                         flag = false;
206c235
<                 if (!flag1)
---
>                 if (!flag)
212,213c241,265
<             ++l1;
<             this.charWidth[lvt_10_1_] = (int)(0.5D + (double)((float)l1 * lvt_9_1_)) + 1;
---
> //            if (i1 == 65)
> //            {
> //                i1 = i1;
> //            }
> 
>             if (i1 == 32)
>             {
>                 if (charW <= 8)
>                 {
>                     l1 = (int)(2.0F * kx);
>                 }
>                 else
>                 {
>                     l1 = (int)(1.5F * kx);
>                 }
>             }
> 
>             this.charWidthFloat[i1] = (float)(l1 + 1) / kx + 1.0F;
>         }
> 
>         FontUtils.readCustomCharWidths(props, this.charWidthFloat);
> 
>         for (int j3 = 0; j3 < this.charWidth.length; ++j3)
>         {
>             this.charWidth[j3] = Math.round(this.charWidthFloat[j3]);
223c275
<             iresource = Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation("font/glyph_sizes.bin"));
---
>             iresource = this.getResource(new ResourceLocation("font/glyph_sizes.bin"));
241c293
<         if (ch == ' ')
---
>         if (ch != ' ' && ch != 160)
243c295,296
<             return 4.0F;
---
>             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(ch);
>             return i != -1 && !this.unicodeFlag ? this.renderDefaultChar(i, italic) : this.renderUnicodeChar(ch, italic);
247,248c300
<             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(ch);
<             return i != -1 && !this.unicodeFlag ? this.renderDefaultChar(i, italic) : this.renderUnicodeChar(ch, italic);
---
>             return !this.unicodeFlag ? this.charWidthFloat[ch] : 4.0F;
260,262c312,314
<         this.renderEngine.bindTexture(this.locationFontTexture);
<         int l = this.charWidth[ch];
<         float f = (float)l - 0.01F;
---
>         this.bindTexture(this.locationFontTexture);
>         float f = this.charWidthFloat[ch];
>         float f1 = 7.99F;
268,271c320,323
<         GlStateManager.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, (float)j / 128.0F);
<         GlStateManager.glVertex3f(this.posX + f - 1.0F + (float)k, this.posY, 0.0F);
<         GlStateManager.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, ((float)j + 7.99F) / 128.0F);
<         GlStateManager.glVertex3f(this.posX + f - 1.0F - (float)k, this.posY + 7.99F, 0.0F);
---
>         GlStateManager.glTexCoord2f(((float)i + f1 - 1.0F) / 128.0F, (float)j / 128.0F);
>         GlStateManager.glVertex3f(this.posX + f1 - 1.0F + (float)k, this.posY, 0.0F);
>         GlStateManager.glTexCoord2f(((float)i + f1 - 1.0F) / 128.0F, ((float)j + 7.99F) / 128.0F);
>         GlStateManager.glVertex3f(this.posX + f1 - 1.0F - (float)k, this.posY + 7.99F, 0.0F);
273c325
<         return (float)l;
---
>         return f;
280a333
>             UNICODE_PAGE_LOCATIONS[page] = FontUtils.getHdFontLocation(UNICODE_PAGE_LOCATIONS[page]);
291c344
<         this.renderEngine.bindTexture(this.getUnicodePageLocation(page));
---
>         this.bindTexture(this.getUnicodePageLocation(page));
344c397
<         return this.drawString(text, (float)x, (float)y, color, false);
---
>         return !this.enabled ? 0 : this.drawString(text, (float)x, (float)y, color, false);
352c405,413
<         GlStateManager.enableAlpha();
---
>         this.enableAlpha();
> 
>         if (this.blend)
>         {
>             GlStateManager.getBlendState(this.oldBlendState);
>             GlStateManager.enableBlend();
>             GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
>         }
> 
365a427,431
>         if (this.blend)
>         {
>             GlStateManager.setBlendState(this.oldBlendState);
>         }
> 
380c446
<         catch (ArabicShapingException var3)
---
>         catch (ArabicShapingException var31)
409c475
<                 int i1 = "0123456789abcdefklmnor".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));
---
>                 int l = "0123456789abcdefklmnor".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));
411c477
<                 if (i1 < 16)
---
>                 if (l < 16)
419c485
<                     if (i1 < 0 || i1 > 15)
---
>                     if (l < 0 || l > 15)
421c487
<                         i1 = 15;
---
>                         l = 15;
426c492,499
<                         i1 += 16;
---
>                         l += 16;
>                     }
> 
>                     int i1 = this.colorCode[l];
> 
>                     if (Config.isCustomColors())
>                     {
>                         i1 = CustomColors.getTextColor(l, i1);
429,431c502,503
<                     int j1 = this.colorCode[i1];
<                     this.textColor = j1;
<                     GlStateManager.color((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.alpha);
---
>                     this.textColor = i1;
>                     this.setColor((float)(i1 >> 16) / 255.0F, (float)(i1 >> 8 & 255) / 255.0F, (float)(i1 & 255) / 255.0F, this.alpha);
433c505
<                 else if (i1 == 16)
---
>                 else if (l == 16)
437c509
<                 else if (i1 == 17)
---
>                 else if (l == 17)
441c513
<                 else if (i1 == 18)
---
>                 else if (l == 18)
445c517
<                 else if (i1 == 19)
---
>                 else if (l == 19)
449c521
<                 else if (i1 == 20)
---
>                 else if (l == 20)
453c525
<                 else if (i1 == 21)
---
>                 else if (l == 21)
460c532
<                     GlStateManager.color(this.red, this.blue, this.green, this.alpha);
---
>                     this.setColor(this.red, this.blue, this.green, this.alpha);
488c560
<                 float f1 = this.unicodeFlag ? 0.5F : 1.0F;
---
>                 float f1 = j != -1 && !this.unicodeFlag ? this.offsetBold : 0.5F;
524,553c596
<                     ++f;
<                 }
< 
<                 if (this.strikethroughStyle)
<                 {
<                     Tessellator tessellator = Tessellator.getInstance();
<                     BufferBuilder bufferbuilder = tessellator.getBuffer();
<                     GlStateManager.disableTexture2D();
<                     bufferbuilder.begin(7, DefaultVertexFormats.POSITION);
<                     bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
<                     bufferbuilder.pos((double)(this.posX + f), (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
<                     bufferbuilder.pos((double)(this.posX + f), (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
<                     bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
<                     tessellator.draw();
<                     GlStateManager.enableTexture2D();
<                 }
< 
<                 if (this.underlineStyle)
<                 {
<                     Tessellator tessellator1 = Tessellator.getInstance();
<                     BufferBuilder bufferbuilder1 = tessellator1.getBuffer();
<                     GlStateManager.disableTexture2D();
<                     bufferbuilder1.begin(7, DefaultVertexFormats.POSITION);
<                     int l = this.underlineStyle ? -1 : 0;
<                     bufferbuilder1.pos((double)(this.posX + (float)l), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
<                     bufferbuilder1.pos((double)(this.posX + f), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
<                     bufferbuilder1.pos((double)(this.posX + f), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
<                     bufferbuilder1.pos((double)(this.posX + (float)l), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
<                     tessellator1.draw();
<                     GlStateManager.enableTexture2D();
---
>                     f += f1;
556c599
<                 this.posX += (float)((int)f);
---
>                 this.doDraw(f);
560a604,637
>     protected void doDraw(float p_doDraw_1_)
>     {
>         if (this.strikethroughStyle)
>         {
>             Tessellator tessellator = Tessellator.getInstance();
>             BufferBuilder bufferbuilder = tessellator.getBuffer();
>             GlStateManager.disableTexture2D();
>             bufferbuilder.begin(7, DefaultVertexFormats.POSITION);
>             bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
>             bufferbuilder.pos((double)(this.posX + p_doDraw_1_), (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
>             bufferbuilder.pos((double)(this.posX + p_doDraw_1_), (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
>             bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
>             tessellator.draw();
>             GlStateManager.enableTexture2D();
>         }
> 
>         if (this.underlineStyle)
>         {
>             Tessellator tessellator1 = Tessellator.getInstance();
>             BufferBuilder bufferbuilder1 = tessellator1.getBuffer();
>             GlStateManager.disableTexture2D();
>             bufferbuilder1.begin(7, DefaultVertexFormats.POSITION);
>             int i = this.underlineStyle ? -1 : 0;
>             bufferbuilder1.pos((double)(this.posX + (float)i), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
>             bufferbuilder1.pos((double)(this.posX + p_doDraw_1_), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
>             bufferbuilder1.pos((double)(this.posX + p_doDraw_1_), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
>             bufferbuilder1.pos((double)(this.posX + (float)i), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
>             tessellator1.draw();
>             GlStateManager.enableTexture2D();
>         }
> 
>         this.posX += p_doDraw_1_;
>     }
> 
605c682
<             GlStateManager.color(this.red, this.blue, this.green, this.alpha);
---
>             this.setColor(this.red, this.blue, this.green, this.alpha);
624c701
<             int i = 0;
---
>             float f = 0.0F;
627c704
<             for (int j = 0; j < text.length(); ++j)
---
>             for (int i = 0; i < text.length(); ++i)
629,630c706,707
<                 char c0 = text.charAt(j);
<                 int k = this.getCharWidth(c0);
---
>                 char c0 = text.charAt(i);
>                 float f1 = this.getCharWidthFloat(c0);
632c709
<                 if (k < 0 && j < text.length() - 1)
---
>                 if (f1 < 0.0F && i < text.length() - 1)
634,635c711,712
<                     ++j;
<                     c0 = text.charAt(j);
---
>                     ++i;
>                     c0 = text.charAt(i);
649c726
<                     k = 0;
---
>                     f1 = 0.0F;
652c729
<                 i += k;
---
>                 f += f1;
654c731
<                 if (flag && k > 0)
---
>                 if (flag && f1 > 0.0F)
656c733
<                     ++i;
---
>                     f += this.unicodeFlag ? 1.0F : this.offsetBold;
660c737
<             return i;
---
>             return Math.round(f);
669c746,751
<         if (character == 167)
---
>         return Math.round(this.getCharWidthFloat(character));
>     }
> 
>     private float getCharWidthFloat(char p_getCharWidthFloat_1_)
>     {
>         if (p_getCharWidthFloat_1_ == 167)
671c753
<             return -1;
---
>             return -1.0F;
673c755
<         else if (character == ' ')
---
>         else if (p_getCharWidthFloat_1_ != ' ' && p_getCharWidthFloat_1_ != 160)
675,679c757
<             return 4;
<         }
<         else
<         {
<             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(character);
---
>             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(p_getCharWidthFloat_1_);
681c759
<             if (character > 0 && i != -1 && !this.unicodeFlag)
---
>             if (p_getCharWidthFloat_1_ > 0 && i != -1 && !this.unicodeFlag)
683c761
<                 return this.charWidth[i];
---
>                 return this.charWidthFloat[i];
685c763
<             else if (this.glyphWidth[character] != 0)
---
>             else if (this.glyphWidth[p_getCharWidthFloat_1_] != 0)
687c765
<                 int j = this.glyphWidth[character] & 255;
---
>                 int j = this.glyphWidth[p_getCharWidthFloat_1_] & 255;
691c769
<                 return (l - k) / 2 + 1;
---
>                 return (float)((l - k) / 2 + 1);
695c773
<                 return 0;
---
>                 return 0.0F;
697a776,779
>         else
>         {
>             return this.charWidthFloat[32];
>         }
714,716c796,798
<         int i = 0;
<         int j = reverse ? text.length() - 1 : 0;
<         int k = reverse ? -1 : 1;
---
>         float f = 0.0F;
>         int i = reverse ? text.length() - 1 : 0;
>         int j = reverse ? -1 : 1;
720c802
<         for (int l = j; l >= 0 && l < text.length() && i < width; l += k)
---
>         for (int k = i; k >= 0 && k < text.length() && f < (float)width; k += j)
722,723c804,805
<             char c0 = text.charAt(l);
<             int i1 = this.getCharWidth(c0);
---
>             char c0 = text.charAt(k);
>             float f1 = this.getCharWidthFloat(c0);
741c823
<             else if (i1 < 0)
---
>             else if (f1 < 0.0F)
747c829
<                 i += i1;
---
>                 f += f1;
751c833
<                     ++i;
---
>                     ++f;
755c837
<             if (i > width)
---
>             if (f > (float)width)
790a873,879
>         if (this.blend)
>         {
>             GlStateManager.getBlendState(this.oldBlendState);
>             GlStateManager.enableBlend();
>             GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
>         }
> 
794a884,888
> 
>         if (this.blend)
>         {
>             GlStateManager.setBlendState(this.oldBlendState);
>         }
854,856c948
<         int i = this.sizeStringToWidth(str, wrapWidth);
< 
<         if (str.length() <= i)
---
>         if (str.length() <= 1)
862,866c954,967
<             String s = str.substring(0, i);
<             char c0 = str.charAt(i);
<             boolean flag = c0 == ' ' || c0 == '\n';
<             String s1 = getFormatFromString(s) + str.substring(i + (flag ? 1 : 0));
<             return s + "\n" + this.wrapFormattedStringToWidth(s1, wrapWidth);
---
>             int i = this.sizeStringToWidth(str, wrapWidth);
> 
>             if (str.length() <= i)
>             {
>                 return str;
>             }
>             else
>             {
>                 String s = str.substring(0, i);
>                 char c0 = str.charAt(i);
>                 boolean flag = c0 == ' ' || c0 == '\n';
>                 String s1 = getFormatFromString(s) + str.substring(i + (flag ? 1 : 0));
>                 return s + "\n" + this.wrapFormattedStringToWidth(s1, wrapWidth);
>             }
875a977
>         float f = 0.0F;
877,878c979
<         int k = 0;
<         int l = -1;
---
>         int k = -1;
880c981
<         for (boolean flag = false; k < i; ++k)
---
>         for (boolean flag = false; j < i; ++j)
882c983
<             char c0 = str.charAt(k);
---
>             char c0 = str.charAt(j);
887c988
<                     --k;
---
>                     --j;
891c992
<                     l = k;
---
>                     k = j;
894c995
<                     j += this.getCharWidth(c0);
---
>                     f += this.getCharWidthFloat(c0);
898c999
<                         ++j;
---
>                         ++f;
904c1005
<                     if (k < i - 1)
---
>                     if (j < i - 1)
906,907c1007,1008
<                         ++k;
<                         char c1 = str.charAt(k);
---
>                         ++j;
>                         char c1 = str.charAt(j);
925,926c1026,1027
<                 ++k;
<                 l = k;
---
>                 ++j;
>                 k = j;
930c1031
<             if (j > wrapWidth)
---
>             if (Math.round(f) > wrapWidth)
936c1037
<         return k != i && l != -1 && l < k ? l : k;
---
>         return j != i && k != -1 && k < j ? k : j;
995c1096,1131
<         return i >= 0 && i < this.colorCode.length ? this.colorCode[i] : -1;
---
> 
>         if (i >= 0 && i < this.colorCode.length)
>         {
>             int j = this.colorCode[i];
> 
>             if (Config.isCustomColors())
>             {
>                 j = CustomColors.getTextColor(i, j);
>             }
> 
>             return j;
>         }
>         else
>         {
>             return 16777215;
>         }
>     }
> 
>     protected void setColor(float p_setColor_1_, float p_setColor_2_, float p_setColor_3_, float p_setColor_4_)
>     {
>         GlStateManager.color(p_setColor_1_, p_setColor_2_, p_setColor_3_, p_setColor_4_);
>     }
> 
>     protected void enableAlpha()
>     {
>         GlStateManager.enableAlpha();
>     }
> 
>     protected void bindTexture(ResourceLocation p_bindTexture_1_)
>     {
>         this.renderEngine.bindTexture(p_bindTexture_1_);
>     }
> 
>     protected IResource getResource(ResourceLocation p_getResource_1_) throws IOException
>     {
>         return Minecraft.getMinecraft().getResourceManager().getResource(p_getResource_1_);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiButton.java src\modified/src/minecraft/net/minecraft/client/gui/GuiButton.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
99c101,107
<                 j = 16777120;
---
>                 //j = 16777120;
>             	
>             	//draw centered rainbow string if hovered
>             	int x = this.xPosition + this.width / 2;
>             	float newX = (float)(x - fontrenderer.getStringWidth(this.displayString) / 2);
>             	ColorUtils.drawChromaString(this.displayString, (int)newX, this.yPosition + (this.height - 8) / 2);
>             	return;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiDownloadTerrain.java src\modified/src/minecraft/net/minecraft/client/gui/GuiDownloadTerrain.java
3,4d2
< import java.io.IOException;
< import net.minecraft.client.network.NetHandlerPlayClient;
6d3
< import net.minecraft.network.play.client.CPacketKeepAlive;
10,25d6
<     private final NetHandlerPlayClient connection;
<     private int progress;
< 
<     public GuiDownloadTerrain(NetHandlerPlayClient netHandler)
<     {
<         this.connection = netHandler;
<     }
< 
<     /**
<      * Fired when a key is typed (except F11 which toggles full screen). This is the equivalent of
<      * KeyListener.keyTyped(KeyEvent e). Args : character (character on the key), keyCode (lwjgl Keyboard key code)
<      */
<     protected void keyTyped(char typedChar, int keyCode) throws IOException
<     {
<     }
< 
36,48d16
<      * Called from the main game loop to update the screen.
<      */
<     public void updateScreen()
<     {
<         ++this.progress;
< 
<         if (this.progress % 20 == 0)
<         {
<             this.connection.sendPacket(new CPacketKeepAlive());
<         }
<     }
< 
<     /**
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiEnchantment.java src\modified/src/minecraft/net/minecraft/client/gui/GuiEnchantment.java
22a23,24
> 
> import org.golde.lttclientmeme.chroma.ColorUtils;
69,70c71,75
<         this.fontRendererObj.drawString(this.nameable.getDisplayName().getUnformattedText(), 12, 5, 4210752);
<         this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
---
>     	ColorUtils.drawChromaString(this.nameable.getDisplayName().getUnformattedText(), 12, 5);
>         //this.fontRendererObj.drawString(this.nameable.getDisplayName().getUnformattedText(), 12, 5, 4210752);
>     	
>     	ColorUtils.drawChromaString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2);
>         //this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiHopper.java src\modified/src/minecraft/net/minecraft/client/gui/GuiHopper.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
46,47c48,52
<         this.fontRendererObj.drawString(this.hopperInventory.getDisplayName().getUnformattedText(), 8, 6, 4210752);
<         this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
---
>     	ColorUtils.drawChromaString(this.hopperInventory.getDisplayName().getUnformattedText(), 8, 6);
>         //this.fontRendererObj.drawString(this.hopperInventory.getDisplayName().getUnformattedText(), 8, 6, 4210752);
>     	
>     	ColorUtils.drawChromaString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2);
>        //this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiIngame.java src\modified/src/minecraft/net/minecraft/client/gui/GuiIngame.java
8a9
> import java.util.Iterator;
13a15
> import net.minecraft.block.state.IBlockState;
57a60,65
> import optifine.Config;
> import optifine.CustomColors;
> import optifine.CustomItems;
> import optifine.Reflector;
> import optifine.ReflectorForge;
> import optifine.TextureAnimations;
165c173
<         if (Minecraft.isFancyGraphicsEnabled())
---
>         if (Config.isVignetteEnabled())
380c388
<         if (!this.mc.gameSettings.keyBindPlayerList.isKeyDown() || this.mc.isIntegratedServerRunning() && this.mc.player.connection.getPlayerInfoMap().size() <= 1 && scoreobjective1 == null)
---
>         if (this.mc.gameSettings.keyBindPlayerList.isKeyDown() && (!this.mc.isIntegratedServerRunning() || this.mc.player.connection.getPlayerInfoMap().size() > 1 || scoreobjective1 != null))
382c390,391
<             this.overlayPlayerList.updatePlayerList(false);
---
>             this.overlayPlayerList.updatePlayerList(true);
>             this.overlayPlayerList.renderPlayerlist(i, scoreboard, scoreobjective1);
386,387c395
<             this.overlayPlayerList.updatePlayerList(true);
<             this.overlayPlayerList.renderPlayerlist(i, scoreboard, scoreobjective1);
---
>             this.overlayPlayerList.updatePlayerList(false);
410a419
>                 IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
412c421
<                 if (!this.mc.world.getBlockState(blockpos).getBlock().hasTileEntity() || !(this.mc.world.getTileEntity(blockpos) instanceof IInventory))
---
>                 if (!ReflectorForge.blockHasTileEntity(iblockstate) || !(this.mc.world.getTileEntity(blockpos) instanceof IInventory))
476a486
>             Iterator iterator = Ordering.natural().reverse().sortedCopy(collection).iterator();
478c488
<             for (PotionEffect potioneffect : Ordering.natural().reverse().sortedCopy(collection))
---
>             while (true)
480c490,492
<                 Potion potion = potioneffect.getPotion();
---
>                 PotionEffect potioneffect;
>                 Potion potion;
>                 boolean flag;
482c494,518
<                 if (potion.hasStatusIcon() && potioneffect.doesShowParticles())
---
>                 while (true)
>                 {
>                     if (!iterator.hasNext())
>                     {
>                         return;
>                     }
> 
>                     potioneffect = (PotionEffect)iterator.next();
>                     potion = potioneffect.getPotion();
>                     flag = potion.hasStatusIcon();
> 
>                     if (!Reflector.ForgePotion_shouldRenderHUD.exists())
>                     {
>                         break;
>                     }
> 
>                     if (Reflector.callBoolean(potion, Reflector.ForgePotion_shouldRenderHUD, potioneffect))
>                     {
>                         this.mc.getTextureManager().bindTexture(GuiContainer.INVENTORY_BACKGROUND);
>                         flag = true;
>                         break;
>                     }
>                 }
> 
>                 if (flag && potioneffect.doesShowParticles())
525c561,574
<                     this.drawTexturedModalRect(k + 3, l + 3, i1 % 8 * 18, 198 + i1 / 8 * 18, 18, 18);
---
> 
>                     if (Reflector.ForgePotion_renderHUDEffect.exists())
>                     {
>                         if (potion.hasStatusIcon())
>                         {
>                             this.drawTexturedModalRect(k + 3, l + 3, i1 % 8 * 18, 198 + i1 / 8 * 18, 18, 18);
>                         }
> 
>                         Reflector.call(potion, Reflector.ForgePotion_renderHUDEffect, k, l, potioneffect, this.mc, f);
>                     }
>                     else
>                     {
>                         this.drawTexturedModalRect(k + 3, l + 3, i1 % 8 * 18, 198 + i1 / 8 * 18, 18, 18);
>                     }
564a614
>             CustomItems.setRenderOffHand(false);
574a625
>                 CustomItems.setRenderOffHand(true);
584a636,637
> 
>                 CustomItems.setRenderOffHand(false);
656a710,716
>             int j1 = 8453920;
> 
>             if (Config.isCustomColors())
>             {
>                 j1 = CustomColors.getExpBarTextColor(j1);
>             }
> 
658,664c718,724
<             int i1 = (scaledRes.getScaledWidth() - this.getFontRenderer().getStringWidth(s)) / 2;
<             int j1 = scaledRes.getScaledHeight() - 31 - 4;
<             this.getFontRenderer().drawString(s, i1 + 1, j1, 0);
<             this.getFontRenderer().drawString(s, i1 - 1, j1, 0);
<             this.getFontRenderer().drawString(s, i1, j1 + 1, 0);
<             this.getFontRenderer().drawString(s, i1, j1 - 1, 0);
<             this.getFontRenderer().drawString(s, i1, j1, 8453920);
---
>             int k1 = (scaledRes.getScaledWidth() - this.getFontRenderer().getStringWidth(s)) / 2;
>             int i1 = scaledRes.getScaledHeight() - 31 - 4;
>             this.getFontRenderer().drawString(s, k1 + 1, i1, 0);
>             this.getFontRenderer().drawString(s, k1 - 1, i1, 0);
>             this.getFontRenderer().drawString(s, k1, i1 + 1, 0);
>             this.getFontRenderer().drawString(s, k1, i1 - 1, 0);
>             this.getFontRenderer().drawString(s, k1, i1, j1);
1092,1099c1152
<         lightLevel = 1.0F - lightLevel;
<         lightLevel = MathHelper.clamp(lightLevel, 0.0F, 1.0F);
<         WorldBorder worldborder = this.mc.world.getWorldBorder();
<         float f = (float)worldborder.getClosestDistance(this.mc.player);
<         double d0 = Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
<         double d1 = Math.max((double)worldborder.getWarningDistance(), d0);
< 
<         if ((double)f < d1)
---
>         if (!Config.isVignetteEnabled())
1101c1154,1155
<             f = 1.0F - (float)((double)f / d1);
---
>             GlStateManager.enableDepth();
>             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
1105,1106c1159,1164
<             f = 0.0F;
<         }
---
>             lightLevel = 1.0F - lightLevel;
>             lightLevel = MathHelper.clamp(lightLevel, 0.0F, 1.0F);
>             WorldBorder worldborder = this.mc.world.getWorldBorder();
>             float f = (float)worldborder.getClosestDistance(this.mc.player);
>             double d0 = Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
>             double d1 = Math.max((double)worldborder.getWarningDistance(), d0);
1108,1111c1166,1173
<         this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(lightLevel - this.prevVignetteBrightness) * 0.01D);
<         GlStateManager.disableDepth();
<         GlStateManager.depthMask(false);
<         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
---
>             if ((double)f < d1)
>             {
>                 f = 1.0F - (float)((double)f / d1);
>             }
>             else
>             {
>                 f = 0.0F;
>             }
1113,1120c1175,1178
<         if (f > 0.0F)
<         {
<             GlStateManager.color(0.0F, f, f, 1.0F);
<         }
<         else
<         {
<             GlStateManager.color(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
<         }
---
>             this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(lightLevel - this.prevVignetteBrightness) * 0.01D);
>             GlStateManager.disableDepth();
>             GlStateManager.depthMask(false);
>             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
1122,1134c1180,1202
<         this.mc.getTextureManager().bindTexture(VIGNETTE_TEX_PATH);
<         Tessellator tessellator = Tessellator.getInstance();
<         BufferBuilder bufferbuilder = tessellator.getBuffer();
<         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
<         bufferbuilder.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
<         bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
<         bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
<         bufferbuilder.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
<         tessellator.draw();
<         GlStateManager.depthMask(true);
<         GlStateManager.enableDepth();
<         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
<         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
---
>             if (f > 0.0F)
>             {
>                 GlStateManager.color(0.0F, f, f, 1.0F);
>             }
>             else
>             {
>                 GlStateManager.color(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
>             }
> 
>             this.mc.getTextureManager().bindTexture(VIGNETTE_TEX_PATH);
>             Tessellator tessellator = Tessellator.getInstance();
>             BufferBuilder bufferbuilder = tessellator.getBuffer();
>             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
>             bufferbuilder.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
>             bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
>             bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
>             bufferbuilder.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
>             tessellator.draw();
>             GlStateManager.depthMask(true);
>             GlStateManager.enableDepth();
>             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
>             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
>         }
1201a1270,1274
>         if (this.mc.world == null)
>         {
>             TextureAnimations.updateAnimations();
>         }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java src\modified/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java
3,4d2
< import com.google.common.collect.Lists;
< import com.google.common.util.concurrent.Runnables;
9d6
< import java.net.URI;
14a12,21
> 
> import org.apache.commons.io.IOUtils;
> import org.apache.logging.log4j.LogManager;
> import org.apache.logging.log4j.Logger;
> import org.golde.lttclientmeme.chroma.ColorUtils;
> import org.lwjgl.input.Mouse;
> 
> import com.google.common.collect.Lists;
> import com.google.common.util.concurrent.Runnables;
> 
16d22
< import net.minecraft.client.renderer.BufferBuilder;
18,21d23
< import net.minecraft.client.renderer.OpenGlHelper;
< import net.minecraft.client.renderer.Tessellator;
< import net.minecraft.client.renderer.texture.DynamicTexture;
< import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
24,25d25
< import net.minecraft.client.settings.GameSettings;
< import net.minecraft.realms.RealmsBridge;
27d26
< import net.minecraft.util.StringUtils;
29,30d27
< import net.minecraft.util.text.TextFormatting;
< import net.minecraft.world.WorldServerDemo;
32,38d28
< import net.minecraft.world.storage.WorldInfo;
< import org.apache.commons.io.IOUtils;
< import org.apache.logging.log4j.LogManager;
< import org.apache.logging.log4j.Logger;
< import org.lwjgl.input.Mouse;
< import org.lwjgl.opengl.GLContext;
< import org.lwjgl.util.glu.Project;
45,47d34
<     /** Counts the number of screen updates. */
<     private final float updateCounter;
< 
50,58d36
<     private GuiButton buttonResetDemo;
< 
<     /** Timer used to rotate the panorama, increases every tick. */
<     private float panoramaTimer;
< 
<     /**
<      * Texture allocated for the current viewport of the main menu's panorama background.
<      */
<     private DynamicTexture viewportTexture;
64,73d41
<     public static final String MORE_INFO_TEXT = "Please click " + TextFormatting.UNDERLINE + "here" + TextFormatting.RESET + " for more information.";
< 
<     /** Width of openGLWarning2 */
<     private int openGLWarning2Width;
< 
<     /** Width of openGLWarning1 */
<     private int openGLWarning1Width;
< 
<     /** Left x coordinate of the OpenGL warning */
<     private int openGLWarningX1;
75,92c43
<     /** Top y coordinate of the OpenGL warning */
<     private int openGLWarningY1;
< 
<     /** Right x coordinate of the OpenGL warning */
<     private int openGLWarningX2;
< 
<     /** Bottom y coordinate of the OpenGL warning */
<     private int openGLWarningY2;
< 
<     /** OpenGL graphics card warning. */
<     private String openGLWarning1;
< 
<     /** OpenGL graphics card warning. */
<     private String openGLWarning2;
< 
<     /** Link to the Mojang Support about minimum requirements */
<     private String openGLWarningLink;
<     private static final ResourceLocation SPLASH_TEXTS = new ResourceLocation("texts/splashes.txt");
---
>     private static final ResourceLocation SPLASH_TEXTS = new ResourceLocation("ltt/mainmenu/splashes.txt");
93a45,46
>     private static final ResourceLocation BACKGROUND_IMAGE = new ResourceLocation("ltt/mainmenu/background.png");
>     
95,109d47
<     /** An array of all the paths to the panorama pictures. */
<     private static final ResourceLocation[] TITLE_PANORAMA_PATHS = new ResourceLocation[] {new ResourceLocation("textures/gui/title/background/panorama_0.png"), new ResourceLocation("textures/gui/title/background/panorama_1.png"), new ResourceLocation("textures/gui/title/background/panorama_2.png"), new ResourceLocation("textures/gui/title/background/panorama_3.png"), new ResourceLocation("textures/gui/title/background/panorama_4.png"), new ResourceLocation("textures/gui/title/background/panorama_5.png")};
<     private ResourceLocation backgroundTexture;
< 
<     /** Minecraft Realms button. */
<     private GuiButton realmsButton;
< 
<     /** Has the check for a realms notification screen been performed? */
<     private boolean hasCheckedForRealmsNotification;
< 
<     /**
<      * A screen generated by realms for notifications; drawn in adition to the main menu (buttons and such from both are
<      * drawn at the same time). May be null.
<      */
<     private GuiScreen realmsNotification;
115d52
<         this.openGLWarning2 = MORE_INFO_TEXT;
158,185d94
<         this.updateCounter = RANDOM.nextFloat();
<         this.openGLWarning1 = "";
< 
<         if (!GLContext.getCapabilities().OpenGL20 && !OpenGlHelper.areShadersSupported())
<         {
<             this.openGLWarning1 = I18n.format("title.oldgl1");
<             this.openGLWarning2 = I18n.format("title.oldgl2");
<             this.openGLWarningLink = "https://help.mojang.com/customer/portal/articles/325948?ref=game";
<         }
<     }
< 
<     /**
<      * Is there currently a realms notification screen, and are realms notifications enabled?
<      */
<     private boolean areRealmsNotificationsEnabled()
<     {
<         return Minecraft.getMinecraft().gameSettings.getOptionOrdinalValue(GameSettings.Options.REALMS_NOTIFICATIONS) && this.realmsNotification != null;
<     }
< 
<     /**
<      * Called from the main game loop to update the screen.
<      */
<     public void updateScreen()
<     {
<         if (this.areRealmsNotificationsEnabled())
<         {
<             this.realmsNotification.updateScreen();
<         }
210,211d118
<         this.viewportTexture = new DynamicTexture(256, 256);
<         this.backgroundTexture = this.mc.getTextureManager().getDynamicTextureLocation("background", this.viewportTexture);
233,240c140
<         if (this.mc.isDemo())
<         {
<             this.addDemoButtons(j, 24);
<         }
<         else
<         {
<             this.addSingleplayerMultiplayerButtons(j, 24);
<         }
---
>         this.addSingleplayerMultiplayerButtons(j, 24);
246,256d145
<         synchronized (this.threadLock)
<         {
<             this.openGLWarning1Width = this.fontRendererObj.getStringWidth(this.openGLWarning1);
<             this.openGLWarning2Width = this.fontRendererObj.getStringWidth(this.openGLWarning2);
<             int k = Math.max(this.openGLWarning1Width, this.openGLWarning2Width);
<             this.openGLWarningX1 = (this.width - k) / 2;
<             this.openGLWarningY1 = (this.buttonList.get(0)).yPosition - 24;
<             this.openGLWarningX2 = this.openGLWarningX1 + k;
<             this.openGLWarningY2 = this.openGLWarningY1 + 24;
<         }
< 
259,270d147
<         if (Minecraft.getMinecraft().gameSettings.getOptionOrdinalValue(GameSettings.Options.REALMS_NOTIFICATIONS) && !this.hasCheckedForRealmsNotification)
<         {
<             RealmsBridge realmsbridge = new RealmsBridge();
<             this.realmsNotification = realmsbridge.getNotificationScreen(this);
<             this.hasCheckedForRealmsNotification = true;
<         }
< 
<         if (this.areRealmsNotificationsEnabled())
<         {
<             this.realmsNotification.setGuiSize(this.width, this.height);
<             this.realmsNotification.initGui();
<         }
280,296d156
<         this.realmsButton = this.addButton(new GuiButton(14, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 2, I18n.format("menu.online")));
<     }
< 
<     /**
<      * Adds Demo buttons on Main Menu for players who are playing Demo.
<      */
<     private void addDemoButtons(int p_73972_1_, int p_73972_2_)
<     {
<         this.buttonList.add(new GuiButton(11, this.width / 2 - 100, p_73972_1_, I18n.format("menu.playdemo")));
<         this.buttonResetDemo = this.addButton(new GuiButton(12, this.width / 2 - 100, p_73972_1_ + p_73972_2_ * 1, I18n.format("menu.resetdemo")));
<         ISaveFormat isaveformat = this.mc.getSaveLoader();
<         WorldInfo worldinfo = isaveformat.getWorldInfo("Demo_World");
< 
<         if (worldinfo == null)
<         {
<             this.buttonResetDemo.enabled = false;
<         }
324,328d183
<         if (button.id == 14 && this.realmsButton.visible)
<         {
<             this.switchToRealms();
<         }
< 
333,354c188
< 
<         if (button.id == 11)
<         {
<             this.mc.launchIntegratedServer("Demo_World", "Demo_World", WorldServerDemo.DEMO_WORLD_SETTINGS);
<         }
< 
<         if (button.id == 12)
<         {
<             ISaveFormat isaveformat = this.mc.getSaveLoader();
<             WorldInfo worldinfo = isaveformat.getWorldInfo("Demo_World");
< 
<             if (worldinfo != null)
<             {
<                 this.mc.displayGuiScreen(new GuiYesNo(this, I18n.format("selectWorld.deleteQuestion"), "'" + worldinfo.getWorldName() + "' " + I18n.format("selectWorld.deleteWarning"), I18n.format("selectWorld.deleteButton"), I18n.format("gui.cancel"), 12));
<             }
<         }
<     }
< 
<     private void switchToRealms()
<     {
<         RealmsBridge realmsbridge = new RealmsBridge();
<         realmsbridge.switchToRealms(this);
---
>         
370,544d203
<         else if (id == 13)
<         {
<             if (result)
<             {
<                 try
<                 {
<                     Class<?> oclass = Class.forName("java.awt.Desktop");
<                     Object object = oclass.getMethod("getDesktop").invoke((Object)null);
<                     oclass.getMethod("browse", URI.class).invoke(object, new URI(this.openGLWarningLink));
<                 }
<                 catch (Throwable throwable)
<                 {
<                     LOGGER.error("Couldn't open link", throwable);
<                 }
<             }
< 
<             this.mc.displayGuiScreen(this);
<         }
<     }
< 
<     /**
<      * Draws the main menu panorama
<      */
<     private void drawPanorama(int mouseX, int mouseY, float partialTicks)
<     {
<         Tessellator tessellator = Tessellator.getInstance();
<         BufferBuilder bufferbuilder = tessellator.getBuffer();
<         GlStateManager.matrixMode(5889);
<         GlStateManager.pushMatrix();
<         GlStateManager.loadIdentity();
<         Project.gluPerspective(120.0F, 1.0F, 0.05F, 10.0F);
<         GlStateManager.matrixMode(5888);
<         GlStateManager.pushMatrix();
<         GlStateManager.loadIdentity();
<         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
<         GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
<         GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
<         GlStateManager.enableBlend();
<         GlStateManager.disableAlpha();
<         GlStateManager.disableCull();
<         GlStateManager.depthMask(false);
<         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
<         int i = 8;
< 
<         for (int j = 0; j < 64; ++j)
<         {
<             GlStateManager.pushMatrix();
<             float f = ((float)(j % 8) / 8.0F - 0.5F) / 64.0F;
<             float f1 = ((float)(j / 8) / 8.0F - 0.5F) / 64.0F;
<             float f2 = 0.0F;
<             GlStateManager.translate(f, f1, 0.0F);
<             GlStateManager.rotate(MathHelper.sin(this.panoramaTimer / 400.0F) * 25.0F + 20.0F, 1.0F, 0.0F, 0.0F);
<             GlStateManager.rotate(-this.panoramaTimer * 0.1F, 0.0F, 1.0F, 0.0F);
< 
<             for (int k = 0; k < 6; ++k)
<             {
<                 GlStateManager.pushMatrix();
< 
<                 if (k == 1)
<                 {
<                     GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
<                 }
< 
<                 if (k == 2)
<                 {
<                     GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
<                 }
< 
<                 if (k == 3)
<                 {
<                     GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
<                 }
< 
<                 if (k == 4)
<                 {
<                     GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
<                 }
< 
<                 if (k == 5)
<                 {
<                     GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
<                 }
< 
<                 this.mc.getTextureManager().bindTexture(TITLE_PANORAMA_PATHS[k]);
<                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
<                 int l = 255 / (j + 1);
<                 float f3 = 0.0F;
<                 bufferbuilder.pos(-1.0D, -1.0D, 1.0D).tex(0.0D, 0.0D).color(255, 255, 255, l).endVertex();
<                 bufferbuilder.pos(1.0D, -1.0D, 1.0D).tex(1.0D, 0.0D).color(255, 255, 255, l).endVertex();
<                 bufferbuilder.pos(1.0D, 1.0D, 1.0D).tex(1.0D, 1.0D).color(255, 255, 255, l).endVertex();
<                 bufferbuilder.pos(-1.0D, 1.0D, 1.0D).tex(0.0D, 1.0D).color(255, 255, 255, l).endVertex();
<                 tessellator.draw();
<                 GlStateManager.popMatrix();
<             }
< 
<             GlStateManager.popMatrix();
<             GlStateManager.colorMask(true, true, true, false);
<         }
< 
<         bufferbuilder.setTranslation(0.0D, 0.0D, 0.0D);
<         GlStateManager.colorMask(true, true, true, true);
<         GlStateManager.matrixMode(5889);
<         GlStateManager.popMatrix();
<         GlStateManager.matrixMode(5888);
<         GlStateManager.popMatrix();
<         GlStateManager.depthMask(true);
<         GlStateManager.enableCull();
<         GlStateManager.enableDepth();
<     }
< 
<     /**
<      * Rotate and blurs the skybox view in the main menu
<      */
<     private void rotateAndBlurSkybox()
<     {
<         this.mc.getTextureManager().bindTexture(this.backgroundTexture);
<         GlStateManager.glTexParameteri(3553, 10241, 9729);
<         GlStateManager.glTexParameteri(3553, 10240, 9729);
<         GlStateManager.glCopyTexSubImage2D(3553, 0, 0, 0, 0, 0, 256, 256);
<         GlStateManager.enableBlend();
<         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
<         GlStateManager.colorMask(true, true, true, false);
<         Tessellator tessellator = Tessellator.getInstance();
<         BufferBuilder bufferbuilder = tessellator.getBuffer();
<         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
<         GlStateManager.disableAlpha();
<         int i = 3;
< 
<         for (int j = 0; j < 3; ++j)
<         {
<             float f = 1.0F / (float)(j + 1);
<             int k = this.width;
<             int l = this.height;
<             float f1 = (float)(j - 1) / 256.0F;
<             bufferbuilder.pos((double)k, (double)l, (double)this.zLevel).tex((double)(0.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
<             bufferbuilder.pos((double)k, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
<             bufferbuilder.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
<             bufferbuilder.pos(0.0D, (double)l, (double)this.zLevel).tex((double)(0.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
<         }
< 
<         tessellator.draw();
<         GlStateManager.enableAlpha();
<         GlStateManager.colorMask(true, true, true, true);
<     }
< 
<     /**
<      * Renders the skybox in the main menu
<      */
<     private void renderSkybox(int mouseX, int mouseY, float partialTicks)
<     {
<         this.mc.getFramebuffer().unbindFramebuffer();
<         GlStateManager.viewport(0, 0, 256, 256);
<         this.drawPanorama(mouseX, mouseY, partialTicks);
<         this.rotateAndBlurSkybox();
<         this.rotateAndBlurSkybox();
<         this.rotateAndBlurSkybox();
<         this.rotateAndBlurSkybox();
<         this.rotateAndBlurSkybox();
<         this.rotateAndBlurSkybox();
<         this.rotateAndBlurSkybox();
<         this.mc.getFramebuffer().bindFramebuffer(true);
<         GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
<         float f = 120.0F / (float)(this.width > this.height ? this.width : this.height);
<         float f1 = (float)this.height * f / 256.0F;
<         float f2 = (float)this.width * f / 256.0F;
<         int i = this.width;
<         int j = this.height;
<         Tessellator tessellator = Tessellator.getInstance();
<         BufferBuilder bufferbuilder = tessellator.getBuffer();
<         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
<         bufferbuilder.pos(0.0D, (double)j, (double)this.zLevel).tex((double)(0.5F - f1), (double)(0.5F + f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
<         bufferbuilder.pos((double)i, (double)j, (double)this.zLevel).tex((double)(0.5F - f1), (double)(0.5F - f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
<         bufferbuilder.pos((double)i, 0.0D, (double)this.zLevel).tex((double)(0.5F + f1), (double)(0.5F - f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
<         bufferbuilder.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(0.5F + f1), (double)(0.5F + f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
<         tessellator.draw();
552,554d210
<         this.panoramaTimer += partialTicks;
<         GlStateManager.disableAlpha();
<         this.renderSkybox(mouseX, mouseY, partialTicks);
559,562c215,218
<         this.drawGradientRect(0, 0, this.width, this.height, -2130706433, 16777215);
<         this.drawGradientRect(0, 0, this.width, this.height, 0, Integer.MIN_VALUE);
<         this.mc.getTextureManager().bindTexture(MINECRAFT_TITLE_TEXTURES);
<         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
---
>         int l = -2130706433;
>         int i1 = 16777215;
>         int j1 = 0;
>         int k1 = Integer.MIN_VALUE;
564c220
<         if ((double)this.updateCounter < 1.0E-4D)
---
>         if (l != 0 || i1 != 0)
566,570c222
<             this.drawTexturedModalRect(j + 0, 30, 0, 0, 99, 44);
<             this.drawTexturedModalRect(j + 99, 30, 129, 0, 27, 44);
<             this.drawTexturedModalRect(j + 99 + 26, 30, 126, 0, 3, 44);
<             this.drawTexturedModalRect(j + 99 + 26 + 3, 30, 99, 0, 26, 44);
<             this.drawTexturedModalRect(j + 155, 30, 0, 45, 155, 44);
---
>             this.drawGradientRect(0, 0, this.width, this.height, l, i1);
572c224,225
<         else
---
> 
>         if (j1 != 0 || k1 != 0)
574,575c227
<             this.drawTexturedModalRect(j + 0, 30, 0, 0, 155, 44);
<             this.drawTexturedModalRect(j + 155, 30, 0, 45, 155, 44);
---
>             this.drawGradientRect(0, 0, this.width, this.height, j1, k1);
577a230,242
>         
>         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
>         
>         //Draw BG
>         ScaledResolution scaledRes = new ScaledResolution(this.mc);
>         this.mc.getTextureManager().bindTexture(BACKGROUND_IMAGE);
>         Gui.drawScaledCustomSizeModalRect(0, 0, 0.0F, 0.0F, scaledRes.getScaledWidth(), scaledRes.getScaledHeight(), scaledRes.getScaledWidth(), scaledRes.getScaledHeight(), scaledRes.getScaledWidth(), scaledRes.getScaledHeight());
> 
>         //draw mojang logo
>         this.mc.getTextureManager().bindTexture(MINECRAFT_TITLE_TEXTURES);
>         this.drawTexturedModalRect(j + 0, 30, 0, 0, 155, 44);
>         this.drawTexturedModalRect(j + 155, 30, 0, 45, 155, 44);
> 
586,610d250
<         String s = "Minecraft 1.12";
< 
<         if (this.mc.isDemo())
<         {
<             s = s + " Demo";
<         }
<         else
<         {
<             s = s + ("release".equalsIgnoreCase(this.mc.getVersionType()) ? "" : "/" + this.mc.getVersionType());
<         }
< 
<         this.drawString(this.fontRendererObj, s, 2, this.height - 10, -1);
<         this.drawString(this.fontRendererObj, "Copyright Mojang AB. Do not distribute!", this.field_193979_N, this.height - 10, -1);
< 
<         if (mouseX > this.field_193979_N && mouseX < this.field_193979_N + this.field_193978_M && mouseY > this.height - 10 && mouseY < this.height && Mouse.isInsideWindow())
<         {
<             drawRect(this.field_193979_N, this.height - 1, this.field_193979_N + this.field_193978_M, this.height, -1);
<         }
< 
<         if (this.openGLWarning1 != null && !this.openGLWarning1.isEmpty())
<         {
<             drawRect(this.openGLWarningX1 - 2, this.openGLWarningY1 - 2, this.openGLWarningX2 + 2, this.openGLWarningY2 - 1, 1428160512);
<             this.drawString(this.fontRendererObj, this.openGLWarning1, this.openGLWarningX1, this.openGLWarningY1, -1);
<             this.drawString(this.fontRendererObj, this.openGLWarning2, (this.width - this.openGLWarning2Width) / 2, (this.buttonList.get(0)).yPosition - 12, -1);
<         }
611a252,260
>         String leftText = "Minecraft 1.12.2";
>         //this.drawString(this.fontRendererObj, leftText, 2, this.height - 10, -1);
>         ColorUtils.drawChromaString(leftText, 2, this.height - 10);
> 
>         String rightText = "Copyright Mojang AB. Do not distribute!";
>         int rightTextWidth = this.fontRendererObj.getStringWidth(rightText);
>         //this.drawString(this.fontRendererObj, rightText, this.width -rightTextWidth - 2, this.height - 10, -1);
>         ColorUtils.drawChromaString(rightText, this.width -rightTextWidth - 2, this.height - 10);
>         
614,617d262
<         if (this.areRealmsNotificationsEnabled())
<         {
<             this.realmsNotification.drawScreen(mouseX, mouseY, partialTicks);
<         }
626,645d270
< 
<         synchronized (this.threadLock)
<         {
<             if (!this.openGLWarning1.isEmpty() && !StringUtils.isNullOrEmpty(this.openGLWarningLink) && mouseX >= this.openGLWarningX1 && mouseX <= this.openGLWarningX2 && mouseY >= this.openGLWarningY1 && mouseY <= this.openGLWarningY2)
<             {
<                 GuiConfirmOpenLink guiconfirmopenlink = new GuiConfirmOpenLink(this, this.openGLWarningLink, 13, true);
<                 guiconfirmopenlink.disableSecurityWarning();
<                 this.mc.displayGuiScreen(guiconfirmopenlink);
<             }
<         }
< 
<         if (this.areRealmsNotificationsEnabled())
<         {
<             this.realmsNotification.mouseClicked(mouseX, mouseY, mouseButton);
<         }
< 
<         if (mouseX > this.field_193979_N && mouseX < this.field_193979_N + this.field_193978_M && mouseY > this.height - 10 && mouseY < this.height)
<         {
<             this.mc.displayGuiScreen(new GuiWinGame(false, Runnables.doNothing()));
<         }
648,657d272
<     /**
<      * Called when the screen is unloaded. Used to disable keyboard repeat events
<      */
<     public void onGuiClosed()
<     {
<         if (this.realmsNotification != null)
<         {
<             this.realmsNotification.onGuiClosed();
<         }
<     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiMultiplayer.java src\modified/src/minecraft/net/minecraft/client/gui/GuiMultiplayer.java
15a16
> import org.golde.lttclientmeme.ServerDataFeatured;
20,489c21,495
<     private static final Logger LOGGER = LogManager.getLogger();
<     private final ServerPinger oldServerPinger = new ServerPinger();
<     private final GuiScreen parentScreen;
<     private ServerSelectionList serverListSelector;
<     private ServerList savedServerList;
<     private GuiButton btnEditServer;
<     private GuiButton btnSelectServer;
<     private GuiButton btnDeleteServer;
<     private boolean deletingServer;
<     private boolean addingServer;
<     private boolean editingServer;
<     private boolean directConnect;
< 
<     /**
<      * The text to be displayed when the player's cursor hovers over a server listing.
<      */
<     private String hoveringText;
<     private ServerData selectedServer;
<     private LanServerDetector.LanServerList lanServerList;
<     private LanServerDetector.ThreadLanServerFind lanServerDetector;
<     private boolean initialized;
< 
<     public GuiMultiplayer(GuiScreen parentScreen)
<     {
<         this.parentScreen = parentScreen;
<     }
< 
<     /**
<      * Adds the buttons (and other controls) to the screen in question. Called when the GUI is displayed and when the
<      * window resizes, the buttonList is cleared beforehand.
<      */
<     public void initGui()
<     {
<         Keyboard.enableRepeatEvents(true);
<         this.buttonList.clear();
< 
<         if (this.initialized)
<         {
<             this.serverListSelector.setDimensions(this.width, this.height, 32, this.height - 64);
<         }
<         else
<         {
<             this.initialized = true;
<             this.savedServerList = new ServerList(this.mc);
<             this.savedServerList.loadServerList();
<             this.lanServerList = new LanServerDetector.LanServerList();
< 
<             try
<             {
<                 this.lanServerDetector = new LanServerDetector.ThreadLanServerFind(this.lanServerList);
<                 this.lanServerDetector.start();
<             }
<             catch (Exception exception)
<             {
<                 LOGGER.warn("Unable to start LAN server detection: {}", (Object)exception.getMessage());
<             }
< 
<             this.serverListSelector = new ServerSelectionList(this, this.mc, this.width, this.height, 32, this.height - 64, 36);
<             this.serverListSelector.updateOnlineServers(this.savedServerList);
<         }
< 
<         this.createButtons();
<     }
< 
<     /**
<      * Handles mouse input.
<      */
<     public void handleMouseInput() throws IOException
<     {
<         super.handleMouseInput();
<         this.serverListSelector.handleMouseInput();
<     }
< 
<     public void createButtons()
<     {
<         this.btnEditServer = this.addButton(new GuiButton(7, this.width / 2 - 154, this.height - 28, 70, 20, I18n.format("selectServer.edit")));
<         this.btnDeleteServer = this.addButton(new GuiButton(2, this.width / 2 - 74, this.height - 28, 70, 20, I18n.format("selectServer.delete")));
<         this.btnSelectServer = this.addButton(new GuiButton(1, this.width / 2 - 154, this.height - 52, 100, 20, I18n.format("selectServer.select")));
<         this.buttonList.add(new GuiButton(4, this.width / 2 - 50, this.height - 52, 100, 20, I18n.format("selectServer.direct")));
<         this.buttonList.add(new GuiButton(3, this.width / 2 + 4 + 50, this.height - 52, 100, 20, I18n.format("selectServer.add")));
<         this.buttonList.add(new GuiButton(8, this.width / 2 + 4, this.height - 28, 70, 20, I18n.format("selectServer.refresh")));
<         this.buttonList.add(new GuiButton(0, this.width / 2 + 4 + 76, this.height - 28, 75, 20, I18n.format("gui.cancel")));
<         this.selectServer(this.serverListSelector.getSelected());
<     }
< 
<     /**
<      * Called from the main game loop to update the screen.
<      */
<     public void updateScreen()
<     {
<         super.updateScreen();
< 
<         if (this.lanServerList.getWasUpdated())
<         {
<             List<LanServerInfo> list = this.lanServerList.getLanServers();
<             this.lanServerList.setWasNotUpdated();
<             this.serverListSelector.updateNetworkServers(list);
<         }
< 
<         this.oldServerPinger.pingPendingNetworks();
<     }
< 
<     /**
<      * Called when the screen is unloaded. Used to disable keyboard repeat events
<      */
<     public void onGuiClosed()
<     {
<         Keyboard.enableRepeatEvents(false);
< 
<         if (this.lanServerDetector != null)
<         {
<             this.lanServerDetector.interrupt();
<             this.lanServerDetector = null;
<         }
< 
<         this.oldServerPinger.clearPendingNetworks();
<     }
< 
<     /**
<      * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
<      */
<     protected void actionPerformed(GuiButton button) throws IOException
<     {
<         if (button.enabled)
<         {
<             GuiListExtended.IGuiListEntry guilistextended$iguilistentry = this.serverListSelector.getSelected() < 0 ? null : this.serverListSelector.getListEntry(this.serverListSelector.getSelected());
< 
<             if (button.id == 2 && guilistextended$iguilistentry instanceof ServerListEntryNormal)
<             {
<                 String s4 = ((ServerListEntryNormal)guilistextended$iguilistentry).getServerData().serverName;
< 
<                 if (s4 != null)
<                 {
<                     this.deletingServer = true;
<                     String s = I18n.format("selectServer.deleteQuestion");
<                     String s1 = "'" + s4 + "' " + I18n.format("selectServer.deleteWarning");
<                     String s2 = I18n.format("selectServer.deleteButton");
<                     String s3 = I18n.format("gui.cancel");
<                     GuiYesNo guiyesno = new GuiYesNo(this, s, s1, s2, s3, this.serverListSelector.getSelected());
<                     this.mc.displayGuiScreen(guiyesno);
<                 }
<             }
<             else if (button.id == 1)
<             {
<                 this.connectToSelected();
<             }
<             else if (button.id == 4)
<             {
<                 this.directConnect = true;
<                 this.selectedServer = new ServerData(I18n.format("selectServer.defaultName"), "", false);
<                 this.mc.displayGuiScreen(new GuiScreenServerList(this, this.selectedServer));
<             }
<             else if (button.id == 3)
<             {
<                 this.addingServer = true;
<                 this.selectedServer = new ServerData(I18n.format("selectServer.defaultName"), "", false);
<                 this.mc.displayGuiScreen(new GuiScreenAddServer(this, this.selectedServer));
<             }
<             else if (button.id == 7 && guilistextended$iguilistentry instanceof ServerListEntryNormal)
<             {
<                 this.editingServer = true;
<                 ServerData serverdata = ((ServerListEntryNormal)guilistextended$iguilistentry).getServerData();
<                 this.selectedServer = new ServerData(serverdata.serverName, serverdata.serverIP, false);
<                 this.selectedServer.copyFrom(serverdata);
<                 this.mc.displayGuiScreen(new GuiScreenAddServer(this, this.selectedServer));
<             }
<             else if (button.id == 0)
<             {
<                 this.mc.displayGuiScreen(this.parentScreen);
<             }
<             else if (button.id == 8)
<             {
<                 this.refreshServerList();
<             }
<         }
<     }
< 
<     private void refreshServerList()
<     {
<         this.mc.displayGuiScreen(new GuiMultiplayer(this.parentScreen));
<     }
< 
<     public void confirmClicked(boolean result, int id)
<     {
<         GuiListExtended.IGuiListEntry guilistextended$iguilistentry = this.serverListSelector.getSelected() < 0 ? null : this.serverListSelector.getListEntry(this.serverListSelector.getSelected());
< 
<         if (this.deletingServer)
<         {
<             this.deletingServer = false;
< 
<             if (result && guilistextended$iguilistentry instanceof ServerListEntryNormal)
<             {
<                 this.savedServerList.removeServerData(this.serverListSelector.getSelected());
<                 this.savedServerList.saveServerList();
<                 this.serverListSelector.setSelectedSlotIndex(-1);
<                 this.serverListSelector.updateOnlineServers(this.savedServerList);
<             }
< 
<             this.mc.displayGuiScreen(this);
<         }
<         else if (this.directConnect)
<         {
<             this.directConnect = false;
< 
<             if (result)
<             {
<                 this.connectToServer(this.selectedServer);
<             }
<             else
<             {
<                 this.mc.displayGuiScreen(this);
<             }
<         }
<         else if (this.addingServer)
<         {
<             this.addingServer = false;
< 
<             if (result)
<             {
<                 this.savedServerList.addServerData(this.selectedServer);
<                 this.savedServerList.saveServerList();
<                 this.serverListSelector.setSelectedSlotIndex(-1);
<                 this.serverListSelector.updateOnlineServers(this.savedServerList);
<             }
< 
<             this.mc.displayGuiScreen(this);
<         }
<         else if (this.editingServer)
<         {
<             this.editingServer = false;
< 
<             if (result && guilistextended$iguilistentry instanceof ServerListEntryNormal)
<             {
<                 ServerData serverdata = ((ServerListEntryNormal)guilistextended$iguilistentry).getServerData();
<                 serverdata.serverName = this.selectedServer.serverName;
<                 serverdata.serverIP = this.selectedServer.serverIP;
<                 serverdata.copyFrom(this.selectedServer);
<                 this.savedServerList.saveServerList();
<                 this.serverListSelector.updateOnlineServers(this.savedServerList);
<             }
< 
<             this.mc.displayGuiScreen(this);
<         }
<     }
< 
<     /**
<      * Fired when a key is typed (except F11 which toggles full screen). This is the equivalent of
<      * KeyListener.keyTyped(KeyEvent e). Args : character (character on the key), keyCode (lwjgl Keyboard key code)
<      */
<     protected void keyTyped(char typedChar, int keyCode) throws IOException
<     {
<         int i = this.serverListSelector.getSelected();
<         GuiListExtended.IGuiListEntry guilistextended$iguilistentry = i < 0 ? null : this.serverListSelector.getListEntry(i);
< 
<         if (keyCode == 63)
<         {
<             this.refreshServerList();
<         }
<         else
<         {
<             if (i >= 0)
<             {
<                 if (keyCode == 200)
<                 {
<                     if (isShiftKeyDown())
<                     {
<                         if (i > 0 && guilistextended$iguilistentry instanceof ServerListEntryNormal)
<                         {
<                             this.savedServerList.swapServers(i, i - 1);
<                             this.selectServer(this.serverListSelector.getSelected() - 1);
<                             this.serverListSelector.scrollBy(-this.serverListSelector.getSlotHeight());
<                             this.serverListSelector.updateOnlineServers(this.savedServerList);
<                         }
<                     }
<                     else if (i > 0)
<                     {
<                         this.selectServer(this.serverListSelector.getSelected() - 1);
<                         this.serverListSelector.scrollBy(-this.serverListSelector.getSlotHeight());
< 
<                         if (this.serverListSelector.getListEntry(this.serverListSelector.getSelected()) instanceof ServerListEntryLanScan)
<                         {
<                             if (this.serverListSelector.getSelected() > 0)
<                             {
<                                 this.selectServer(this.serverListSelector.getSize() - 1);
<                                 this.serverListSelector.scrollBy(-this.serverListSelector.getSlotHeight());
<                             }
<                             else
<                             {
<                                 this.selectServer(-1);
<                             }
<                         }
<                     }
<                     else
<                     {
<                         this.selectServer(-1);
<                     }
<                 }
<                 else if (keyCode == 208)
<                 {
<                     if (isShiftKeyDown())
<                     {
<                         if (i < this.savedServerList.countServers() - 1)
<                         {
<                             this.savedServerList.swapServers(i, i + 1);
<                             this.selectServer(i + 1);
<                             this.serverListSelector.scrollBy(this.serverListSelector.getSlotHeight());
<                             this.serverListSelector.updateOnlineServers(this.savedServerList);
<                         }
<                     }
<                     else if (i < this.serverListSelector.getSize())
<                     {
<                         this.selectServer(this.serverListSelector.getSelected() + 1);
<                         this.serverListSelector.scrollBy(this.serverListSelector.getSlotHeight());
< 
<                         if (this.serverListSelector.getListEntry(this.serverListSelector.getSelected()) instanceof ServerListEntryLanScan)
<                         {
<                             if (this.serverListSelector.getSelected() < this.serverListSelector.getSize() - 1)
<                             {
<                                 this.selectServer(this.serverListSelector.getSize() + 1);
<                                 this.serverListSelector.scrollBy(this.serverListSelector.getSlotHeight());
<                             }
<                             else
<                             {
<                                 this.selectServer(-1);
<                             }
<                         }
<                     }
<                     else
<                     {
<                         this.selectServer(-1);
<                     }
<                 }
<                 else if (keyCode != 28 && keyCode != 156)
<                 {
<                     super.keyTyped(typedChar, keyCode);
<                 }
<                 else
<                 {
<                     this.actionPerformed(this.buttonList.get(2));
<                 }
<             }
<             else
<             {
<                 super.keyTyped(typedChar, keyCode);
<             }
<         }
<     }
< 
<     /**
<      * Draws the screen and all the components in it.
<      */
<     public void drawScreen(int mouseX, int mouseY, float partialTicks)
<     {
<         this.hoveringText = null;
<         this.drawDefaultBackground();
<         this.serverListSelector.drawScreen(mouseX, mouseY, partialTicks);
<         this.drawCenteredString(this.fontRendererObj, I18n.format("multiplayer.title"), this.width / 2, 20, 16777215);
<         super.drawScreen(mouseX, mouseY, partialTicks);
< 
<         if (this.hoveringText != null)
<         {
<             this.drawHoveringText(Lists.newArrayList(Splitter.on("\n").split(this.hoveringText)), mouseX, mouseY);
<         }
<     }
< 
<     public void connectToSelected()
<     {
<         GuiListExtended.IGuiListEntry guilistextended$iguilistentry = this.serverListSelector.getSelected() < 0 ? null : this.serverListSelector.getListEntry(this.serverListSelector.getSelected());
< 
<         if (guilistextended$iguilistentry instanceof ServerListEntryNormal)
<         {
<             this.connectToServer(((ServerListEntryNormal)guilistextended$iguilistentry).getServerData());
<         }
<         else if (guilistextended$iguilistentry instanceof ServerListEntryLanDetected)
<         {
<             LanServerInfo lanserverinfo = ((ServerListEntryLanDetected)guilistextended$iguilistentry).getServerData();
<             this.connectToServer(new ServerData(lanserverinfo.getServerMotd(), lanserverinfo.getServerIpPort(), true));
<         }
<     }
< 
<     private void connectToServer(ServerData server)
<     {
<         this.mc.displayGuiScreen(new GuiConnecting(this, this.mc, server));
<     }
< 
<     public void selectServer(int index)
<     {
<         this.serverListSelector.setSelectedSlotIndex(index);
<         GuiListExtended.IGuiListEntry guilistextended$iguilistentry = index < 0 ? null : this.serverListSelector.getListEntry(index);
<         this.btnSelectServer.enabled = false;
<         this.btnEditServer.enabled = false;
<         this.btnDeleteServer.enabled = false;
< 
<         if (guilistextended$iguilistentry != null && !(guilistextended$iguilistentry instanceof ServerListEntryLanScan))
<         {
<             this.btnSelectServer.enabled = true;
< 
<             if (guilistextended$iguilistentry instanceof ServerListEntryNormal)
<             {
<                 this.btnEditServer.enabled = true;
<                 this.btnDeleteServer.enabled = true;
<             }
<         }
<     }
< 
<     public ServerPinger getOldServerPinger()
<     {
<         return this.oldServerPinger;
<     }
< 
<     public void setHoveringText(String p_146793_1_)
<     {
<         this.hoveringText = p_146793_1_;
<     }
< 
<     /**
<      * Called when the mouse is clicked. Args : mouseX, mouseY, clickedButton
<      */
<     protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
<     {
<         super.mouseClicked(mouseX, mouseY, mouseButton);
<         this.serverListSelector.mouseClicked(mouseX, mouseY, mouseButton);
<     }
< 
<     /**
<      * Called when a mouse button is released.
<      */
<     protected void mouseReleased(int mouseX, int mouseY, int state)
<     {
<         super.mouseReleased(mouseX, mouseY, state);
<         this.serverListSelector.mouseReleased(mouseX, mouseY, state);
<     }
< 
<     public ServerList getServerList()
<     {
<         return this.savedServerList;
<     }
< 
<     public boolean canMoveUp(ServerListEntryNormal p_175392_1_, int p_175392_2_)
<     {
<         return p_175392_2_ > 0;
<     }
< 
<     public boolean canMoveDown(ServerListEntryNormal p_175394_1_, int p_175394_2_)
<     {
<         return p_175394_2_ < this.savedServerList.countServers() - 1;
<     }
< 
<     public void moveServerUp(ServerListEntryNormal p_175391_1_, int p_175391_2_, boolean p_175391_3_)
<     {
<         int i = p_175391_3_ ? 0 : p_175391_2_ - 1;
<         this.savedServerList.swapServers(p_175391_2_, i);
< 
<         if (this.serverListSelector.getSelected() == p_175391_2_)
<         {
<             this.selectServer(i);
<         }
< 
<         this.serverListSelector.updateOnlineServers(this.savedServerList);
<     }
< 
<     public void moveServerDown(ServerListEntryNormal p_175393_1_, int p_175393_2_, boolean p_175393_3_)
<     {
<         int i = p_175393_3_ ? this.savedServerList.countServers() - 1 : p_175393_2_ + 1;
<         this.savedServerList.swapServers(p_175393_2_, i);
< 
<         if (this.serverListSelector.getSelected() == p_175393_2_)
<         {
<             this.selectServer(i);
<         }
---
> 	private static final Logger LOGGER = LogManager.getLogger();
> 	private final ServerPinger oldServerPinger = new ServerPinger();
> 	private final GuiScreen parentScreen;
> 	private ServerSelectionList serverListSelector;
> 	private ServerList savedServerList;
> 	private GuiButton btnEditServer;
> 	private GuiButton btnSelectServer;
> 	private GuiButton btnDeleteServer;
> 	private boolean deletingServer;
> 	private boolean addingServer;
> 	private boolean editingServer;
> 	private boolean directConnect;
> 
> 	/**
> 	 * The text to be displayed when the player's cursor hovers over a server listing.
> 	 */
> 	private String hoveringText;
> 	private ServerData selectedServer;
> 	private LanServerDetector.LanServerList lanServerList;
> 	private LanServerDetector.ThreadLanServerFind lanServerDetector;
> 	private boolean initialized;
> 
> 	public GuiMultiplayer(GuiScreen parentScreen)
> 	{
> 		this.parentScreen = parentScreen;
> 	}
> 
> 	/**
> 	 * Adds the buttons (and other controls) to the screen in question. Called when the GUI is displayed and when the
> 	 * window resizes, the buttonList is cleared beforehand.
> 	 */
> 	public void initGui()
> 	{
> 		Keyboard.enableRepeatEvents(true);
> 		this.buttonList.clear();
> 
> 		if (this.initialized)
> 		{
> 			this.serverListSelector.setDimensions(this.width, this.height, 32, this.height - 64);
> 		}
> 		else
> 		{
> 			this.initialized = true;
> 			this.savedServerList = new ServerList(this.mc);
> 			this.savedServerList.loadServerList();
> 			this.lanServerList = new LanServerDetector.LanServerList();
> 
> 			try
> 			{
> 				this.lanServerDetector = new LanServerDetector.ThreadLanServerFind(this.lanServerList);
> 				this.lanServerDetector.start();
> 			}
> 			catch (Exception exception)
> 			{
> 				LOGGER.warn("Unable to start LAN server detection: {}", (Object)exception.getMessage());
> 			}
> 
> 			this.serverListSelector = new ServerSelectionList(this, this.mc, this.width, this.height, 32, this.height - 64, 36);
> 			this.serverListSelector.updateOnlineServers(this.savedServerList);
> 		}
> 
> 		this.createButtons();
> 	}
> 
> 	/**
> 	 * Handles mouse input.
> 	 */
> 	public void handleMouseInput() throws IOException
> 	{
> 		super.handleMouseInput();
> 		this.serverListSelector.handleMouseInput();
> 	}
> 
> 	public void createButtons()
> 	{
> 		this.btnEditServer = this.addButton(new GuiButton(7, this.width / 2 - 154, this.height - 28, 70, 20, I18n.format("selectServer.edit")));
> 		this.btnDeleteServer = this.addButton(new GuiButton(2, this.width / 2 - 74, this.height - 28, 70, 20, I18n.format("selectServer.delete")));
> 		this.btnSelectServer = this.addButton(new GuiButton(1, this.width / 2 - 154, this.height - 52, 100, 20, I18n.format("selectServer.select")));
> 		this.buttonList.add(new GuiButton(4, this.width / 2 - 50, this.height - 52, 100, 20, I18n.format("selectServer.direct")));
> 		this.buttonList.add(new GuiButton(3, this.width / 2 + 4 + 50, this.height - 52, 100, 20, I18n.format("selectServer.add")));
> 		this.buttonList.add(new GuiButton(8, this.width / 2 + 4, this.height - 28, 70, 20, I18n.format("selectServer.refresh")));
> 		this.buttonList.add(new GuiButton(0, this.width / 2 + 4 + 76, this.height - 28, 75, 20, I18n.format("gui.cancel")));
> 		this.selectServer(this.serverListSelector.getSelected());
> 	}
> 
> 	/**
> 	 * Called from the main game loop to update the screen.
> 	 */
> 	public void updateScreen()
> 	{
> 		super.updateScreen();
> 
> 		if (this.lanServerList.getWasUpdated())
> 		{
> 			List<LanServerInfo> list = this.lanServerList.getLanServers();
> 			this.lanServerList.setWasNotUpdated();
> 			this.serverListSelector.updateNetworkServers(list);
> 		}
> 
> 		this.oldServerPinger.pingPendingNetworks();
> 	}
> 
> 	/**
> 	 * Called when the screen is unloaded. Used to disable keyboard repeat events
> 	 */
> 	public void onGuiClosed()
> 	{
> 		Keyboard.enableRepeatEvents(false);
> 
> 		if (this.lanServerDetector != null)
> 		{
> 			this.lanServerDetector.interrupt();
> 			this.lanServerDetector = null;
> 		}
> 
> 		this.oldServerPinger.clearPendingNetworks();
> 	}
> 
> 	/**
> 	 * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
> 	 */
> 	protected void actionPerformed(GuiButton button) throws IOException
> 	{
> 		if (button.enabled)
> 		{
> 			GuiListExtended.IGuiListEntry guilistextended$iguilistentry = this.serverListSelector.getSelected() < 0 ? null : this.serverListSelector.getListEntry(this.serverListSelector.getSelected());
> 
> 			if (button.id == 2 && guilistextended$iguilistentry instanceof ServerListEntryNormal)
> 			{
> 				String s4 = ((ServerListEntryNormal)guilistextended$iguilistentry).getServerData().serverName;
> 
> 				if (s4 != null)
> 				{
> 					this.deletingServer = true;
> 					String s = I18n.format("selectServer.deleteQuestion");
> 					String s1 = "'" + s4 + "' " + I18n.format("selectServer.deleteWarning");
> 					String s2 = I18n.format("selectServer.deleteButton");
> 					String s3 = I18n.format("gui.cancel");
> 					GuiYesNo guiyesno = new GuiYesNo(this, s, s1, s2, s3, this.serverListSelector.getSelected());
> 					this.mc.displayGuiScreen(guiyesno);
> 				}
> 			}
> 			else if (button.id == 1)
> 			{
> 				this.connectToSelected();
> 			}
> 			else if (button.id == 4)
> 			{
> 				this.directConnect = true;
> 				this.selectedServer = new ServerData(I18n.format("selectServer.defaultName"), "", false);
> 				this.mc.displayGuiScreen(new GuiScreenServerList(this, this.selectedServer));
> 			}
> 			else if (button.id == 3)
> 			{
> 				this.addingServer = true;
> 				this.selectedServer = new ServerData(I18n.format("selectServer.defaultName"), "", false);
> 				this.mc.displayGuiScreen(new GuiScreenAddServer(this, this.selectedServer));
> 			}
> 			else if (button.id == 7 && guilistextended$iguilistentry instanceof ServerListEntryNormal)
> 			{
> 				this.editingServer = true;
> 				ServerData serverdata = ((ServerListEntryNormal)guilistextended$iguilistentry).getServerData();
> 				this.selectedServer = new ServerData(serverdata.serverName, serverdata.serverIP, false);
> 				this.selectedServer.copyFrom(serverdata);
> 				this.mc.displayGuiScreen(new GuiScreenAddServer(this, this.selectedServer));
> 			}
> 			else if (button.id == 0)
> 			{
> 				this.mc.displayGuiScreen(this.parentScreen);
> 			}
> 			else if (button.id == 8)
> 			{
> 				this.refreshServerList();
> 			}
> 		}
> 	}
> 
> 	private void refreshServerList()
> 	{
> 		this.mc.displayGuiScreen(new GuiMultiplayer(this.parentScreen));
> 	}
> 
> 	public void confirmClicked(boolean result, int id)
> 	{
> 		GuiListExtended.IGuiListEntry guilistextended$iguilistentry = this.serverListSelector.getSelected() < 0 ? null : this.serverListSelector.getListEntry(this.serverListSelector.getSelected());
> 
> 		if (this.deletingServer)
> 		{
> 			this.deletingServer = false;
> 
> 			if (result && guilistextended$iguilistentry instanceof ServerListEntryNormal)
> 			{
> 				this.savedServerList.removeServerData(this.serverListSelector.getSelected());
> 				this.savedServerList.saveServerList();
> 				this.serverListSelector.setSelectedSlotIndex(-1);
> 				this.serverListSelector.updateOnlineServers(this.savedServerList);
> 			}
> 
> 			this.mc.displayGuiScreen(this);
> 		}
> 		else if (this.directConnect)
> 		{
> 			this.directConnect = false;
> 
> 			if (result)
> 			{
> 				this.connectToServer(this.selectedServer);
> 			}
> 			else
> 			{
> 				this.mc.displayGuiScreen(this);
> 			}
> 		}
> 		else if (this.addingServer)
> 		{
> 			this.addingServer = false;
> 
> 			if (result)
> 			{
> 				this.savedServerList.addServerData(this.selectedServer);
> 				this.savedServerList.saveServerList();
> 				this.serverListSelector.setSelectedSlotIndex(-1);
> 				this.serverListSelector.updateOnlineServers(this.savedServerList);
> 			}
> 
> 			this.mc.displayGuiScreen(this);
> 		}
> 		else if (this.editingServer)
> 		{
> 			this.editingServer = false;
> 
> 			if (result && guilistextended$iguilistentry instanceof ServerListEntryNormal)
> 			{
> 				ServerData serverdata = ((ServerListEntryNormal)guilistextended$iguilistentry).getServerData();
> 				serverdata.serverName = this.selectedServer.serverName;
> 				serverdata.serverIP = this.selectedServer.serverIP;
> 				serverdata.copyFrom(this.selectedServer);
> 				this.savedServerList.saveServerList();
> 				this.serverListSelector.updateOnlineServers(this.savedServerList);
> 			}
> 
> 			this.mc.displayGuiScreen(this);
> 		}
> 	}
> 
> 	/**
> 	 * Fired when a key is typed (except F11 which toggles full screen). This is the equivalent of
> 	 * KeyListener.keyTyped(KeyEvent e). Args : character (character on the key), keyCode (lwjgl Keyboard key code)
> 	 */
> 	protected void keyTyped(char typedChar, int keyCode) throws IOException
> 	{
> 		int i = this.serverListSelector.getSelected();
> 		GuiListExtended.IGuiListEntry guilistextended$iguilistentry = i < 0 ? null : this.serverListSelector.getListEntry(i);
> 
> 		if (keyCode == 63)
> 		{
> 			this.refreshServerList();
> 		}
> 		else
> 		{
> 			if (i >= 0)
> 			{
> 				if (keyCode == 200)
> 				{
> 					if (isShiftKeyDown())
> 					{
> 						if (i > 0 && guilistextended$iguilistentry instanceof ServerListEntryNormal)
> 						{
> 							this.savedServerList.swapServers(i, i - 1);
> 							this.selectServer(this.serverListSelector.getSelected() - 1);
> 							this.serverListSelector.scrollBy(-this.serverListSelector.getSlotHeight());
> 							this.serverListSelector.updateOnlineServers(this.savedServerList);
> 						}
> 					}
> 					else if (i > 0)
> 					{
> 						this.selectServer(this.serverListSelector.getSelected() - 1);
> 						this.serverListSelector.scrollBy(-this.serverListSelector.getSlotHeight());
> 
> 						if (this.serverListSelector.getListEntry(this.serverListSelector.getSelected()) instanceof ServerListEntryLanScan)
> 						{
> 							if (this.serverListSelector.getSelected() > 0)
> 							{
> 								this.selectServer(this.serverListSelector.getSize() - 1);
> 								this.serverListSelector.scrollBy(-this.serverListSelector.getSlotHeight());
> 							}
> 							else
> 							{
> 								this.selectServer(-1);
> 							}
> 						}
> 					}
> 					else
> 					{
> 						this.selectServer(-1);
> 					}
> 				}
> 				else if (keyCode == 208)
> 				{
> 					if (isShiftKeyDown())
> 					{
> 						if (i < this.savedServerList.countServers() - 1)
> 						{
> 							this.savedServerList.swapServers(i, i + 1);
> 							this.selectServer(i + 1);
> 							this.serverListSelector.scrollBy(this.serverListSelector.getSlotHeight());
> 							this.serverListSelector.updateOnlineServers(this.savedServerList);
> 						}
> 					}
> 					else if (i < this.serverListSelector.getSize())
> 					{
> 						this.selectServer(this.serverListSelector.getSelected() + 1);
> 						this.serverListSelector.scrollBy(this.serverListSelector.getSlotHeight());
> 
> 						if (this.serverListSelector.getListEntry(this.serverListSelector.getSelected()) instanceof ServerListEntryLanScan)
> 						{
> 							if (this.serverListSelector.getSelected() < this.serverListSelector.getSize() - 1)
> 							{
> 								this.selectServer(this.serverListSelector.getSize() + 1);
> 								this.serverListSelector.scrollBy(this.serverListSelector.getSlotHeight());
> 							}
> 							else
> 							{
> 								this.selectServer(-1);
> 							}
> 						}
> 					}
> 					else
> 					{
> 						this.selectServer(-1);
> 					}
> 				}
> 				else if (keyCode != 28 && keyCode != 156)
> 				{
> 					super.keyTyped(typedChar, keyCode);
> 				}
> 				else
> 				{
> 					this.actionPerformed(this.buttonList.get(2));
> 				}
> 			}
> 			else
> 			{
> 				super.keyTyped(typedChar, keyCode);
> 			}
> 		}
> 	}
> 
> 	/**
> 	 * Draws the screen and all the components in it.
> 	 */
> 	public void drawScreen(int mouseX, int mouseY, float partialTicks)
> 	{
> 		this.hoveringText = null;
> 		this.drawDefaultBackground();
> 		this.serverListSelector.drawScreen(mouseX, mouseY, partialTicks);
> 		this.drawCenteredString(this.fontRendererObj, I18n.format("multiplayer.title"), this.width / 2, 20, 16777215);
> 		super.drawScreen(mouseX, mouseY, partialTicks);
> 
> 		if (this.hoveringText != null)
> 		{
> 			this.drawHoveringText(Lists.newArrayList(Splitter.on("\n").split(this.hoveringText)), mouseX, mouseY);
> 		}
> 	}
> 
> 	public void connectToSelected()
> 	{
> 		GuiListExtended.IGuiListEntry guilistextended$iguilistentry = this.serverListSelector.getSelected() < 0 ? null : this.serverListSelector.getListEntry(this.serverListSelector.getSelected());
> 
> 		if (guilistextended$iguilistentry instanceof ServerListEntryNormal)
> 		{
> 			this.connectToServer(((ServerListEntryNormal)guilistextended$iguilistentry).getServerData());
> 		}
> 		else if (guilistextended$iguilistentry instanceof ServerListEntryLanDetected)
> 		{
> 			LanServerInfo lanserverinfo = ((ServerListEntryLanDetected)guilistextended$iguilistentry).getServerData();
> 			this.connectToServer(new ServerData(lanserverinfo.getServerMotd(), lanserverinfo.getServerIpPort(), true));
> 		}
> 	}
> 
> 	private void connectToServer(ServerData server)
> 	{
> 		this.mc.displayGuiScreen(new GuiConnecting(this, this.mc, server));
> 	}
> 
> 	public void selectServer(int index)
> 	{
> 		this.serverListSelector.setSelectedSlotIndex(index);
> 		GuiListExtended.IGuiListEntry guilistextended$iguilistentry = index < 0 ? null : this.serverListSelector.getListEntry(index);
> 		this.btnSelectServer.enabled = false;
> 		this.btnEditServer.enabled = false;
> 		this.btnDeleteServer.enabled = false;
> 
> 		if (guilistextended$iguilistentry != null && !(guilistextended$iguilistentry instanceof ServerListEntryLanScan))
> 		{
> 			this.btnSelectServer.enabled = true;
> 
> 			if (guilistextended$iguilistentry instanceof ServerListEntryNormal)
> 			{
> 				this.btnEditServer.enabled = true;
> 				this.btnDeleteServer.enabled = true;
> 			}
> 
> 			if(savedServerList.getServerData(index) instanceof ServerDataFeatured) {
> 				this.btnEditServer.enabled = false;
> 				this.btnDeleteServer.enabled = false;
> 			}
> 		}
> 	}
> 
> 	public ServerPinger getOldServerPinger()
> 	{
> 		return this.oldServerPinger;
> 	}
> 
> 	public void setHoveringText(String p_146793_1_)
> 	{
> 		this.hoveringText = p_146793_1_;
> 	}
> 
> 	/**
> 	 * Called when the mouse is clicked. Args : mouseX, mouseY, clickedButton
> 	 */
> 	protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
> 	{
> 		super.mouseClicked(mouseX, mouseY, mouseButton);
> 		this.serverListSelector.mouseClicked(mouseX, mouseY, mouseButton);
> 	}
> 
> 	/**
> 	 * Called when a mouse button is released.
> 	 */
> 	protected void mouseReleased(int mouseX, int mouseY, int state)
> 	{
> 		super.mouseReleased(mouseX, mouseY, state);
> 		this.serverListSelector.mouseReleased(mouseX, mouseY, state);
> 	}
> 
> 	public ServerList getServerList()
> 	{
> 		return this.savedServerList;
> 	}
> 
> 	public boolean canMoveUp(ServerListEntryNormal p_175392_1_, int p_175392_2_)
> 	{
> 		return p_175392_2_ > this.savedServerList.getFeaturedServerCount();
> 	}
> 
> 	public boolean canMoveDown(ServerListEntryNormal p_175394_1_, int p_175394_2_)
> 	{
> 		return p_175394_2_ < this.savedServerList.countServers() - 1;
> 	}
> 
> 	public void moveServerUp(ServerListEntryNormal p_175391_1_, int p_175391_2_, boolean p_175391_3_)
> 	{
> 		int i = p_175391_3_ ? 0 : p_175391_2_ - 1;
> 		this.savedServerList.swapServers(p_175391_2_, i);
> 
> 		if (this.serverListSelector.getSelected() == p_175391_2_)
> 		{
> 			this.selectServer(i);
> 		}
> 
> 		this.serverListSelector.updateOnlineServers(this.savedServerList);
> 	}
> 
> 	public void moveServerDown(ServerListEntryNormal p_175393_1_, int p_175393_2_, boolean p_175393_3_)
> 	{
> 		int i = p_175393_3_ ? this.savedServerList.countServers() - 1 : p_175393_2_ + 1;
> 		this.savedServerList.swapServers(p_175393_2_, i);
> 
> 		if (this.serverListSelector.getSelected() == p_175393_2_)
> 		{
> 			this.selectServer(i);
> 		}
491,492c497,498
<         this.serverListSelector.updateOnlineServers(this.savedServerList);
<     }
---
> 		this.serverListSelector.updateOnlineServers(this.savedServerList);
> 	}
Only in src\modified/src/minecraft/net/minecraft/client/gui: GuiOverlayDeb~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiOverlayDebug.java src\modified/src/minecraft/net/minecraft/client/gui/GuiOverlayDebug.java
5a6
> import java.util.Collection;
18d18
< import net.minecraft.util.FrameTimer;
26a27,29
> import optifine.Reflector;
> 
> import org.golde.lttclientmeme.chroma.ColorUtils;
74c77,78
<                 this.fontRenderer.drawString(s, 2, i1, 14737632);
---
>                 ColorUtils.drawChromaString(s, 2, i1);
>                 //this.fontRenderer.drawString(s, 2, i1, 14737632);
94c98,99
<                 this.fontRenderer.drawString(s, l, i1, 14737632);
---
>                // this.fontRenderer.drawString(s, l, i1, 14737632);
>                 ColorUtils.drawChromaString(s, l, i1);
106c111
<             return Lists.newArrayList("Minecraft 1.12 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("Chunk-relative: %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15));
---
>             return Lists.newArrayList("Minecraft 1.12.2 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("Chunk-relative: %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15));
132c137
<             List<String> list = Lists.newArrayList("Minecraft 1.12 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.mc.getVersionType()) ? "" : "/" + this.mc.getVersionType()) + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("XYZ: %.3f / %.5f / %.3f", this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ), String.format("Block: %d %d %d", blockpos.getX(), blockpos.getY(), blockpos.getZ()), String.format("Chunk: %d %d %d in %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15, blockpos.getX() >> 4, blockpos.getY() >> 4, blockpos.getZ() >> 4), String.format("Facing: %s (%s) (%.1f / %.1f)", enumfacing, s, MathHelper.wrapDegrees(entity.rotationYaw), MathHelper.wrapDegrees(entity.rotationPitch)));
---
>             List<String> list = Lists.newArrayList("Minecraft 1.12.2 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.mc.getVersionType()) ? "" : "/" + this.mc.getVersionType()) + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("XYZ: %.3f / %.5f / %.3f", this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ), String.format("Block: %d %d %d", blockpos.getX(), blockpos.getY(), blockpos.getZ()), String.format("Chunk: %d %d %d in %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15, blockpos.getX() >> 4, blockpos.getY() >> 4, blockpos.getZ() >> 4), String.format("Facing: %s (%s) (%.1f / %.1f)", enumfacing, s, MathHelper.wrapDegrees(entity.rotationYaw), MathHelper.wrapDegrees(entity.rotationPitch)));
191a197,203
>         if (Reflector.FMLCommonHandler_getBrandings.exists())
>         {
>             Object object = Reflector.call(Reflector.FMLCommonHandler_instance);
>             list.add("");
>             list.addAll((Collection)Reflector.call(object, Reflector.FMLCommonHandler_getBrandings, false));
>         }
> 
237,271d248
<         GlStateManager.disableDepth();
<         FrameTimer frametimer = this.mc.getFrameTimer();
<         int i = frametimer.getLastIndex();
<         int j = frametimer.getIndex();
<         long[] along = frametimer.getFrames();
<         ScaledResolution scaledresolution = new ScaledResolution(this.mc);
<         int k = i;
<         int l = 0;
<         drawRect(0, scaledresolution.getScaledHeight() - 60, 240, scaledresolution.getScaledHeight(), -1873784752);
< 
<         while (k != j)
<         {
<             int i1 = frametimer.getLagometerValue(along[k], 30);
<             int j1 = this.getFrameColor(MathHelper.clamp(i1, 0, 60), 0, 30, 60);
<             this.drawVerticalLine(l, scaledresolution.getScaledHeight(), scaledresolution.getScaledHeight() - i1, j1);
<             ++l;
<             k = frametimer.parseIndex(k + 1);
<         }
< 
<         drawRect(1, scaledresolution.getScaledHeight() - 30 + 1, 14, scaledresolution.getScaledHeight() - 30 + 10, -1873784752);
<         this.fontRenderer.drawString("60", 2, scaledresolution.getScaledHeight() - 30 + 2, 14737632);
<         this.drawHorizontalLine(0, 239, scaledresolution.getScaledHeight() - 30, -1);
<         drawRect(1, scaledresolution.getScaledHeight() - 60 + 1, 14, scaledresolution.getScaledHeight() - 60 + 10, -1873784752);
<         this.fontRenderer.drawString("30", 2, scaledresolution.getScaledHeight() - 60 + 2, 14737632);
<         this.drawHorizontalLine(0, 239, scaledresolution.getScaledHeight() - 60, -1);
<         this.drawHorizontalLine(0, 239, scaledresolution.getScaledHeight() - 1, -1);
<         this.drawVerticalLine(0, scaledresolution.getScaledHeight() - 60, scaledresolution.getScaledHeight(), -1);
<         this.drawVerticalLine(239, scaledresolution.getScaledHeight() - 60, scaledresolution.getScaledHeight(), -1);
< 
<         if (this.mc.gameSettings.limitFramerate <= 120)
<         {
<             this.drawHorizontalLine(0, 239, scaledresolution.getScaledHeight() - 60 + this.mc.gameSettings.limitFramerate / 2, -16711681);
<         }
< 
<         GlStateManager.enableDepth();
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiScreenOptionsSounds.java src\modified/src/minecraft/net/minecraft/client/gui/GuiScreenOptionsSounds.java
54c54,55
<         this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, I18n.format("gui.done")));
---
>         this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 180, I18n.format("gui.done")));
>         this.buttonList.add(new GuiButton(300, this.width / 2 - 100, this.height / 6 + 156, mc.fontRendererObj.trimStringToWidth("", 200)));
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiSlot.java src\modified/src/minecraft/net/minecraft/client/gui/GuiSlot.java
236,244c236
<             this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
<             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
<             float f = 32.0F;
<             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
<             bufferbuilder.pos((double)this.left, (double)this.bottom, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
<             bufferbuilder.pos((double)this.right, (double)this.bottom, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
<             bufferbuilder.pos((double)this.right, (double)this.top, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
<             bufferbuilder.pos((double)this.left, (double)this.top, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
<             tessellator.draw();
---
>             this.drawContainerBackground(tessellator);
340c332,340
<                 if (this.initialClickY == -1)
---
>                 if (this.initialClickY != -1)
>                 {
>                     if (this.initialClickY >= 0)
>                     {
>                         this.amountScrolled -= (float)(this.mouseY - this.initialClickY) * this.scrollMultiplier;
>                         this.initialClickY = this.mouseY;
>                     }
>                 }
>                 else
400,404d399
<                 else if (this.initialClickY >= 0)
<                 {
<                     this.amountScrolled -= (float)(this.mouseY - this.initialClickY) * this.scrollMultiplier;
<                     this.initialClickY = this.mouseY;
<                 }
482c477,480
<             this.func_192637_a(j, p_192638_1_, k, l, p_192638_3_, p_192638_4_, p_192638_5_);
---
>             if (k >= this.top - this.slotHeight && k <= this.bottom)
>             {
>                 this.func_192637_a(j, p_192638_1_, k, l, p_192638_3_, p_192638_4_, p_192638_5_);
>             }
521a520,533
> 
>     protected void drawContainerBackground(Tessellator p_drawContainerBackground_1_)
>     {
>         BufferBuilder bufferbuilder = p_drawContainerBackground_1_.getBuffer();
>         this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
>         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
>         float f = 32.0F;
>         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
>         bufferbuilder.pos((double)this.left, (double)this.bottom, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
>         bufferbuilder.pos((double)this.right, (double)this.bottom, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
>         bufferbuilder.pos((double)this.right, (double)this.top, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
>         bufferbuilder.pos((double)this.left, (double)this.top, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
>         p_drawContainerBackground_1_.draw();
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiVideoSettings.java src\modified/src/minecraft/net/minecraft/client/gui/GuiVideoSettings.java
4d3
< import net.minecraft.client.renderer.OpenGlHelper;
6a6,17
> import optifine.Config;
> import optifine.GuiAnimationSettingsOF;
> import optifine.GuiDetailSettingsOF;
> import optifine.GuiOptionButtonOF;
> import optifine.GuiOptionSliderOF;
> import optifine.GuiOtherSettingsOF;
> import optifine.GuiPerformanceSettingsOF;
> import optifine.GuiQualitySettingsOF;
> import optifine.GuiScreenOF;
> import optifine.Lang;
> import optifine.TooltipManager;
> import shadersmod.client.GuiShaders;
8c19
< public class GuiVideoSettings extends GuiScreen
---
> public class GuiVideoSettings extends GuiScreenOF
10c21
<     private final GuiScreen parentGuiScreen;
---
>     private GuiScreen parentGuiScreen;
12,16c23,26
<     private final GameSettings guiGameSettings;
<     private GuiListExtended optionsRowList;
< 
<     /** An array of all of GameSettings.Options's video options. */
<     private static final GameSettings.Options[] VIDEO_OPTIONS = new GameSettings.Options[] {GameSettings.Options.GRAPHICS, GameSettings.Options.RENDER_DISTANCE, GameSettings.Options.AMBIENT_OCCLUSION, GameSettings.Options.FRAMERATE_LIMIT, GameSettings.Options.ANAGLYPH, GameSettings.Options.VIEW_BOBBING, GameSettings.Options.GUI_SCALE, GameSettings.Options.ATTACK_INDICATOR, GameSettings.Options.GAMMA, GameSettings.Options.RENDER_CLOUDS, GameSettings.Options.PARTICLES, GameSettings.Options.USE_FULLSCREEN, GameSettings.Options.ENABLE_VSYNC, GameSettings.Options.MIPMAP_LEVELS, GameSettings.Options.USE_VBO, GameSettings.Options.ENTITY_SHADOWS};
---
>     private GameSettings guiGameSettings;
>     private static GameSettings.Options[] videoOptions = new GameSettings.Options[] {GameSettings.Options.GRAPHICS, GameSettings.Options.RENDER_DISTANCE, GameSettings.Options.AMBIENT_OCCLUSION, GameSettings.Options.FRAMERATE_LIMIT, GameSettings.Options.AO_LEVEL, GameSettings.Options.VIEW_BOBBING, GameSettings.Options.GUI_SCALE, GameSettings.Options.USE_VBO, GameSettings.Options.GAMMA, GameSettings.Options.ATTACK_INDICATOR, GameSettings.Options.DYNAMIC_LIGHTS, GameSettings.Options.DYNAMIC_FOV};
>     private static final String __OBFID = "CL_00000718";
>     private TooltipManager tooltipManager = new TooltipManager(this);
32d41
<         this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height - 27, I18n.format("gui.done")));
34,38c43
<         if (OpenGlHelper.vboSupported)
<         {
<             this.optionsRowList = new GuiOptionsRowList(this.mc, this.width, this.height, 32, this.height - 32, 25, VIDEO_OPTIONS);
<         }
<         else
---
>         for (int i = 0; i < videoOptions.length; ++i)
40,41c45
<             GameSettings.Options[] agamesettings$options = new GameSettings.Options[VIDEO_OPTIONS.length - 1];
<             int i = 0;
---
>             GameSettings.Options gamesettings$options = videoOptions[i];
43c47
<             for (GameSettings.Options gamesettings$options : VIDEO_OPTIONS)
---
>             if (gamesettings$options != null)
45c49,52
<                 if (gamesettings$options == GameSettings.Options.USE_VBO)
---
>                 int j = this.width / 2 - 155 + i % 2 * 160;
>                 int k = this.height / 6 + 21 * (i / 2) - 12;
> 
>                 if (gamesettings$options.getEnumFloat())
47c54,58
<                     break;
---
>                     this.buttonList.add(new GuiOptionSliderOF(gamesettings$options.returnEnumOrdinal(), j, k, gamesettings$options));
>                 }
>                 else
>                 {
>                     this.buttonList.add(new GuiOptionButtonOF(gamesettings$options.returnEnumOrdinal(), j, k, gamesettings$options, this.guiGameSettings.getKeyBinding(gamesettings$options)));
49,51d59
< 
<                 agamesettings$options[i] = gamesettings$options;
<                 ++i;
53,54d60
< 
<             this.optionsRowList = new GuiOptionsRowList(this.mc, this.width, this.height, 32, this.height - 32, 25, agamesettings$options);
55a62,80
> 
>         int l = this.height / 6 + 21 * (videoOptions.length / 2) - 12;
>         int i1 = 0;
>         i1 = this.width / 2 - 155 + 0;
>         this.buttonList.add(new GuiOptionButton(231, i1, l, Lang.get("of.options.shaders")));
>         i1 = this.width / 2 - 155 + 160;
>         this.buttonList.add(new GuiOptionButton(202, i1, l, Lang.get("of.options.quality")));
>         l = l + 21;
>         i1 = this.width / 2 - 155 + 0;
>         this.buttonList.add(new GuiOptionButton(201, i1, l, Lang.get("of.options.details")));
>         i1 = this.width / 2 - 155 + 160;
>         this.buttonList.add(new GuiOptionButton(212, i1, l, Lang.get("of.options.performance")));
>         l = l + 21;
>         i1 = this.width / 2 - 155 + 0;
>         this.buttonList.add(new GuiOptionButton(211, i1, l, Lang.get("of.options.animations")));
>         i1 = this.width / 2 - 155 + 160;
>         this.buttonList.add(new GuiOptionButton(222, i1, l, Lang.get("of.options.other")));
>         l = l + 21;
>         this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168 + 11, I18n.format("gui.done")));
59c84
<      * Handles mouse input.
---
>      * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
61c86
<     public void handleMouseInput() throws IOException
---
>     protected void actionPerformed(GuiButton button) throws IOException
63,64c88
<         super.handleMouseInput();
<         this.optionsRowList.handleMouseInput();
---
>         this.actionPerformed(button, 1);
67,71c91
<     /**
<      * Fired when a key is typed (except F11 which toggles full screen). This is the equivalent of
<      * KeyListener.keyTyped(KeyEvent e). Args : character (character on the key), keyCode (lwjgl Keyboard key code)
<      */
<     protected void keyTyped(char typedChar, int keyCode) throws IOException
---
>     protected void actionPerformedRightClick(GuiButton p_actionPerformedRightClick_1_)
73c93
<         if (keyCode == 1)
---
>         if (p_actionPerformedRightClick_1_.id == GameSettings.Options.GUI_SCALE.ordinal())
75c95
<             this.mc.gameSettings.saveOptions();
---
>             this.actionPerformed(p_actionPerformedRightClick_1_, -1);
77,78d96
< 
<         super.keyTyped(typedChar, keyCode);
81,84c99
<     /**
<      * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
<      */
<     protected void actionPerformed(GuiButton button) throws IOException
---
>     private void actionPerformed(GuiButton p_actionPerformed_1_, int p_actionPerformed_2_)
86c101
<         if (button.enabled)
---
>         if (p_actionPerformed_1_.enabled)
88c103,111
<             if (button.id == 200)
---
>             int i = this.guiGameSettings.guiScale;
> 
>             if (p_actionPerformed_1_.id < 200 && p_actionPerformed_1_ instanceof GuiOptionButton)
>             {
>                 this.guiGameSettings.setOptionValue(((GuiOptionButton)p_actionPerformed_1_).returnEnumOptions(), p_actionPerformed_2_);
>                 p_actionPerformed_1_.displayString = this.guiGameSettings.getKeyBinding(GameSettings.Options.getEnumOptions(p_actionPerformed_1_.id));
>             }
> 
>             if (p_actionPerformed_1_.id == 200)
92a116,189
> 
>             if (this.guiGameSettings.guiScale != i)
>             {
>                 ScaledResolution scaledresolution = new ScaledResolution(this.mc);
>                 int j = scaledresolution.getScaledWidth();
>                 int k = scaledresolution.getScaledHeight();
>                 this.setWorldAndResolution(this.mc, j, k);
>             }
> 
>             if (p_actionPerformed_1_.id == 201)
>             {
>                 this.mc.gameSettings.saveOptions();
>                 GuiDetailSettingsOF guidetailsettingsof = new GuiDetailSettingsOF(this, this.guiGameSettings);
>                 this.mc.displayGuiScreen(guidetailsettingsof);
>             }
> 
>             if (p_actionPerformed_1_.id == 202)
>             {
>                 this.mc.gameSettings.saveOptions();
>                 GuiQualitySettingsOF guiqualitysettingsof = new GuiQualitySettingsOF(this, this.guiGameSettings);
>                 this.mc.displayGuiScreen(guiqualitysettingsof);
>             }
> 
>             if (p_actionPerformed_1_.id == 211)
>             {
>                 this.mc.gameSettings.saveOptions();
>                 GuiAnimationSettingsOF guianimationsettingsof = new GuiAnimationSettingsOF(this, this.guiGameSettings);
>                 this.mc.displayGuiScreen(guianimationsettingsof);
>             }
> 
>             if (p_actionPerformed_1_.id == 212)
>             {
>                 this.mc.gameSettings.saveOptions();
>                 GuiPerformanceSettingsOF guiperformancesettingsof = new GuiPerformanceSettingsOF(this, this.guiGameSettings);
>                 this.mc.displayGuiScreen(guiperformancesettingsof);
>             }
> 
>             if (p_actionPerformed_1_.id == 222)
>             {
>                 this.mc.gameSettings.saveOptions();
>                 GuiOtherSettingsOF guiothersettingsof = new GuiOtherSettingsOF(this, this.guiGameSettings);
>                 this.mc.displayGuiScreen(guiothersettingsof);
>             }
> 
>             if (p_actionPerformed_1_.id == 231)
>             {
>                 if (Config.isAntialiasing() || Config.isAntialiasingConfigured())
>                 {
>                     Config.showGuiMessage(Lang.get("of.message.shaders.aa1"), Lang.get("of.message.shaders.aa2"));
>                     return;
>                 }
> 
>                 if (Config.isAnisotropicFiltering())
>                 {
>                     Config.showGuiMessage(Lang.get("of.message.shaders.af1"), Lang.get("of.message.shaders.af2"));
>                     return;
>                 }
> 
>                 if (Config.isFastRender())
>                 {
>                     Config.showGuiMessage(Lang.get("of.message.shaders.fr1"), Lang.get("of.message.shaders.fr2"));
>                     return;
>                 }
> 
>                 if (Config.getGameSettings().anaglyph)
>                 {
>                     Config.showGuiMessage(Lang.get("of.message.shaders.an1"), Lang.get("of.message.shaders.an2"));
>                     return;
>                 }
> 
>                 this.mc.gameSettings.saveOptions();
>                 GuiShaders guishaders = new GuiShaders(this, this.guiGameSettings);
>                 this.mc.displayGuiScreen(guishaders);
>             }
97c194
<      * Called when the mouse is clicked. Args : mouseX, mouseY, clickedButton
---
>      * Draws the screen and all the components in it.
99c196
<     protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
---
>     public void drawScreen(int mouseX, int mouseY, float partialTicks)
101,110c198,210
<         int i = this.guiGameSettings.guiScale;
<         super.mouseClicked(mouseX, mouseY, mouseButton);
<         this.optionsRowList.mouseClicked(mouseX, mouseY, mouseButton);
< 
<         if (this.guiGameSettings.guiScale != i)
<         {
<             ScaledResolution scaledresolution = new ScaledResolution(this.mc);
<             int j = scaledresolution.getScaledWidth();
<             int k = scaledresolution.getScaledHeight();
<             this.setWorldAndResolution(this.mc, j, k);
---
>         this.drawDefaultBackground();
>         this.drawCenteredString(this.fontRendererObj, this.screenTitle, this.width / 2, 15, 16777215);
>         String s = Config.getVersion();
>         String s1 = "HD_U";
> 
>         if (s1.equals("HD"))
>         {
>             s = "OptiFine HD C6";
>         }
> 
>         if (s1.equals("HD_U"))
>         {
>             s = "OptiFine HD C6 Ultra";
111a212,223
> 
>         if (s1.equals("L"))
>         {
>             s = "OptiFine C6 Light";
>         }
> 
>         this.drawString(this.fontRendererObj, s, 2, this.height - 10, 8421504);
>         String s2 = "Minecraft 1.12.2";
>         int i = this.fontRendererObj.getStringWidth(s2);
>         this.drawString(this.fontRendererObj, s2, this.width - i - 2, this.height - 10, 8421504);
>         super.drawScreen(mouseX, mouseY, partialTicks);
>         this.tooltipManager.drawTooltips(mouseX, mouseY, this.buttonList);
114,117c226
<     /**
<      * Called when a mouse button is released.
<      */
<     protected void mouseReleased(int mouseX, int mouseY, int state)
---
>     public static int getButtonWidth(GuiButton p_getButtonWidth_0_)
119,129c228
<         int i = this.guiGameSettings.guiScale;
<         super.mouseReleased(mouseX, mouseY, state);
<         this.optionsRowList.mouseReleased(mouseX, mouseY, state);
< 
<         if (this.guiGameSettings.guiScale != i)
<         {
<             ScaledResolution scaledresolution = new ScaledResolution(this.mc);
<             int j = scaledresolution.getScaledWidth();
<             int k = scaledresolution.getScaledHeight();
<             this.setWorldAndResolution(this.mc, j, k);
<         }
---
>         return p_getButtonWidth_0_.width;
132,135c231
<     /**
<      * Draws the screen and all the components in it.
<      */
<     public void drawScreen(int mouseX, int mouseY, float partialTicks)
---
>     public static int getButtonHeight(GuiButton p_getButtonHeight_0_)
137,140c233,238
<         this.drawDefaultBackground();
<         this.optionsRowList.drawScreen(mouseX, mouseY, partialTicks);
<         this.drawCenteredString(this.fontRendererObj, this.screenTitle, this.width / 2, 5, 16777215);
<         super.drawScreen(mouseX, mouseY, partialTicks);
---
>         return p_getButtonHeight_0_.height;
>     }
> 
>     public static void drawGradientRect(GuiScreen p_drawGradientRect_0_, int p_drawGradientRect_1_, int p_drawGradientRect_2_, int p_drawGradientRect_3_, int p_drawGradientRect_4_, int p_drawGradientRect_5_, int p_drawGradientRect_6_)
>     {
>         p_drawGradientRect_0_.drawGradientRect(p_drawGradientRect_1_, p_drawGradientRect_2_, p_drawGradientRect_3_, p_drawGradientRect_4_, p_drawGradientRect_5_, p_drawGradientRect_6_);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/GuiWinGame.java src\modified/src/minecraft/net/minecraft/client/gui/GuiWinGame.java
26a27
>     private static final ResourceLocation field_194401_g = new ResourceLocation("textures/gui/title/edition.png");
33c34
<     private final float scrollSpeed = 0.5F;
---
>     private float scrollSpeed = 0.5F;
38a40,44
> 
>         if (!p_i47590_1_)
>         {
>             this.scrollSpeed = 0.75F;
>         }
48c54
<         float f = (float)(this.totalScrollLength + this.height + this.height + 24) / 0.5F;
---
>         float f = (float)(this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
163,164c169,170
<         float f = -this.time * 0.5F * 0.5F;
<         float f1 = (float)this.height - this.time * 0.5F * 0.5F;
---
>         float f = -this.time * 0.5F * this.scrollSpeed;
>         float f1 = (float)this.height - this.time * 0.5F * this.scrollSpeed;
167c173
<         float f4 = (float)(this.totalScrollLength + this.height + this.height + 24) / 0.5F;
---
>         float f4 = (float)(this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
201c207
<         float f = -this.time * 0.5F;
---
>         float f = -this.time * this.scrollSpeed;
208a215,216
>         this.mc.getTextureManager().bindTexture(field_194401_g);
>         drawModalRectWithCustomSizedTexture(j + 88, k + 37, 0.0F, 0.0F, 98, 14, 128.0F, 16.0F);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/inventory/GuiBeacon.java src\modified/src/minecraft/net/minecraft/client/gui/inventory/GuiBeacon.java
24a25
> import org.golde.lttclientmeme.chroma.ColorUtils;
194,195c195,198
<         this.drawCenteredString(this.fontRendererObj, I18n.format("tile.beacon.primary"), 62, 10, 14737632);
<         this.drawCenteredString(this.fontRendererObj, I18n.format("tile.beacon.secondary"), 169, 10, 14737632);
---
>         ColorUtils.drawChromaString(I18n.format("tile.beacon.primary"), 26, 10);
>         //this.drawCenteredString(this.fontRendererObj, I18n.format("tile.beacon.primary"), 62, 10, 14737632);
>         ColorUtils.drawChromaString(I18n.format("tile.beacon.secondary"), 125, 10);
>         //this.drawCenteredString(this.fontRendererObj, I18n.format("tile.beacon.secondary"), 169, 10, 14737632);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/inventory/GuiBrewingStand.java src\modified/src/minecraft/net/minecraft/client/gui/inventory/GuiBrewingStand.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
42,43c44,47
<         this.fontRendererObj.drawString(s, this.xSize / 2 - this.fontRendererObj.getStringWidth(s) / 2, 6, 4210752);
<         this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
---
>         ColorUtils.drawChromaString(s, this.xSize / 2 - this.fontRendererObj.getStringWidth(s) / 2, 6);
>         //this.fontRendererObj.drawString(s, this.xSize / 2 - this.fontRendererObj.getStringWidth(s) / 2, 6, 4210752);
>         ColorUtils.drawChromaString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2);
>         //this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/inventory/GuiChest.java src\modified/src/minecraft/net/minecraft/client/gui/inventory/GuiChest.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
48,49c50,54
<         this.fontRendererObj.drawString(this.lowerChestInventory.getDisplayName().getUnformattedText(), 8, 6, 4210752);
<         this.fontRendererObj.drawString(this.upperChestInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
---
>     	ColorUtils.drawChromaString(this.lowerChestInventory.getDisplayName().getUnformattedText(), 8, 6);
>         //this.fontRendererObj.drawString(this.lowerChestInventory.getDisplayName().getUnformattedText(), 8, 6, 4210752);
>     	
>     	ColorUtils.drawChromaString(this.upperChestInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2);
>         //this.fontRendererObj.drawString(this.upperChestInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/inventory/GuiContainerCreative.java src\modified/src/minecraft/net/minecraft/client/gui/inventory/GuiContainerCreative.java
40a41,42
> 
> import org.golde.lttclientmeme.chroma.ColorUtils;
400c402,403
<             this.fontRendererObj.drawString(I18n.format(creativetabs.getTranslatedTabLabel()), 8, 6, 4210752);
---
>             ColorUtils.drawChromaString(I18n.format(creativetabs.getTranslatedTabLabel()), 8, 6);
>             //this.fontRendererObj.drawString(I18n.format(creativetabs.getTranslatedTabLabel()), 8, 6, 4210752);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/inventory/GuiCrafting.java src\modified/src/minecraft/net/minecraft/client/gui/inventory/GuiCrafting.java
3a4,6
> 
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
44c47
<         this.field_192050_x.func_191856_a(this.width, this.height, this.mc, this.field_193112_y, this.inventorySlots, ((ContainerWorkbench)this.inventorySlots).craftMatrix);
---
>         this.field_192050_x.func_194303_a(this.width, this.height, this.mc, this.field_193112_y, ((ContainerWorkbench)this.inventorySlots).craftMatrix);
87,88c90,94
<         this.fontRendererObj.drawString(I18n.format("container.crafting"), 28, 6, 4210752);
<         this.fontRendererObj.drawString(I18n.format("container.inventory"), 8, this.ySize - 96 + 2, 4210752);
---
>     	ColorUtils.drawChromaString(I18n.format("container.crafting"), 28, 6);
>         //this.fontRendererObj.drawString(I18n.format("container.crafting"), 28, 6, 4210752);
>     	
>     	ColorUtils.drawChromaString(I18n.format("container.inventory"), 8, this.ySize - 96 + 2);
>         //this.fontRendererObj.drawString(I18n.format("container.inventory"), 8, this.ySize - 96 + 2, 4210752);
179a186,190
> 
>     public GuiRecipeBook func_194310_f()
>     {
>         return this.field_192050_x;
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/inventory/GuiDispenser.java src\modified/src/minecraft/net/minecraft/client/gui/inventory/GuiDispenser.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
42,43c44,47
<         this.fontRendererObj.drawString(s, this.xSize / 2 - this.fontRendererObj.getStringWidth(s) / 2, 6, 4210752);
<         this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
---
>         ColorUtils.drawChromaString(s, this.xSize / 2 - this.fontRendererObj.getStringWidth(s) / 2, 6);
>         //this.fontRendererObj.drawString(s, this.xSize / 2 - this.fontRendererObj.getStringWidth(s) / 2, 6, 4210752);
>         ColorUtils.drawChromaString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2);
>         //this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/inventory/GuiFurnace.java src\modified/src/minecraft/net/minecraft/client/gui/inventory/GuiFurnace.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
41,42c43,47
<         this.fontRendererObj.drawString(s, this.xSize / 2 - this.fontRendererObj.getStringWidth(s) / 2, 6, 4210752);
<         this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
---
>         ColorUtils.drawChromaString(s, this.xSize / 2 - this.fontRendererObj.getStringWidth(s) / 2, 6);
>         //this.fontRendererObj.drawString(s, this.xSize / 2 - this.fontRendererObj.getStringWidth(s) / 2, 6, 4210752);
>         
>         ColorUtils.drawChromaString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2);
>         //this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/inventory/GuiInventory.java src\modified/src/minecraft/net/minecraft/client/gui/inventory/GuiInventory.java
70c70
<         this.field_192045_A.func_191856_a(this.width, this.height, this.mc, this.field_192046_B, this.inventorySlots, ((ContainerPlayer)this.inventorySlots).craftMatrix);
---
>         this.field_192045_A.func_194303_a(this.width, this.height, this.mc, this.field_192046_B, ((ContainerPlayer)this.inventorySlots).craftMatrix);
258a259,263
> 
>     public GuiRecipeBook func_194310_f()
>     {
>         return this.field_192045_A;
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/inventory/GuiShulkerBox.java src\modified/src/minecraft/net/minecraft/client/gui/inventory/GuiShulkerBox.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
39,40c41,45
<         this.fontRendererObj.drawString(this.field_190779_v.getDisplayName().getUnformattedText(), 8, 6, 4210752);
<         this.fontRendererObj.drawString(this.field_190780_w.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
---
>     	ColorUtils.drawChromaString(this.field_190779_v.getDisplayName().getUnformattedText(), 8, 6);
>         //this.fontRendererObj.drawString(this.field_190779_v.getDisplayName().getUnformattedText(), 8, 6, 4210752);
>     	
>     	ColorUtils.drawChromaString(this.field_190780_w.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2);
>         //this.fontRendererObj.drawString(this.field_190780_w.getDisplayName().getUnformattedText(), 8, this.ySize - 96 + 2, 4210752);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/recipebook/GuiRecipeBook.java src\modified/src/minecraft/net/minecraft/client/gui/recipebook/GuiRecipeBook.java
4,6d3
< import it.unimi.dsi.fastutil.ints.IntArrayList;
< import it.unimi.dsi.fastutil.ints.IntList;
< import it.unimi.dsi.fastutil.ints.IntListIterator;
30,34d26
< import net.minecraft.entity.player.InventoryPlayer;
< import net.minecraft.inventory.Container;
< import net.minecraft.inventory.ContainerPlayer;
< import net.minecraft.inventory.ContainerWorkbench;
< import net.minecraft.inventory.InventoryCraftResult;
42d33
< import net.minecraft.network.play.client.CPacketRecipePlacement;
45,46d35
< import org.apache.logging.log4j.LogManager;
< import org.apache.logging.log4j.Logger;
55d43
<     private static final Logger field_193959_i = LogManager.getLogger();
60d47
<     private Container field_191908_s;
70c57
<     public void func_191856_a(int p_191856_1_, int p_191856_2_, Minecraft p_191856_3_, boolean p_191856_4_, Container p_191856_5_, InventoryCrafting p_191856_6_)
---
>     public void func_194303_a(int p_194303_1_, int p_194303_2_, Minecraft p_194303_3_, boolean p_194303_4_, InventoryCrafting p_194303_5_)
72,78c59,64
<         this.field_191888_F = p_191856_3_;
<         this.field_191904_o = p_191856_1_;
<         this.field_191905_p = p_191856_2_;
<         this.field_191908_s = p_191856_5_;
<         this.field_193961_o = p_191856_6_;
<         this.field_193964_s = p_191856_3_.player.func_192035_E();
<         this.field_193966_v = p_191856_3_.player.inventory.func_194015_p();
---
>         this.field_191888_F = p_194303_3_;
>         this.field_191904_o = p_194303_1_;
>         this.field_191905_p = p_194303_2_;
>         this.field_193961_o = p_194303_5_;
>         this.field_193964_s = p_194303_3_.player.func_192035_E();
>         this.field_193966_v = p_194303_3_.player.inventory.func_194015_p();
84c70
<             this.func_193014_a(p_191856_4_, p_191856_6_);
---
>             this.func_193014_a(p_194303_4_, p_194303_5_);
334c320,326
<                     this.func_193945_a(irecipe, recipelist);
---
>                     if (!recipelist.func_194213_a(irecipe) && this.field_191915_z.func_192686_c() == irecipe)
>                     {
>                         return false;
>                     }
> 
>                     this.field_191915_z.func_192682_a();
>                     this.field_191888_F.playerController.func_194338_a(this.field_191888_F.player.openContainer.windowId, irecipe, GuiScreen.isShiftKeyDown(), this.field_191888_F.player);
486,798c478
<     private void func_193945_a(IRecipe p_193945_1_, RecipeList p_193945_2_)
<     {
<         boolean flag = p_193945_2_.func_194213_a(p_193945_1_);
<         InventoryCraftResult inventorycraftresult = null;
< 
<         if (this.field_191908_s instanceof ContainerWorkbench)
<         {
<             inventorycraftresult = ((ContainerWorkbench)this.field_191908_s).craftResult;
<         }
<         else if (this.field_191908_s instanceof ContainerPlayer)
<         {
<             inventorycraftresult = ((ContainerPlayer)this.field_191908_s).craftResult;
<         }
< 
<         if (inventorycraftresult != null)
<         {
<             if (!flag && this.field_191915_z.func_192686_c() == p_193945_1_)
<             {
<                 return;
<             }
< 
<             if (!this.func_193941_i() && !this.field_191888_F.player.isCreative())
<             {
<                 return;
<             }
< 
<             if (flag)
<             {
<                 this.func_193950_a(p_193945_1_, this.field_191908_s.inventorySlots, this.field_191908_s.windowId, inventorycraftresult);
<             }
<             else
<             {
<                 List<CPacketRecipePlacement.ItemMove> list2 = this.func_193954_a(inventorycraftresult);
<                 this.func_193951_a(p_193945_1_, this.field_191908_s.inventorySlots);
< 
<                 if (!list2.isEmpty())
<                 {
<                     this.field_191888_F.playerController.func_192831_a(this.field_191908_s.windowId, list2, Lists.newArrayList(), this.field_191888_F.player);
< 
<                     if (this.field_193964_s.func_192815_c())
<                     {
<                         this.field_191888_F.player.inventory.markDirty();
<                     }
<                 }
<             }
< 
<             if (!this.func_191880_f())
<             {
<                 this.func_191866_a();
<             }
<         }
<     }
< 
<     private void func_193950_a(IRecipe p_193950_1_, List<Slot> p_193950_2_, int p_193950_3_, InventoryCraftResult p_193950_4_)
<     {
<         boolean flag = p_193950_1_.matches(this.field_193961_o, this.field_191888_F.world);
<         int i = this.field_193965_u.func_194114_b(p_193950_1_, (IntList)null);
< 
<         if (flag)
<         {
<             boolean flag1 = true;
< 
<             for (int j = 0; j < this.field_193961_o.getSizeInventory(); ++j)
<             {
<                 ItemStack itemstack = this.field_193961_o.getStackInSlot(j);
< 
<                 if (!itemstack.func_190926_b() && i > itemstack.func_190916_E())
<                 {
<                     flag1 = false;
<                 }
<             }
< 
<             if (flag1)
<             {
<                 return;
<             }
<         }
< 
<         int i1 = this.func_193943_a(i, flag);
<         IntList intlist = new IntArrayList();
< 
<         if (this.field_193965_u.func_194118_a(p_193950_1_, intlist, i1))
<         {
<             int j1 = i1;
<             IntListIterator lvt_10_1_ = intlist.iterator();
< 
<             while (lvt_10_1_.hasNext())
<             {
<                 int k = ((Integer)lvt_10_1_.next()).intValue();
<                 int l = RecipeItemHelper.func_194115_b(k).getMaxStackSize();
< 
<                 if (l < j1)
<                 {
<                     j1 = l;
<                 }
<             }
< 
<             if (this.field_193965_u.func_194118_a(p_193950_1_, intlist, j1))
<             {
<                 List<CPacketRecipePlacement.ItemMove> list2 = this.func_193954_a(p_193950_4_);
<                 List<CPacketRecipePlacement.ItemMove> list3 = Lists.<CPacketRecipePlacement.ItemMove>newArrayList();
<                 this.func_193013_a(p_193950_1_, p_193950_2_, j1, intlist, list3);
<                 this.field_191888_F.playerController.func_192831_a(p_193950_3_, list2, list3, this.field_191888_F.player);
<                 this.field_191888_F.player.inventory.markDirty();
<             }
<         }
<     }
< 
<     private List<CPacketRecipePlacement.ItemMove> func_193954_a(InventoryCraftResult p_193954_1_)
<     {
<         this.field_191915_z.func_192682_a();
<         InventoryPlayer inventoryplayer = this.field_191888_F.player.inventory;
<         List<CPacketRecipePlacement.ItemMove> list2 = Lists.<CPacketRecipePlacement.ItemMove>newArrayList();
< 
<         for (int i = 0; i < this.field_193961_o.getSizeInventory(); ++i)
<         {
<             ItemStack itemstack = this.field_193961_o.getStackInSlot(i);
< 
<             if (!itemstack.func_190926_b())
<             {
<                 while (itemstack.func_190916_E() > 0)
<                 {
<                     int j = inventoryplayer.storeItemStack(itemstack);
< 
<                     if (j == -1)
<                     {
<                         j = inventoryplayer.getFirstEmptyStack();
<                     }
< 
<                     ItemStack itemstack1 = itemstack.copy();
<                     itemstack1.func_190920_e(1);
< 
<                     if (inventoryplayer.func_191971_c(j, itemstack1))
<                     {
<                         itemstack1.func_190917_f(1);
<                     }
<                     else
<                     {
<                         field_193959_i.error("Can't find any space for item in inventory");
<                     }
< 
<                     this.field_193961_o.decrStackSize(i, 1);
<                     int k = i + 1;
<                     list2.add(new CPacketRecipePlacement.ItemMove(itemstack1.copy(), k, j));
<                 }
<             }
<         }
< 
<         this.field_193961_o.clear();
<         p_193954_1_.clear();
<         return list2;
<     }
< 
<     private int func_193943_a(int p_193943_1_, boolean p_193943_2_)
<     {
<         int i = 1;
< 
<         if (GuiScreen.isShiftKeyDown())
<         {
<             i = p_193943_1_;
<         }
<         else if (p_193943_2_)
<         {
<             i = 64;
< 
<             for (int j = 0; j < this.field_193961_o.getSizeInventory(); ++j)
<             {
<                 ItemStack itemstack = this.field_193961_o.getStackInSlot(j);
< 
<                 if (!itemstack.func_190926_b() && i > itemstack.func_190916_E())
<                 {
<                     i = itemstack.func_190916_E();
<                 }
<             }
< 
<             if (i < 64)
<             {
<                 ++i;
<             }
<         }
< 
<         return i;
<     }
< 
<     private void func_193013_a(IRecipe p_193013_1_, List<Slot> p_193013_2_, int p_193013_3_, IntList p_193013_4_, List<CPacketRecipePlacement.ItemMove> p_193013_5_)
<     {
<         int i = this.field_193961_o.getWidth();
<         int j = this.field_193961_o.getHeight();
< 
<         if (p_193013_1_ instanceof ShapedRecipes)
<         {
<             ShapedRecipes shapedrecipes = (ShapedRecipes)p_193013_1_;
<             i = shapedrecipes.func_192403_f();
<             j = shapedrecipes.func_192404_g();
<         }
< 
<         int j1 = 1;
<         Iterator<Integer> iterator = p_193013_4_.iterator();
< 
<         for (int k = 0; k < this.field_193961_o.getWidth() && j != k; ++k)
<         {
<             for (int l = 0; l < this.field_193961_o.getHeight(); ++l)
<             {
<                 if (i == l || !iterator.hasNext())
<                 {
<                     j1 += this.field_193961_o.getWidth() - l;
<                     break;
<                 }
< 
<                 Slot slot = p_193013_2_.get(j1);
<                 ItemStack itemstack = RecipeItemHelper.func_194115_b(((Integer)iterator.next()).intValue());
< 
<                 if (itemstack.func_190926_b())
<                 {
<                     ++j1;
<                 }
<                 else
<                 {
<                     for (int i1 = 0; i1 < p_193013_3_; ++i1)
<                     {
<                         CPacketRecipePlacement.ItemMove cpacketrecipeplacement$itemmove = this.func_193946_a(j1, slot, itemstack);
< 
<                         if (cpacketrecipeplacement$itemmove != null)
<                         {
<                             p_193013_5_.add(cpacketrecipeplacement$itemmove);
<                         }
<                     }
< 
<                     ++j1;
<                 }
<             }
< 
<             if (!iterator.hasNext())
<             {
<                 break;
<             }
<         }
<     }
< 
<     @Nullable
<     private CPacketRecipePlacement.ItemMove func_193946_a(int p_193946_1_, Slot p_193946_2_, ItemStack p_193946_3_)
<     {
<         InventoryPlayer inventoryplayer = this.field_191888_F.player.inventory;
<         int i = inventoryplayer.func_194014_c(p_193946_3_);
< 
<         if (i == -1)
<         {
<             return null;
<         }
<         else
<         {
<             ItemStack itemstack = inventoryplayer.getStackInSlot(i).copy();
< 
<             if (itemstack.func_190926_b())
<             {
<                 field_193959_i.error("Matched: " + p_193946_3_.getUnlocalizedName() + " with empty item.");
<                 return null;
<             }
<             else
<             {
<                 if (itemstack.func_190916_E() > 1)
<                 {
<                     inventoryplayer.decrStackSize(i, 1);
<                 }
<                 else
<                 {
<                     inventoryplayer.removeStackFromSlot(i);
<                 }
< 
<                 itemstack.func_190920_e(1);
< 
<                 if (p_193946_2_.getStack().func_190926_b())
<                 {
<                     p_193946_2_.putStack(itemstack);
<                 }
<                 else
<                 {
<                     p_193946_2_.getStack().func_190917_f(1);
<                 }
< 
<                 return new CPacketRecipePlacement.ItemMove(itemstack, p_193946_1_, i);
<             }
<         }
<     }
< 
<     private boolean func_193941_i()
<     {
<         InventoryPlayer inventoryplayer = this.field_191888_F.player.inventory;
< 
<         for (int i = 0; i < this.field_193961_o.getSizeInventory(); ++i)
<         {
<             ItemStack itemstack = this.field_193961_o.getStackInSlot(i);
< 
<             if (!itemstack.func_190926_b())
<             {
<                 int j = inventoryplayer.storeItemStack(itemstack);
< 
<                 if (j == -1)
<                 {
<                     j = inventoryplayer.getFirstEmptyStack();
<                 }
< 
<                 if (j == -1)
<                 {
<                     return false;
<                 }
<             }
<         }
< 
<         return true;
<     }
< 
<     private void func_193951_a(IRecipe p_193951_1_, List<Slot> p_193951_2_)
---
>     public void func_193951_a(IRecipe p_193951_1_, List<Slot> p_193951_2_)
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/recipebook/IRecipeShownListener.java src\modified/src/minecraft/net/minecraft/client/gui/recipebook/IRecipeShownListener.java
5a6,7
> 
>     GuiRecipeBook func_194310_f();
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/gui/ServerListEntryNormal.java src\modified/src/minecraft/net/minecraft/client/gui/ServerListEntryNormal.java
79,80c79,80
<         boolean flag = this.server.version > 335;
<         boolean flag1 = this.server.version < 335;
---
>         boolean flag = this.server.version > 340;
>         boolean flag1 = this.server.version < 340;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/Minecraft.java src\modified/src/minecraft/net/minecraft/client/Minecraft.java
208a209,211
> import org.golde.lttclientmeme.LTTClient;
> import org.golde.lttclientmeme.event.events.ClientTickEvent;
> import org.golde.lttclientmeme.event.events.KeyboardPressEvent;
520a524
>     	LTTClient.getInstance().init();
635a640
>         LTTClient.getInstance().start();
687c692
<         Display.setTitle("Minecraft 1.12");
---
>         Display.setTitle("LTTClient v" + LTTClient.getInstance().getVersion() + " | Minecraft 1.12.2");
1132a1138
>             LTTClient.getInstance().shutdown();
2012a2019
>         new ClientTickEvent().call();
2022a2030,2037
>             if(Keyboard.getEventKeyState()) {
> 	            KeyboardPressEvent event = new KeyboardPressEvent(i);
> 	            event.call();
> 	            if(event.isCancelled()) {
> 	            	return;
> 	            }
>             }
>             
2511c2526
<         networkmanager.sendPacket(new C00Handshake(335, socketaddress.toString(), 0, EnumConnectionState.LOGIN));
---
>         networkmanager.sendPacket(new C00Handshake(socketaddress.toString(), 0, EnumConnectionState.LOGIN));
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/model/ModelBox.java src\modified/src/minecraft/net/minecraft/client/model/ModelBox.java
38a39,109
>     public ModelBox(ModelRenderer p_i0_1_, int[][] p_i0_2_, float p_i0_3_, float p_i0_4_, float p_i0_5_, float p_i0_6_, float p_i0_7_, float p_i0_8_, float p_i0_9_, boolean p_i0_10_)
>     {
>         this.posX1 = p_i0_3_;
>         this.posY1 = p_i0_4_;
>         this.posZ1 = p_i0_5_;
>         this.posX2 = p_i0_3_ + p_i0_6_;
>         this.posY2 = p_i0_4_ + p_i0_7_;
>         this.posZ2 = p_i0_5_ + p_i0_8_;
>         this.vertexPositions = new PositionTextureVertex[8];
>         this.quadList = new TexturedQuad[6];
>         float f = p_i0_3_ + p_i0_6_;
>         float f1 = p_i0_4_ + p_i0_7_;
>         float f2 = p_i0_5_ + p_i0_8_;
>         p_i0_3_ = p_i0_3_ - p_i0_9_;
>         p_i0_4_ = p_i0_4_ - p_i0_9_;
>         p_i0_5_ = p_i0_5_ - p_i0_9_;
>         f = f + p_i0_9_;
>         f1 = f1 + p_i0_9_;
>         f2 = f2 + p_i0_9_;
> 
>         if (p_i0_10_)
>         {
>             float f3 = f;
>             f = p_i0_3_;
>             p_i0_3_ = f3;
>         }
> 
>         PositionTextureVertex positiontexturevertex7 = new PositionTextureVertex(p_i0_3_, p_i0_4_, p_i0_5_, 0.0F, 0.0F);
>         PositionTextureVertex positiontexturevertex = new PositionTextureVertex(f, p_i0_4_, p_i0_5_, 0.0F, 8.0F);
>         PositionTextureVertex positiontexturevertex1 = new PositionTextureVertex(f, f1, p_i0_5_, 8.0F, 8.0F);
>         PositionTextureVertex positiontexturevertex2 = new PositionTextureVertex(p_i0_3_, f1, p_i0_5_, 8.0F, 0.0F);
>         PositionTextureVertex positiontexturevertex3 = new PositionTextureVertex(p_i0_3_, p_i0_4_, f2, 0.0F, 0.0F);
>         PositionTextureVertex positiontexturevertex4 = new PositionTextureVertex(f, p_i0_4_, f2, 0.0F, 8.0F);
>         PositionTextureVertex positiontexturevertex5 = new PositionTextureVertex(f, f1, f2, 8.0F, 8.0F);
>         PositionTextureVertex positiontexturevertex6 = new PositionTextureVertex(p_i0_3_, f1, f2, 8.0F, 0.0F);
>         this.vertexPositions[0] = positiontexturevertex7;
>         this.vertexPositions[1] = positiontexturevertex;
>         this.vertexPositions[2] = positiontexturevertex1;
>         this.vertexPositions[3] = positiontexturevertex2;
>         this.vertexPositions[4] = positiontexturevertex3;
>         this.vertexPositions[5] = positiontexturevertex4;
>         this.vertexPositions[6] = positiontexturevertex5;
>         this.vertexPositions[7] = positiontexturevertex6;
>         this.quadList[0] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex4, positiontexturevertex, positiontexturevertex1, positiontexturevertex5}, p_i0_2_[4], false, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
>         this.quadList[1] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex7, positiontexturevertex3, positiontexturevertex6, positiontexturevertex2}, p_i0_2_[5], false, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
>         this.quadList[2] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex4, positiontexturevertex3, positiontexturevertex7, positiontexturevertex}, p_i0_2_[1], true, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
>         this.quadList[3] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex1, positiontexturevertex2, positiontexturevertex6, positiontexturevertex5}, p_i0_2_[0], true, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
>         this.quadList[4] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex, positiontexturevertex7, positiontexturevertex2, positiontexturevertex1}, p_i0_2_[2], false, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
>         this.quadList[5] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex3, positiontexturevertex4, positiontexturevertex5, positiontexturevertex6}, p_i0_2_[3], false, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
> 
>         if (p_i0_10_)
>         {
>             for (TexturedQuad texturedquad : this.quadList)
>             {
>                 texturedquad.flipFace();
>             }
>         }
>     }
> 
>     private TexturedQuad makeTexturedQuad(PositionTextureVertex[] p_makeTexturedQuad_1_, int[] p_makeTexturedQuad_2_, boolean p_makeTexturedQuad_3_, float p_makeTexturedQuad_4_, float p_makeTexturedQuad_5_)
>     {
>         if (p_makeTexturedQuad_2_ == null)
>         {
>             return null;
>         }
>         else
>         {
>             return p_makeTexturedQuad_3_ ? new TexturedQuad(p_makeTexturedQuad_1_, p_makeTexturedQuad_2_[2], p_makeTexturedQuad_2_[3], p_makeTexturedQuad_2_[0], p_makeTexturedQuad_2_[1], p_makeTexturedQuad_4_, p_makeTexturedQuad_5_) : new TexturedQuad(p_makeTexturedQuad_1_, p_makeTexturedQuad_2_[0], p_makeTexturedQuad_2_[1], p_makeTexturedQuad_2_[2], p_makeTexturedQuad_2_[3], p_makeTexturedQuad_4_, p_makeTexturedQuad_5_);
>         }
>     }
> 
102c173,176
<             texturedquad.draw(renderer, scale);
---
>             if (texturedquad != null)
>             {
>                 texturedquad.draw(renderer, scale);
>             }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/model/ModelPlayer.java src\modified/src/minecraft/net/minecraft/client/model/ModelPlayer.java
132,140d131
< 
<         if (entityIn.isSneaking())
<         {
<             this.bipedCape.rotationPointY = 2.0F;
<         }
<         else
<         {
<             this.bipedCape.rotationPointY = 0.0F;
<         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/model/ModelRenderer.java src\modified/src/minecraft/net/minecraft/client/model/ModelRenderer.java
3a4
> import java.util.ArrayList;
7a9
> import net.minecraft.client.renderer.RenderGlobal;
8a11,14
> import net.minecraft.util.ResourceLocation;
> import net.optifine.entity.model.anim.ModelUpdater;
> import optifine.Config;
> import optifine.ModelSprite;
44a51,60
>     public List spriteList;
>     public boolean mirrorV;
>     public float scaleX;
>     public float scaleY;
>     public float scaleZ;
>     private float savedScale;
>     private ResourceLocation textureLocation;
>     private String id;
>     private ModelUpdater modelUpdater;
>     private RenderGlobal renderGlobal;
47a64,71
>         this.spriteList = new ArrayList();
>         this.mirrorV = false;
>         this.scaleX = 1.0F;
>         this.scaleY = 1.0F;
>         this.scaleZ = 1.0F;
>         this.textureLocation = null;
>         this.id = null;
>         this.renderGlobal = Config.getRenderGlobal();
127c151
<         if (!this.isHidden)
---
>         if (!this.isHidden && this.showModel)
129c153
<             if (this.showModel)
---
>             if (!this.compiled)
131c155,162
<                 if (!this.compiled)
---
>                 this.compileDisplayList(scale);
>             }
> 
>             int i = 0;
> 
>             if (this.textureLocation != null && !this.renderGlobal.renderOverlayDamaged)
>             {
>                 if (this.renderGlobal.renderOverlayEyes)
133c164
<                     this.compileDisplayList(scale);
---
>                     return;
136c167,169
<                 GlStateManager.translate(this.offsetX, this.offsetY, this.offsetZ);
---
>                 i = GlStateManager.getBoundTexture();
>                 Config.getTextureManager().bindTexture(this.textureLocation);
>             }
138c171,181
<                 if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
---
>             if (this.modelUpdater != null)
>             {
>                 this.modelUpdater.update();
>             }
> 
>             boolean flag = this.scaleX != 1.0F || this.scaleY != 1.0F || this.scaleZ != 1.0F;
>             GlStateManager.translate(this.offsetX, this.offsetY, this.offsetZ);
> 
>             if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
>             {
>                 if (this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F)
140c183
<                     if (this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F)
---
>                     if (flag)
142,150c185
<                         GlStateManager.callList(this.displayList);
< 
<                         if (this.childModels != null)
<                         {
<                             for (int k = 0; k < this.childModels.size(); ++k)
<                             {
<                                 ((ModelRenderer)this.childModels.get(k)).render(scale);
<                             }
<                         }
---
>                         GlStateManager.scale(this.scaleX, this.scaleY, this.scaleZ);
152,155d186
<                     else
<                     {
<                         GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
<                         GlStateManager.callList(this.displayList);
157c188,192
<                         if (this.childModels != null)
---
>                     GlStateManager.callList(this.displayList);
> 
>                     if (this.childModels != null)
>                     {
>                         for (int l = 0; l < this.childModels.size(); ++l)
159,162c194
<                             for (int j = 0; j < this.childModels.size(); ++j)
<                             {
<                                 ((ModelRenderer)this.childModels.get(j)).render(scale);
<                             }
---
>                             ((ModelRenderer)this.childModels.get(l)).render(scale);
163a196
>                     }
165c198,200
<                         GlStateManager.translate(-this.rotationPointX * scale, -this.rotationPointY * scale, -this.rotationPointZ * scale);
---
>                     if (flag)
>                     {
>                         GlStateManager.scale(1.0F / this.scaleX, 1.0F / this.scaleY, 1.0F / this.scaleZ);
170d204
<                     GlStateManager.pushMatrix();
173,183c207
<                     if (this.rotateAngleZ != 0.0F)
<                     {
<                         GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
<                     }
< 
<                     if (this.rotateAngleY != 0.0F)
<                     {
<                         GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
<                     }
< 
<                     if (this.rotateAngleX != 0.0F)
---
>                     if (flag)
185c209
<                         GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
---
>                         GlStateManager.scale(this.scaleX, this.scaleY, this.scaleZ);
192c216
<                         for (int i = 0; i < this.childModels.size(); ++i)
---
>                         for (int k = 0; k < this.childModels.size(); ++k)
194c218
<                             ((ModelRenderer)this.childModels.get(i)).render(scale);
---
>                             ((ModelRenderer)this.childModels.get(k)).render(scale);
198,199c222,225
<                     GlStateManager.popMatrix();
<                 }
---
>                     if (flag)
>                     {
>                         GlStateManager.scale(1.0F / this.scaleX, 1.0F / this.scaleY, 1.0F / this.scaleZ);
>                     }
201c227,228
<                 GlStateManager.translate(-this.offsetX, -this.offsetY, -this.offsetZ);
---
>                     GlStateManager.translate(-this.rotationPointX * scale, -this.rotationPointY * scale, -this.rotationPointZ * scale);
>                 }
203,210c230
<         }
<     }
< 
<     public void renderWithRotation(float scale)
<     {
<         if (!this.isHidden)
<         {
<             if (this.showModel)
---
>             else
212,216d231
<                 if (!this.compiled)
<                 {
<                     this.compileDisplayList(scale);
<                 }
< 
219a235,239
>                 if (this.rotateAngleZ != 0.0F)
>                 {
>                     GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
>                 }
> 
230c250
<                 if (this.rotateAngleZ != 0.0F)
---
>                 if (flag)
232c252
<                     GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
---
>                     GlStateManager.scale(this.scaleX, this.scaleY, this.scaleZ);
235a256,264
> 
>                 if (this.childModels != null)
>                 {
>                     for (int j = 0; j < this.childModels.size(); ++j)
>                     {
>                         ((ModelRenderer)this.childModels.get(j)).render(scale);
>                     }
>                 }
> 
237a267,343
> 
>             GlStateManager.translate(-this.offsetX, -this.offsetY, -this.offsetZ);
> 
>             if (i != 0)
>             {
>                 GlStateManager.bindTexture(i);
>             }
>         }
>     }
> 
>     public void renderWithRotation(float scale)
>     {
>         if (!this.isHidden && this.showModel)
>         {
>             if (!this.compiled)
>             {
>                 this.compileDisplayList(scale);
>             }
> 
>             int i = 0;
> 
>             if (this.textureLocation != null && !this.renderGlobal.renderOverlayDamaged)
>             {
>                 if (this.renderGlobal.renderOverlayEyes)
>                 {
>                     return;
>                 }
> 
>                 i = GlStateManager.getBoundTexture();
>                 Config.getTextureManager().bindTexture(this.textureLocation);
>             }
> 
>             if (this.modelUpdater != null)
>             {
>                 this.modelUpdater.update();
>             }
> 
>             boolean flag = this.scaleX != 1.0F || this.scaleY != 1.0F || this.scaleZ != 1.0F;
>             GlStateManager.pushMatrix();
>             GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
> 
>             if (this.rotateAngleY != 0.0F)
>             {
>                 GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
>             }
> 
>             if (this.rotateAngleX != 0.0F)
>             {
>                 GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
>             }
> 
>             if (this.rotateAngleZ != 0.0F)
>             {
>                 GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
>             }
> 
>             if (flag)
>             {
>                 GlStateManager.scale(this.scaleX, this.scaleY, this.scaleZ);
>             }
> 
>             GlStateManager.callList(this.displayList);
> 
>             if (this.childModels != null)
>             {
>                 for (int j = 0; j < this.childModels.size(); ++j)
>                 {
>                     ((ModelRenderer)this.childModels.get(j)).render(scale);
>                 }
>             }
> 
>             GlStateManager.popMatrix();
> 
>             if (i != 0)
>             {
>                 GlStateManager.bindTexture(i);
>             }
246c352
<         if (!this.isHidden)
---
>         if (!this.isHidden && this.showModel)
248c354,359
<             if (this.showModel)
---
>             if (!this.compiled)
>             {
>                 this.compileDisplayList(scale);
>             }
> 
>             if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
250c361
<                 if (!this.compiled)
---
>                 if (this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F)
252c363
<                     this.compileDisplayList(scale);
---
>                     GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
253a365,368
>             }
>             else
>             {
>                 GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
255c370
<                 if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
---
>                 if (this.rotateAngleZ != 0.0F)
257,260c372
<                     if (this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F)
<                     {
<                         GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
<                     }
---
>                     GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
262,269d373
<                 else
<                 {
<                     GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
< 
<                     if (this.rotateAngleZ != 0.0F)
<                     {
<                         GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
<                     }
271,274c375,378
<                     if (this.rotateAngleY != 0.0F)
<                     {
<                         GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
<                     }
---
>                 if (this.rotateAngleY != 0.0F)
>                 {
>                     GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
>                 }
276,279c380,382
<                     if (this.rotateAngleX != 0.0F)
<                     {
<                         GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
<                     }
---
>                 if (this.rotateAngleX != 0.0F)
>                 {
>                     GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
290c393,398
<         this.displayList = GLAllocation.generateDisplayLists(1);
---
>         if (this.displayList == 0)
>         {
>             this.savedScale = scale;
>             this.displayList = GLAllocation.generateDisplayLists(1);
>         }
> 
298a407,412
>         for (int j = 0; j < this.spriteList.size(); ++j)
>         {
>             ModelSprite modelsprite = (ModelSprite)this.spriteList.get(j);
>             modelsprite.render(Tessellator.getInstance(), scale);
>         }
> 
311a426,546
> 
>     public void addSprite(float p_addSprite_1_, float p_addSprite_2_, float p_addSprite_3_, int p_addSprite_4_, int p_addSprite_5_, int p_addSprite_6_, float p_addSprite_7_)
>     {
>         this.spriteList.add(new ModelSprite(this, this.textureOffsetX, this.textureOffsetY, p_addSprite_1_, p_addSprite_2_, p_addSprite_3_, p_addSprite_4_, p_addSprite_5_, p_addSprite_6_, p_addSprite_7_));
>     }
> 
>     public boolean getCompiled()
>     {
>         return this.compiled;
>     }
> 
>     public int getDisplayList()
>     {
>         return this.displayList;
>     }
> 
>     public void resetDisplayList()
>     {
>         if (this.compiled)
>         {
>             this.compiled = false;
>             this.compileDisplayList(this.savedScale);
>         }
>     }
> 
>     public ResourceLocation getTextureLocation()
>     {
>         return this.textureLocation;
>     }
> 
>     public void setTextureLocation(ResourceLocation p_setTextureLocation_1_)
>     {
>         this.textureLocation = p_setTextureLocation_1_;
>     }
> 
>     public String getId()
>     {
>         return this.id;
>     }
> 
>     public void setId(String p_setId_1_)
>     {
>         this.id = p_setId_1_;
>     }
> 
>     public void addBox(int[][] p_addBox_1_, float p_addBox_2_, float p_addBox_3_, float p_addBox_4_, float p_addBox_5_, float p_addBox_6_, float p_addBox_7_, float p_addBox_8_)
>     {
>         this.cubeList.add(new ModelBox(this, p_addBox_1_, p_addBox_2_, p_addBox_3_, p_addBox_4_, p_addBox_5_, p_addBox_6_, p_addBox_7_, p_addBox_8_, this.mirror));
>     }
> 
>     public ModelRenderer getChild(String p_getChild_1_)
>     {
>         if (p_getChild_1_ == null)
>         {
>             return null;
>         }
>         else
>         {
>             if (this.childModels != null)
>             {
>                 for (int i = 0; i < this.childModels.size(); ++i)
>                 {
>                     ModelRenderer modelrenderer = this.childModels.get(i);
> 
>                     if (p_getChild_1_.equals(modelrenderer.getId()))
>                     {
>                         return modelrenderer;
>                     }
>                 }
>             }
> 
>             return null;
>         }
>     }
> 
>     public ModelRenderer getChildDeep(String p_getChildDeep_1_)
>     {
>         if (p_getChildDeep_1_ == null)
>         {
>             return null;
>         }
>         else
>         {
>             ModelRenderer modelrenderer = this.getChild(p_getChildDeep_1_);
> 
>             if (modelrenderer != null)
>             {
>                 return modelrenderer;
>             }
>             else
>             {
>                 if (this.childModels != null)
>                 {
>                     for (int i = 0; i < this.childModels.size(); ++i)
>                     {
>                         ModelRenderer modelrenderer1 = this.childModels.get(i);
>                         ModelRenderer modelrenderer2 = modelrenderer1.getChildDeep(p_getChildDeep_1_);
> 
>                         if (modelrenderer2 != null)
>                         {
>                             return modelrenderer2;
>                         }
>                     }
>                 }
> 
>                 return null;
>             }
>         }
>     }
> 
>     public void setModelUpdater(ModelUpdater p_setModelUpdater_1_)
>     {
>         this.modelUpdater = p_setModelUpdater_1_;
>     }
> 
>     public String toString()
>     {
>         StringBuffer stringbuffer = new StringBuffer();
>         stringbuffer.append("id: " + this.id + ", boxes: " + (this.cubeList != null ? this.cubeList.size() : null) + ", submodels: " + (this.childModels != null ? this.childModels.size() : null));
>         return stringbuffer.toString();
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/model/TexturedQuad.java src\modified/src/minecraft/net/minecraft/client/model/TexturedQuad.java
6a7,8
> import optifine.Config;
> import shadersmod.client.SVertexFormat;
63c65,72
<         renderer.begin(7, DefaultVertexFormats.OLDMODEL_POSITION_TEX_NORMAL);
---
>         if (Config.isShaders())
>         {
>             renderer.begin(7, SVertexFormat.defVertexFormatTextured);
>         }
>         else
>         {
>             renderer.begin(7, DefaultVertexFormats.OLDMODEL_POSITION_TEX_NORMAL);
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/multiplayer/GuiConnecting.java src\modified/src/minecraft/net/minecraft/client/multiplayer/GuiConnecting.java
67c67
<                     GuiConnecting.this.networkManager.sendPacket(new C00Handshake(335, ip, port, EnumConnectionState.LOGIN));
---
>                     GuiConnecting.this.networkManager.sendPacket(new C00Handshake(ip, port, EnumConnectionState.LOGIN));
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/multiplayer/PlayerControllerMP.java src\modified/src/minecraft/net/minecraft/client/multiplayer/PlayerControllerMP.java
4d3
< import java.util.List;
22a22
> import net.minecraft.item.crafting.IRecipe;
28a29
> import net.minecraft.network.play.client.CPacketPlaceRecipe;
32d32
< import net.minecraft.network.play.client.CPacketRecipePlacement;
575c575
<     public void func_192831_a(int p_192831_1_, List<CPacketRecipePlacement.ItemMove> p_192831_2_, List<CPacketRecipePlacement.ItemMove> p_192831_3_, EntityPlayer p_192831_4_)
---
>     public void func_194338_a(int p_194338_1_, IRecipe p_194338_2_, boolean p_194338_3_, EntityPlayer p_194338_4_)
577,578c577
<         short short1 = p_192831_4_.openContainer.getNextTransactionID(p_192831_4_.inventory);
<         this.connection.sendPacket(new CPacketRecipePlacement(p_192831_1_, p_192831_2_, p_192831_3_, short1));
---
>         this.connection.sendPacket(new CPacketPlaceRecipe(p_194338_1_, p_194338_2_, p_194338_3_));
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/multiplayer/ServerData.java src\modified/src/minecraft/net/minecraft/client/multiplayer/ServerData.java
26c26
<     public int version = 335;
---
>     public int version = 340;
29c29
<     public String gameVersion = "1.12";
---
>     public String gameVersion = "1.12.2";
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/multiplayer/ServerList.java src\modified/src/minecraft/net/minecraft/client/multiplayer/ServerList.java
11a12
> import org.golde.lttclientmeme.ServerDataFeatured;
35a37
>             loadFeaturedServers();
54a57,70
>     
>     private void loadFeaturedServers() {
> 		this.addServerData(new ServerDataFeatured("LTT Minecraft Server", "mc.ltt.gg"));
> 	}
>     
>     public int getFeaturedServerCount() {
>     	int count = 0;
>     	for(ServerData sd : this.servers) {
>     		if(sd instanceof ServerDataFeatured) {
>     			count++;
>     		}
>     	}
>     	return count;
>     }
68c84,86
<                 nbttaglist.appendTag(serverdata.getNBTCompound());
---
>             	if(!(serverdata instanceof ServerDataFeatured)) {
>             		nbttaglist.appendTag(serverdata.getNBTCompound());
>             	}
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/multiplayer/WorldClient.java src\modified/src/minecraft/net/minecraft/client/multiplayer/WorldClient.java
6a7
> import net.minecraft.block.Block;
11a13
> import net.minecraft.client.entity.EntityPlayerSP;
39a42
> import net.minecraft.world.WorldProvider;
45a49,53
> import optifine.Config;
> import optifine.CustomGuis;
> import optifine.DynamicLights;
> import optifine.PlayerControllerOF;
> import optifine.Reflector;
59a68,70
>     private int playerChunkX = Integer.MIN_VALUE;
>     private int playerChunkY = Integer.MIN_VALUE;
>     private boolean playerUpdate = false;
63c74
<         super(new SaveHandlerMP(), new WorldInfo(settings, "MpServer"), DimensionType.getById(dimension).createDimension(), profilerIn, true);
---
>         super(new SaveHandlerMP(), new WorldInfo(settings, "MpServer"), makeWorldProvider(dimension), profilerIn, true);
68d78
<         this.setSpawnPoint(new BlockPos(8, 64, 8));
69a80
>         this.setSpawnPoint(new BlockPos(8, 64, 8));
73a85,97
>         Reflector.call(this, Reflector.ForgeWorld_initCapabilities);
>         Reflector.postForgeBusEvent(Reflector.WorldEvent_Load_Constructor, this);
> 
>         if (this.mc.playerController != null && this.mc.playerController.getClass() == PlayerControllerMP.class)
>         {
>             this.mc.playerController = new PlayerControllerOF(this.mc, netHandler);
>             CustomGuis.setPlayerControllerOF((PlayerControllerOF)this.mc.playerController);
>         }
>     }
> 
>     private static WorldProvider makeWorldProvider(int p_makeWorldProvider_0_)
>     {
>         return Reflector.DimensionManager_createProviderFor.exists() ? (WorldProvider)Reflector.call(Reflector.DimensionManager_createProviderFor, p_makeWorldProvider_0_) : DimensionType.getById(p_makeWorldProvider_0_).createDimension();
133,137c157,158
<         this.viewableChunks.clear();
<         int i = this.mc.gameSettings.renderDistanceChunks;
<         this.theProfiler.startSection("buildList");
<         int j = MathHelper.floor(this.mc.player.posX / 16.0D);
<         int k = MathHelper.floor(this.mc.player.posZ / 16.0D);
---
>         int i = MathHelper.floor(this.mc.player.posX / 16.0D);
>         int j = MathHelper.floor(this.mc.player.posZ / 16.0D);
139c160
<         for (int l = -i; l <= i; ++l)
---
>         if (i != this.playerChunkX || j != this.playerChunkY)
141c162,170
<             for (int i1 = -i; i1 <= i; ++i1)
---
>             this.playerChunkX = i;
>             this.playerChunkY = j;
>             this.viewableChunks.clear();
>             int k = this.mc.gameSettings.renderDistanceChunks;
>             this.theProfiler.startSection("buildList");
>             int l = MathHelper.floor(this.mc.player.posX / 16.0D);
>             int i1 = MathHelper.floor(this.mc.player.posZ / 16.0D);
> 
>             for (int j1 = -k; j1 <= k; ++j1)
143c172,175
<                 this.viewableChunks.add(new ChunkPos(l + j, i1 + k));
---
>                 for (int k1 = -k; k1 <= k; ++k1)
>                 {
>                     this.viewableChunks.add(new ChunkPos(j1 + l, k1 + i1));
>                 }
145d176
<         }
147c178,179
<         this.theProfiler.endSection();
---
>             this.theProfiler.endSection();
>         }
337a370,381
>             EntityPlayerSP entityplayersp = this.mc.player;
> 
>             if (entityplayersp == null)
>             {
>                 return;
>             }
> 
>             if (Math.abs(entityplayersp.chunkCoordX - chunkIn.xPosition) > 1 || Math.abs(entityplayersp.chunkCoordZ - chunkIn.zPosition) > 1)
>             {
>                 return;
>             }
> 
342a387,397
>             l = l / 2;
> 
>             if (entityplayersp.posY > 160.0D)
>             {
>                 l += 128;
>             }
>             else if (entityplayersp.posY > 96.0D)
>             {
>                 l += 64;
>             }
> 
346a402
>             double d0 = this.mc.player.getDistanceSq((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D);
348c404,414
<             if (iblockstate.getMaterial() == Material.AIR && this.getLight(blockpos) <= this.rand.nextInt(8) && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0 && this.mc.player != null && this.mc.player.getDistanceSq((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D) > 4.0D)
---
>             if (d0 < 4.0D)
>             {
>                 return;
>             }
> 
>             if (d0 > 255.0D)
>             {
>                 return;
>             }
> 
>             if (iblockstate.getMaterial() == Material.AIR && this.getLight(blockpos) <= this.rand.nextInt(8) && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0)
360a427,432
> 
>         if (itemstack == null || Block.getBlockFromItem(itemstack.getItem()) != Blocks.BARRIER)
>         {
>             itemstack = this.mc.player.getHeldItemOffhand();
>         }
> 
548a621,663
> 
>     public int getCombinedLight(BlockPos pos, int lightValue)
>     {
>         int i = super.getCombinedLight(pos, lightValue);
> 
>         if (Config.isDynamicLights())
>         {
>             i = DynamicLights.getCombinedLight(pos, i);
>         }
> 
>         return i;
>     }
> 
>     /**
>      * Sets the block state at a given location. Flag 1 will cause a block update. Flag 2 will send the change to
>      * clients (you almost always want this). Flag 4 prevents the block from being re-rendered, if this is a client
>      * world. Flags can be added together.
>      */
>     public boolean setBlockState(BlockPos pos, IBlockState newState, int flags)
>     {
>         this.playerUpdate = this.isPlayerActing();
>         boolean flag = super.setBlockState(pos, newState, flags);
>         this.playerUpdate = false;
>         return flag;
>     }
> 
>     private boolean isPlayerActing()
>     {
>         if (this.mc.playerController instanceof PlayerControllerOF)
>         {
>             PlayerControllerOF playercontrollerof = (PlayerControllerOF)this.mc.playerController;
>             return playercontrollerof.isActing();
>         }
>         else
>         {
>             return false;
>         }
>     }
> 
>     public boolean isPlayerUpdate()
>     {
>         return this.playerUpdate;
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java src\modified/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java
50a51
> import net.minecraft.client.gui.recipebook.GuiRecipeBook;
176a178
> import net.minecraft.network.play.server.SPacketPlaceGhostRecipe;
332c334
<         this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
---
>         this.gameController.displayGuiScreen(new GuiDownloadTerrain());
1165c1167
<             this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
---
>             this.gameController.displayGuiScreen(new GuiDownloadTerrain());
1450c1452
<                 this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
---
>                 this.gameController.displayGuiScreen(new GuiDownloadTerrain());
2298a2301,2315
>     public void func_194307_a(SPacketPlaceGhostRecipe p_194307_1_)
>     {
>         PacketThreadUtil.checkThreadAndEnqueue(p_194307_1_, this, this.gameController);
>         Container container = this.gameController.player.openContainer;
> 
>         if (container.windowId == p_194307_1_.func_194313_b() && container.getCanCraft(this.gameController.player))
>         {
>             if (this.gameController.currentScreen instanceof IRecipeShownListener)
>             {
>                 GuiRecipeBook guirecipebook = ((IRecipeShownListener)this.gameController.currentScreen).func_194310_f();
>                 guirecipebook.func_193951_a(p_194307_1_.func_194311_a(), container.inventorySlots);
>             }
>         }
>     }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/network/ServerPinger.java src\modified/src/minecraft/net/minecraft/client/network/ServerPinger.java
176c176
<             networkmanager.sendPacket(new C00Handshake(335, serveraddress.getIP(), serveraddress.getPort(), EnumConnectionState.STATUS));
---
>             networkmanager.sendPacket(new C00Handshake(serveraddress.getIP(), serveraddress.getPort(), EnumConnectionState.STATUS));
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/particle/ParticleEnchantmentTable.java src\modified/src/minecraft/net/minecraft/client/particle/ParticleEnchantmentTable.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
11a14,15
>     private int colorOffset = 0;
>     
34a39,40
>         
>         colorOffset = rand.nextInt();
62a69,74
>     	
>     	float[] rgb = ColorUtils.intToRGBAF(ColorUtils.getChromaColor(colorOffset));
>         this.particleRed = rgb[0];
>         this.particleGreen = rgb[1];
>         this.particleBlue = rgb[2];
>     	
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/particle/ParticleExplosion.java src\modified/src/minecraft/net/minecraft/client/particle/ParticleExplosion.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
14,16c16,25
<         this.particleRed = f;
<         this.particleGreen = f;
<         this.particleBlue = f;
---
> //        this.particleRed = f;
> //        this.particleGreen = f;
> //        this.particleBlue = f;
>         
>         
>         float[] rgb = ColorUtils.intToRGBAF(ColorUtils.getChromaColor());
>         this.particleRed = rgb[0];
>         this.particleGreen = rgb[1];
>         this.particleBlue = rgb[2];
>         
22a32,36
>     	float[] rgb = ColorUtils.intToRGBAF(ColorUtils.getChromaColor((long)(this.particleScale * 500)));
>         this.particleRed = rgb[0];
>         this.particleGreen = rgb[1];
>         this.particleBlue = rgb[2];
>         
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/particle/ParticleItemPickup.java src\modified/src/minecraft/net/minecraft/client/particle/ParticleItemPickup.java
9a10,11
> import optifine.Config;
> import shadersmod.client.Shaders;
33a36,43
>         int i = 0;
> 
>         if (Config.isShaders())
>         {
>             i = Shaders.activeProgram;
>             Shaders.nextEntity(this.item);
>         }
> 
45,48c55,58
<         int i = this.getBrightnessForRender(partialTicks);
<         int j = i % 65536;
<         int k = i / 65536;
<         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j, (float)k);
---
>         int j = this.getBrightnessForRender(partialTicks);
>         int k = j % 65536;
>         int l = j / 65536;
>         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)k, (float)l);
54a65,69
> 
>         if (Config.isShaders())
>         {
>             Shaders.useProgram(i);
>         }
Only in src\modified/src/minecraft/net/minecraft/client/particle: ParticleManag#
Only in src\modified/src/minecraft/net/minecraft/client/particle: ParticleManag~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/particle/ParticleManager.java src\modified/src/minecraft/net/minecraft/client/particle/ParticleManager.java
12a13
> import net.minecraft.block.Block;
33a35
> import net.minecraft.util.math.RayTraceResult;
34a37,38
> import optifine.Config;
> import optifine.Reflector;
161c165,171
<         this.queueEntityFX.add(effect);
---
>         if (effect != null)
>         {
>             if (!(effect instanceof ParticleFirework.Spark) || Config.isFireworkParticles())
>             {
>                 this.queueEntityFX.add(effect);
>             }
>         }
200c210,213
<                 this.fxLayers[j][k].add(particle);
---
>                 if (!(particle instanceof Barrier) || !this.reuseBarrierParticle(particle, this.fxLayers[j][k]))
>                 {
>                     this.fxLayers[j][k].add(particle);
>                 }
207c220
<         this.worldObj.theProfiler.startSection(layer + "");
---
>         this.worldObj.theProfiler.startSection(String.valueOf(layer));
211c224
<             this.worldObj.theProfiler.startSection(i + "");
---
>             this.worldObj.theProfiler.startSection(String.valueOf(i));
296c309
<         for (int i_nf = 0; i_nf < 3; ++i_nf)
---
>         for (int i = 0; i < 3; ++i)
298c311
<             final int i = i_nf;
---
>             final int j = i;
300c313
<             for (int j = 0; j < 2; ++j)
---
>             for (int k = 0; k < 2; ++k)
302c315
<                 if (!this.fxLayers[i][j].isEmpty())
---
>                 if (!this.fxLayers[j][k].isEmpty())
304c317
<                     switch (j)
---
>                     switch (k)
314c327
<                     switch (i)
---
>                     switch (j)
330c343
<                     for (final Particle particle : this.fxLayers[i][j])
---
>                     for (final Particle particle : this.fxLayers[j][k])
351c364
<                                     if (i == 0)
---
>                                     if (j == 0)
355c368
<                                     else if (i == 1)
---
>                                     else if (j == 1)
361c374
<                                         return i == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + i;
---
>                                         return j == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + j;
422c435,447
<         if (state.getMaterial() != Material.AIR)
---
>         boolean flag;
> 
>         if (Reflector.ForgeBlock_addDestroyEffects.exists() && Reflector.ForgeBlock_isAir.exists())
>         {
>             Block block = state.getBlock();
>             flag = !Reflector.callBoolean(block, Reflector.ForgeBlock_isAir, state, this.worldObj, pos) && !Reflector.callBoolean(block, Reflector.ForgeBlock_addDestroyEffects, this.worldObj, pos, this);
>         }
>         else
>         {
>             flag = state.getMaterial() != Material.AIR;
>         }
> 
>         if (flag)
425c450
<             int i = 4;
---
>             int l = 4;
427c452
<             for (int j = 0; j < 4; ++j)
---
>             for (int i = 0; i < 4; ++i)
429c454
<                 for (int k = 0; k < 4; ++k)
---
>                 for (int j = 0; j < 4; ++j)
431c456
<                     for (int l = 0; l < 4; ++l)
---
>                     for (int k = 0; k < 4; ++k)
433,435c458,460
<                         double d0 = ((double)j + 0.5D) / 4.0D;
<                         double d1 = ((double)k + 0.5D) / 4.0D;
<                         double d2 = ((double)l + 0.5D) / 4.0D;
---
>                         double d0 = ((double)i + 0.5D) / 4.0D;
>                         double d1 = ((double)j + 0.5D) / 4.0D;
>                         double d2 = ((double)k + 0.5D) / 4.0D;
508a534,562
> 
>     private boolean reuseBarrierParticle(Particle p_reuseBarrierParticle_1_, ArrayDeque<Particle> p_reuseBarrierParticle_2_)
>     {
>         for (Particle particle : p_reuseBarrierParticle_2_)
>         {
>             if (particle instanceof Barrier && p_reuseBarrierParticle_1_.prevPosX == particle.prevPosX && p_reuseBarrierParticle_1_.prevPosY == particle.prevPosY && p_reuseBarrierParticle_1_.prevPosZ == particle.prevPosZ)
>             {
>                 particle.particleAge = 0;
>                 return true;
>             }
>         }
> 
>         return false;
>     }
> 
>     public void addBlockHitEffects(BlockPos p_addBlockHitEffects_1_, RayTraceResult p_addBlockHitEffects_2_)
>     {
>         IBlockState iblockstate = this.worldObj.getBlockState(p_addBlockHitEffects_1_);
> 
>         if (iblockstate != null)
>         {
>             boolean flag = Reflector.callBoolean(iblockstate.getBlock(), Reflector.ForgeBlock_addHitEffects, iblockstate, this.worldObj, p_addBlockHitEffects_2_, this);
> 
>             if (iblockstate != null && !flag)
>             {
>                 this.addBlockHitEffects(p_addBlockHitEffects_1_, p_addBlockHitEffects_2_.sideHit);
>             }
>         }
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/block/model/BakedQuad.java src\modified/src/minecraft/net/minecraft/client/renderer/block/model/BakedQuad.java
2a3
> import net.minecraft.client.Minecraft;
3a5,6
> import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
> import net.minecraft.client.renderer.vertex.VertexFormat;
4a8,12
> import net.minecraftforge.client.model.pipeline.IVertexConsumer;
> import net.minecraftforge.client.model.pipeline.IVertexProducer;
> import optifine.Config;
> import optifine.QuadBounds;
> import optifine.Reflector;
6c14
< public class BakedQuad
---
> public class BakedQuad implements IVertexProducer
12c20
<     protected final int[] vertexData;
---
>     protected int[] vertexData;
14,15c22,38
<     protected final EnumFacing face;
<     protected final TextureAtlasSprite sprite;
---
>     protected EnumFacing face;
>     protected TextureAtlasSprite sprite;
>     private int[] vertexDataSingle = null;
>     protected boolean applyDiffuseLighting = Reflector.ForgeHooksClient_fillNormal.exists();
>     protected VertexFormat format = DefaultVertexFormats.ITEM;
>     private QuadBounds quadBounds;
> 
>     public BakedQuad(int[] p_i6_1_, int p_i6_2_, EnumFacing p_i6_3_, TextureAtlasSprite p_i6_4_, boolean p_i6_5_, VertexFormat p_i6_6_)
>     {
>         this.vertexData = p_i6_1_;
>         this.tintIndex = p_i6_2_;
>         this.face = p_i6_3_;
>         this.sprite = p_i6_4_;
>         this.applyDiffuseLighting = p_i6_5_;
>         this.format = p_i6_6_;
>         this.fixVertexData();
>     }
22a46
>         this.fixVertexData();
26a51,55
>         if (this.sprite == null)
>         {
>             this.sprite = getSpriteByUv(this.getVertexData());
>         }
> 
31a61
>         this.fixVertexData();
46a77,81
>         if (this.face == null)
>         {
>             this.face = FaceBakery.getFacingFromVertexData(this.getVertexData());
>         }
> 
48a84,247
> 
>     public int[] getVertexDataSingle()
>     {
>         if (this.vertexDataSingle == null)
>         {
>             this.vertexDataSingle = makeVertexDataSingle(this.getVertexData(), this.getSprite());
>         }
> 
>         return this.vertexDataSingle;
>     }
> 
>     private static int[] makeVertexDataSingle(int[] p_makeVertexDataSingle_0_, TextureAtlasSprite p_makeVertexDataSingle_1_)
>     {
>         int[] aint = (int[])p_makeVertexDataSingle_0_.clone();
>         int i = p_makeVertexDataSingle_1_.sheetWidth / p_makeVertexDataSingle_1_.getIconWidth();
>         int j = p_makeVertexDataSingle_1_.sheetHeight / p_makeVertexDataSingle_1_.getIconHeight();
>         int k = aint.length / 4;
> 
>         for (int l = 0; l < 4; ++l)
>         {
>             int i1 = l * k;
>             float f = Float.intBitsToFloat(aint[i1 + 4]);
>             float f1 = Float.intBitsToFloat(aint[i1 + 4 + 1]);
>             float f2 = p_makeVertexDataSingle_1_.toSingleU(f);
>             float f3 = p_makeVertexDataSingle_1_.toSingleV(f1);
>             aint[i1 + 4] = Float.floatToRawIntBits(f2);
>             aint[i1 + 4 + 1] = Float.floatToRawIntBits(f3);
>         }
> 
>         return aint;
>     }
> 
>     public void pipe(IVertexConsumer p_pipe_1_)
>     {
>         Reflector.callVoid(Reflector.LightUtil_putBakedQuad, p_pipe_1_, this);
>     }
> 
>     public VertexFormat getFormat()
>     {
>         return this.format;
>     }
> 
>     public boolean shouldApplyDiffuseLighting()
>     {
>         return this.applyDiffuseLighting;
>     }
> 
>     private static TextureAtlasSprite getSpriteByUv(int[] p_getSpriteByUv_0_)
>     {
>         float f = 1.0F;
>         float f1 = 1.0F;
>         float f2 = 0.0F;
>         float f3 = 0.0F;
>         int i = p_getSpriteByUv_0_.length / 4;
> 
>         for (int j = 0; j < 4; ++j)
>         {
>             int k = j * i;
>             float f4 = Float.intBitsToFloat(p_getSpriteByUv_0_[k + 4]);
>             float f5 = Float.intBitsToFloat(p_getSpriteByUv_0_[k + 4 + 1]);
>             f = Math.min(f, f4);
>             f1 = Math.min(f1, f5);
>             f2 = Math.max(f2, f4);
>             f3 = Math.max(f3, f5);
>         }
> 
>         float f6 = (f + f2) / 2.0F;
>         float f7 = (f1 + f3) / 2.0F;
>         TextureAtlasSprite textureatlassprite = Minecraft.getMinecraft().getTextureMapBlocks().getIconByUV((double)f6, (double)f7);
>         return textureatlassprite;
>     }
> 
>     protected void fixVertexData()
>     {
>         if (Config.isShaders())
>         {
>             if (this.vertexData.length == 28)
>             {
>                 this.vertexData = expandVertexData(this.vertexData);
>             }
>         }
>         else if (this.vertexData.length == 56)
>         {
>             this.vertexData = compactVertexData(this.vertexData);
>         }
>     }
> 
>     private static int[] expandVertexData(int[] p_expandVertexData_0_)
>     {
>         int i = p_expandVertexData_0_.length / 4;
>         int j = i * 2;
>         int[] aint = new int[j * 4];
> 
>         for (int k = 0; k < 4; ++k)
>         {
>             System.arraycopy(p_expandVertexData_0_, k * i, aint, k * j, i);
>         }
> 
>         return aint;
>     }
> 
>     private static int[] compactVertexData(int[] p_compactVertexData_0_)
>     {
>         int i = p_compactVertexData_0_.length / 4;
>         int j = i / 2;
>         int[] aint = new int[j * 4];
> 
>         for (int k = 0; k < 4; ++k)
>         {
>             System.arraycopy(p_compactVertexData_0_, k * i, aint, k * j, j);
>         }
> 
>         return aint;
>     }
> 
>     public QuadBounds getQuadBounds()
>     {
>         if (this.quadBounds == null)
>         {
>             this.quadBounds = new QuadBounds(this.getVertexData());
>         }
> 
>         return this.quadBounds;
>     }
> 
>     public float getMidX()
>     {
>         QuadBounds quadbounds = this.getQuadBounds();
>         return (quadbounds.getMaxX() + quadbounds.getMinX()) / 2.0F;
>     }
> 
>     public double getMidY()
>     {
>         QuadBounds quadbounds = this.getQuadBounds();
>         return (double)((quadbounds.getMaxY() + quadbounds.getMinY()) / 2.0F);
>     }
> 
>     public double getMidZ()
>     {
>         QuadBounds quadbounds = this.getQuadBounds();
>         return (double)((quadbounds.getMaxZ() + quadbounds.getMinZ()) / 2.0F);
>     }
> 
>     public boolean isFaceQuad()
>     {
>         QuadBounds quadbounds = this.getQuadBounds();
>         return quadbounds.isFaceQuad(this.face);
>     }
> 
>     public boolean isFullQuad()
>     {
>         QuadBounds quadbounds = this.getQuadBounds();
>         return quadbounds.isFullQuad(this.face);
>     }
> 
>     public boolean isFullFaceQuad()
>     {
>         return this.isFullQuad() && this.isFaceQuad();
>     }
> 
>     public String toString()
>     {
>         return "vertex: " + this.vertexData.length / 7 + ", tint: " + this.tintIndex + ", facing: " + this.face + ", sprite: " + this.sprite;
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/block/model/BakedQuadRetextured.java src\modified/src/minecraft/net/minecraft/client/renderer/block/model/BakedQuadRetextured.java
8a9
>     private final TextureAtlasSprite spriteOld;
12c13
<         super(Arrays.copyOf(quad.getVertexData(), quad.getVertexData().length), quad.tintIndex, FaceBakery.getFacingFromVertexData(quad.getVertexData()), quad.getSprite());
---
>         super(Arrays.copyOf(quad.getVertexData(), quad.getVertexData().length), quad.tintIndex, FaceBakery.getFacingFromVertexData(quad.getVertexData()), textureIn);
13a15,17
>         this.format = quad.format;
>         this.applyDiffuseLighting = quad.applyDiffuseLighting;
>         this.spriteOld = quad.getSprite();
14a19
>         this.fixVertexData();
21,23c26,29
<             int j = 7 * i;
<             this.vertexData[j + 4] = Float.floatToRawIntBits(this.texture.getInterpolatedU((double)this.sprite.getUnInterpolatedU(Float.intBitsToFloat(this.vertexData[j + 4]))));
<             this.vertexData[j + 4 + 1] = Float.floatToRawIntBits(this.texture.getInterpolatedV((double)this.sprite.getUnInterpolatedV(Float.intBitsToFloat(this.vertexData[j + 4 + 1]))));
---
>             int j = this.format.getIntegerSize() * i;
>             int k = this.format.getUvOffsetById(0) / 4;
>             this.vertexData[j + k] = Float.floatToRawIntBits(this.texture.getInterpolatedU((double)this.spriteOld.getUnInterpolatedU(Float.intBitsToFloat(this.vertexData[j + k]))));
>             this.vertexData[j + k + 1] = Float.floatToRawIntBits(this.texture.getInterpolatedV((double)this.spriteOld.getUnInterpolatedV(Float.intBitsToFloat(this.vertexData[j + k + 1]))));
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/block/model/FaceBakery.java src\modified/src/minecraft/net/minecraft/client/renderer/block/model/FaceBakery.java
5a6
> import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
8a10,14
> import net.minecraftforge.common.model.ITransformation;
> import optifine.BlockModelUtils;
> import optifine.Config;
> import optifine.Reflector;
> 
11a18
> import shadersmod.client.Shaders;
48a56
>     	//1.12.__.
66a75,110
>     public BakedQuad makeBakedQuad(Vector3f p_makeBakedQuad_1_, Vector3f p_makeBakedQuad_2_, BlockPartFace p_makeBakedQuad_3_, TextureAtlasSprite p_makeBakedQuad_4_, EnumFacing p_makeBakedQuad_5_, ITransformation p_makeBakedQuad_6_, BlockPartRotation p_makeBakedQuad_7_, boolean p_makeBakedQuad_8_, boolean p_makeBakedQuad_9_)
>     {
>         BlockFaceUV blockfaceuv = p_makeBakedQuad_3_.blockFaceUV;
> 
>         if (p_makeBakedQuad_8_)
>         {
>             if (Reflector.ForgeHooksClient_applyUVLock.exists())
>             {
>                 blockfaceuv = (BlockFaceUV)Reflector.call(Reflector.ForgeHooksClient_applyUVLock, p_makeBakedQuad_3_.blockFaceUV, p_makeBakedQuad_5_, p_makeBakedQuad_6_);
>             }
>             else
>             {
>                 blockfaceuv = this.applyUVLock(p_makeBakedQuad_3_.blockFaceUV, p_makeBakedQuad_5_, (ModelRotation)p_makeBakedQuad_6_);
>             }
>         }
> 
>         boolean flag = p_makeBakedQuad_9_ && !Reflector.ForgeHooksClient_fillNormal.exists();
>         int[] aint = this.makeQuadVertexData(blockfaceuv, p_makeBakedQuad_4_, p_makeBakedQuad_5_, this.getPositionsDiv16(p_makeBakedQuad_1_, p_makeBakedQuad_2_), p_makeBakedQuad_6_, p_makeBakedQuad_7_, flag);
>         EnumFacing enumfacing = getFacingFromVertexData(aint);
> 
>         if (p_makeBakedQuad_7_ == null)
>         {
>             this.applyFacing(aint, enumfacing);
>         }
> 
>         if (Reflector.ForgeHooksClient_fillNormal.exists())
>         {
>             Reflector.call(Reflector.ForgeHooksClient_fillNormal, aint, enumfacing);
>             return new BakedQuad(aint, p_makeBakedQuad_3_.tintIndex, enumfacing, p_makeBakedQuad_4_, p_makeBakedQuad_9_, DefaultVertexFormats.ITEM);
>         }
>         else
>         {
>             return new BakedQuad(aint, p_makeBakedQuad_3_.tintIndex, enumfacing, p_makeBakedQuad_4_);
>         }
>     }
> 
72c116
<     private int[] makeQuadVertexData(BlockFaceUV uvs, TextureAtlasSprite sprite, EnumFacing orientation, float[] p_188012_4_, ModelRotation rotationIn, @Nullable BlockPartRotation partRotation, boolean shade)
---
>     private int[] makeQuadVertexData(BlockFaceUV p_makeQuadVertexData_1_, TextureAtlasSprite p_makeQuadVertexData_2_, EnumFacing p_makeQuadVertexData_3_, float[] p_makeQuadVertexData_4_, ITransformation p_makeQuadVertexData_5_, @Nullable BlockPartRotation p_makeQuadVertexData_6_, boolean p_makeQuadVertexData_7_)
74c118,125
<         int[] aint = new int[28];
---
>         int i = 28;
> 
>         if (Config.isShaders())
>         {
>             i = 56;
>         }
> 
>         int[] aint = new int[i];
76c127
<         for (int i = 0; i < 4; ++i)
---
>         for (int j = 0; j < 4; ++j)
78c129
<             this.fillVertexData(aint, i, orientation, uvs, p_188012_4_, sprite, rotationIn, partRotation, shade);
---
>             this.fillVertexData(aint, j, p_makeQuadVertexData_3_, p_makeQuadVertexData_1_, p_makeQuadVertexData_4_, p_makeQuadVertexData_2_, p_makeQuadVertexData_5_, p_makeQuadVertexData_6_, p_makeQuadVertexData_7_);
86c137
<         float f = this.getFaceBrightness(facing);
---
>         float f = getFaceBrightness(facing);
91c142
<     private float getFaceBrightness(EnumFacing facing)
---
>     public static float getFaceBrightness(EnumFacing p_178412_0_)
93c144
<         switch (facing)
---
>         switch (p_178412_0_)
95a147,151
>                 if (Config.isShaders())
>                 {
>                     return Shaders.blockLightLevel05;
>                 }
> 
102a159,163
>                 if (Config.isShaders())
>                 {
>                     return Shaders.blockLightLevel08;
>                 }
> 
106a168,172
>                 if (Config.isShaders())
>                 {
>                     return Shaders.blockLightLevel06;
>                 }
> 
126c192
<     private void fillVertexData(int[] p_188015_1_, int p_188015_2_, EnumFacing p_188015_3_, BlockFaceUV p_188015_4_, float[] p_188015_5_, TextureAtlasSprite p_188015_6_, ModelRotation p_188015_7_, @Nullable BlockPartRotation p_188015_8_, boolean p_188015_9_)
---
>     private void fillVertexData(int[] p_fillVertexData_1_, int p_fillVertexData_2_, EnumFacing p_fillVertexData_3_, BlockFaceUV p_fillVertexData_4_, float[] p_fillVertexData_5_, TextureAtlasSprite p_fillVertexData_6_, ITransformation p_fillVertexData_7_, @Nullable BlockPartRotation p_fillVertexData_8_, boolean p_fillVertexData_9_)
128,134c194,201
<         EnumFacing enumfacing = p_188015_7_.rotateFace(p_188015_3_);
<         int i = p_188015_9_ ? this.getFaceShadeColor(enumfacing) : -1;
<         EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = EnumFaceDirection.getFacing(p_188015_3_).getVertexInformation(p_188015_2_);
<         Vector3f vector3f = new Vector3f(p_188015_5_[enumfacedirection$vertexinformation.xIndex], p_188015_5_[enumfacedirection$vertexinformation.yIndex], p_188015_5_[enumfacedirection$vertexinformation.zIndex]);
<         this.rotatePart(vector3f, p_188015_8_);
<         int j = this.rotateVertex(vector3f, p_188015_3_, p_188015_2_, p_188015_7_);
<         this.storeVertexData(p_188015_1_, j, p_188015_2_, vector3f, i, p_188015_6_, p_188015_4_);
---
>         EnumFacing enumfacing = p_fillVertexData_7_.rotate(p_fillVertexData_3_);
>         int i = p_fillVertexData_9_ ? this.getFaceShadeColor(enumfacing) : -1;
>         EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = EnumFaceDirection.getFacing(p_fillVertexData_3_).getVertexInformation(p_fillVertexData_2_);
>         Vector3f vector3f = new Vector3f(p_fillVertexData_5_[enumfacedirection$vertexinformation.xIndex], p_fillVertexData_5_[enumfacedirection$vertexinformation.yIndex], p_fillVertexData_5_[enumfacedirection$vertexinformation.zIndex]);
>         this.rotatePart(vector3f, p_fillVertexData_8_);
>         int j = this.rotateVertex(vector3f, p_fillVertexData_3_, p_fillVertexData_2_, p_fillVertexData_7_);
>         BlockModelUtils.snapVertexPosition(vector3f);
>         this.storeVertexData(p_fillVertexData_1_, j, p_fillVertexData_2_, vector3f, i, p_fillVertexData_6_, p_fillVertexData_4_);
139,145c206,213
<         int i = storeIndex * 7;
<         faceData[i] = Float.floatToRawIntBits(position.x);
<         faceData[i + 1] = Float.floatToRawIntBits(position.y);
<         faceData[i + 2] = Float.floatToRawIntBits(position.z);
<         faceData[i + 3] = shadeColor;
<         faceData[i + 4] = Float.floatToRawIntBits(sprite.getInterpolatedU((double)faceUV.getVertexU(vertexIndex)));
<         faceData[i + 4 + 1] = Float.floatToRawIntBits(sprite.getInterpolatedV((double)faceUV.getVertexV(vertexIndex)));
---
>         int i = faceData.length / 4;
>         int j = storeIndex * i;
>         faceData[j] = Float.floatToRawIntBits(position.x);
>         faceData[j + 1] = Float.floatToRawIntBits(position.y);
>         faceData[j + 2] = Float.floatToRawIntBits(position.z);
>         faceData[j + 3] = shadeColor;
>         faceData[j + 4] = Float.floatToRawIntBits(sprite.getInterpolatedU((double)faceUV.getVertexU(vertexIndex) * 0.999D + (double)faceUV.getVertexU((vertexIndex + 2) % 4) * 0.001D));
>         faceData[j + 4 + 1] = Float.floatToRawIntBits(sprite.getInterpolatedV((double)faceUV.getVertexV(vertexIndex) * 0.999D + (double)faceUV.getVertexV((vertexIndex + 2) % 4) * 0.001D));
196c264,269
<         if (p_188011_4_ == ModelRotation.X0_Y0)
---
>         return this.rotateVertex(p_188011_1_, p_188011_2_, p_188011_3_, p_188011_4_);
>     }
> 
>     public int rotateVertex(Vector3f p_rotateVertex_1_, EnumFacing p_rotateVertex_2_, int p_rotateVertex_3_, ITransformation p_rotateVertex_4_)
>     {
>         if (p_rotateVertex_4_ == ModelRotation.X0_Y0)
198c271
<             return p_188011_3_;
---
>             return p_rotateVertex_3_;
202,203c275,284
<             this.rotateScale(p_188011_1_, new Vector3f(0.5F, 0.5F, 0.5F), p_188011_4_.getMatrix4d(), new Vector3f(1.0F, 1.0F, 1.0F));
<             return p_188011_4_.rotateVertex(p_188011_2_, p_188011_3_);
---
>             if (Reflector.ForgeHooksClient_transform.exists())
>             {
>                 Reflector.call(Reflector.ForgeHooksClient_transform, p_rotateVertex_1_, p_rotateVertex_4_.getMatrix());
>             }
>             else
>             {
>                 this.rotateScale(p_rotateVertex_1_, new Vector3f(0.5F, 0.5F, 0.5F), ((ModelRotation)p_rotateVertex_4_).getMatrix4d(), new Vector3f(1.0F, 1.0F, 1.0F));
>             }
> 
>             return p_rotateVertex_4_.rotate(p_rotateVertex_2_, p_rotateVertex_3_);
225a307,308
>         int i = faceData.length / 4;
>         int j = i * 2;
227,228c310,311
<         Vector3f vector3f1 = new Vector3f(Float.intBitsToFloat(faceData[7]), Float.intBitsToFloat(faceData[8]), Float.intBitsToFloat(faceData[9]));
<         Vector3f vector3f2 = new Vector3f(Float.intBitsToFloat(faceData[14]), Float.intBitsToFloat(faceData[15]), Float.intBitsToFloat(faceData[16]));
---
>         Vector3f vector3f1 = new Vector3f(Float.intBitsToFloat(faceData[i]), Float.intBitsToFloat(faceData[i + 1]), Float.intBitsToFloat(faceData[i + 2]));
>         Vector3f vector3f2 = new Vector3f(Float.intBitsToFloat(faceData[j]), Float.intBitsToFloat(faceData[j + 1]), Float.intBitsToFloat(faceData[j + 2]));
275a359
>         int i = p_178408_1_.length / 4;
277c361
<         for (int i = 0; i < 4; ++i)
---
>         for (int j = 0; j < 4; ++j)
279,282c363,366
<             int j = 7 * i;
<             float f = Float.intBitsToFloat(aint[j]);
<             float f1 = Float.intBitsToFloat(aint[j + 1]);
<             float f2 = Float.intBitsToFloat(aint[j + 2]);
---
>             int k = i * j;
>             float f = Float.intBitsToFloat(aint[k]);
>             float f1 = Float.intBitsToFloat(aint[k + 1]);
>             float f2 = Float.intBitsToFloat(aint[k + 2]);
317c401
<         for (int i1 = 0; i1 < 4; ++i1)
---
>         for (int j1 = 0; j1 < 4; ++j1)
319,320c403,404
<             int j1 = 7 * i1;
<             EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = enumfacedirection.getVertexInformation(i1);
---
>             int k1 = i * j1;
>             EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = enumfacedirection.getVertexInformation(j1);
324,333c408,417
<             p_178408_1_[j1] = Float.floatToRawIntBits(f8);
<             p_178408_1_[j1 + 1] = Float.floatToRawIntBits(f3);
<             p_178408_1_[j1 + 2] = Float.floatToRawIntBits(f4);
< 
<             for (int k = 0; k < 4; ++k)
<             {
<                 int l = 7 * k;
<                 float f5 = Float.intBitsToFloat(aint[l]);
<                 float f6 = Float.intBitsToFloat(aint[l + 1]);
<                 float f7 = Float.intBitsToFloat(aint[l + 2]);
---
>             p_178408_1_[k1] = Float.floatToRawIntBits(f8);
>             p_178408_1_[k1 + 1] = Float.floatToRawIntBits(f3);
>             p_178408_1_[k1 + 2] = Float.floatToRawIntBits(f4);
> 
>             for (int l = 0; l < 4; ++l)
>             {
>                 int i1 = i * l;
>                 float f5 = Float.intBitsToFloat(aint[i1]);
>                 float f6 = Float.intBitsToFloat(aint[i1 + 1]);
>                 float f7 = Float.intBitsToFloat(aint[i1 + 2]);
337,338c421,422
<                     p_178408_1_[j1 + 4] = aint[l + 4];
<                     p_178408_1_[j1 + 4 + 1] = aint[l + 4 + 1];
---
>                     p_178408_1_[k1 + 4] = aint[i1 + 4];
>                     p_178408_1_[k1 + 4 + 1] = aint[i1 + 4 + 1];
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/block/model/ModelBakery.java src\modified/src/minecraft/net/minecraft/client/renderer/block/model/ModelBakery.java
44a45,52
> import net.minecraftforge.common.model.ITransformation;
> import net.minecraftforge.common.model.TRSRTransformation;
> import net.minecraftforge.registries.IRegistryDelegate;
> import optifine.CustomItems;
> import optifine.Reflector;
> import optifine.StrUtils;
> import optifine.TextureUtils;
> 
72a81
>     private static Map<IRegistryDelegate<Item>, Set<String>> customVariantNames = Maps.<IRegistryDelegate<Item>, Set<String>>newHashMap();
99c108
<             for (final ResourceLocation resourcelocation : blockstatemapper.getBlockstateLocations(block))
---
>             for (ResourceLocation resourcelocation : blockstatemapper.getBlockstateLocations(block))
103,104c112,120
<                     ModelBlockDefinition modelblockdefinition = this.getModelBlockDefinition(resourcelocation);
<                     Map<IBlockState, ModelResourceLocation> map = blockstatemapper.getVariants(block);
---
>                     this.loadBlock(blockstatemapper, block, resourcelocation);
>                 }
>                 catch (Exception exception)
>                 {
>                     LOGGER.warn("Unable to load definition " + resourcelocation, (Throwable)exception);
>                 }
>             }
>         }
>     }
106,110c122,125
<                     if (modelblockdefinition.hasMultipartData())
<                     {
<                         Collection<ModelResourceLocation> collection = Sets.newHashSet(map.values());
<                         modelblockdefinition.getMultipartData().setStateContainer(block.getBlockState());
<                         Collection<ModelResourceLocation> collection1 = (Collection)this.multipartVariantMap.get(modelblockdefinition);
---
>     protected void loadBlock(BlockStateMapper p_loadBlock_1_, Block p_loadBlock_2_, final ResourceLocation p_loadBlock_3_)
>     {
>         ModelBlockDefinition modelblockdefinition = this.getModelBlockDefinition(p_loadBlock_3_);
>         Map<IBlockState, ModelResourceLocation> map = p_loadBlock_1_.getVariants(p_loadBlock_2_);
112,116c127,131
<                         if (collection1 == null)
<                         {
<                             collection1 = Lists.<ModelResourceLocation>newArrayList();
<                             this.multipartVariantMap.put(modelblockdefinition, collection1);
<                         }
---
>         if (modelblockdefinition.hasMultipartData())
>         {
>             Collection<ModelResourceLocation> collection = Sets.newHashSet(map.values());
>             modelblockdefinition.getMultipartData().setStateContainer(p_loadBlock_2_.getBlockState());
>             Collection<ModelResourceLocation> collection1 = (Collection)this.multipartVariantMap.get(modelblockdefinition);
118,125c133,136
<                         collection1.addAll(Lists.newArrayList(Iterables.filter(collection, new Predicate<ModelResourceLocation>()
<                         {
<                             public boolean apply(@Nullable ModelResourceLocation p_apply_1_)
<                             {
<                                 return resourcelocation.equals(p_apply_1_);
<                             }
<                         })));
<                     }
---
>             if (collection1 == null)
>             {
>                 collection1 = Lists.<ModelResourceLocation>newArrayList();
>             }
127,129c138,146
<                     for (Entry<IBlockState, ModelResourceLocation> entry : map.entrySet())
<                     {
<                         ModelResourceLocation modelresourcelocation = entry.getValue();
---
>             collection1.addAll(Lists.newArrayList(Iterables.filter(collection, new Predicate<ModelResourceLocation>()
>             {
>                 public boolean apply(@Nullable ModelResourceLocation p_apply_1_)
>                 {
>                     return p_loadBlock_3_.equals(p_apply_1_);
>                 }
>             })));
>             this.registerMultipartVariant(modelblockdefinition, collection1);
>         }
131,144c148,162
<                         if (resourcelocation.equals(modelresourcelocation))
<                         {
<                             try
<                             {
<                                 this.variants.put(modelresourcelocation, modelblockdefinition.getVariant(modelresourcelocation.getVariant()));
<                             }
<                             catch (RuntimeException var12)
<                             {
<                                 if (!modelblockdefinition.hasMultipartData())
<                                 {
<                                     LOGGER.warn("Unable to load variant: {} from {}", modelresourcelocation.getVariant(), modelresourcelocation);
<                                 }
<                             }
<                         }
---
>         for (Entry<IBlockState, ModelResourceLocation> entry : map.entrySet())
>         {
>             ModelResourceLocation modelresourcelocation = entry.getValue();
> 
>             if (p_loadBlock_3_.equals(modelresourcelocation))
>             {
>                 try
>                 {
>                     if (Reflector.ForgeItem_delegate.exists())
>                     {
>                         this.registerVariant(modelblockdefinition, modelresourcelocation);
>                     }
>                     else
>                     {
>                         this.variants.put(modelresourcelocation, modelblockdefinition.getVariant(modelresourcelocation.getVariant()));
147c165
<                 catch (Exception exception)
---
>                 catch (RuntimeException runtimeexception)
149c167,170
<                     LOGGER.warn("Unable to load definition {}", resourcelocation, exception);
---
>                     if (!modelblockdefinition.hasMultipartData())
>                     {
>                         LOGGER.warn("Unable to load variant: " + modelresourcelocation.getVariant() + " from " + modelresourcelocation, (Throwable)runtimeexception);
>                     }
161a183,184
>         CustomItems.update();
>         CustomItems.loadModels(this);
223c246
<         ModelBlockDefinition lvt_4_1_;
---
>         ModelBlockDefinition modelblockdefinition;
228c251,259
<             lvt_4_1_ = ModelBlockDefinition.parseFromReader(new InputStreamReader(inputstream, StandardCharsets.UTF_8));
---
> 
>             if (Reflector.ForgeModelBlockDefinition_parseFromReader2.exists())
>             {
>                 modelblockdefinition = (ModelBlockDefinition)Reflector.call(Reflector.ForgeModelBlockDefinition_parseFromReader2, new InputStreamReader(inputstream, StandardCharsets.UTF_8), location);
>             }
>             else
>             {
>                 modelblockdefinition = ModelBlockDefinition.parseFromReader(new InputStreamReader(inputstream, StandardCharsets.UTF_8));
>             }
239c270
<         return lvt_4_1_;
---
>         return modelblockdefinition;
292c323
<         ModelBlock lvt_5_2_;
---
>         ModelBlock modelblock1;
298c329
<             if (!"builtin/generated".equals(s))
---
>             if ("builtin/generated".equals(s))
300,304c331,333
<                 if ("builtin/entity".equals(s))
<                 {
<                     lvt_5_2_ = MODEL_ENTITY;
<                     return lvt_5_2_;
<                 }
---
>                 ModelBlock modelblock4 = MODEL_GENERATED;
>                 return modelblock4;
>             }
305a335,336
>             if (!"builtin/entity".equals(s))
>             {
320c351,352
<                     iresource = this.resourceManager.getResource(this.getModelLocation(location));
---
>                     location = this.getModelLocation(location);
>                     iresource = this.resourceManager.getResource(location);
324,327c356,361
<                 lvt_5_2_ = ModelBlock.deserialize(reader);
<                 lvt_5_2_.name = location.toString();
<                 ModelBlock modelblock1 = lvt_5_2_;
<                 return modelblock1;
---
>                 ModelBlock modelblock3 = ModelBlock.deserialize(reader);
>                 modelblock3.name = location.toString();
>                 String s3 = TextureUtils.getBasePath(location.getResourcePath());
>                 fixModelLocations(modelblock3, s3);
>                 ModelBlock modelblock2 = modelblock3;
>                 return modelblock2;
330c364,365
<             lvt_5_2_ = MODEL_GENERATED;
---
>             ModelBlock modelblock = MODEL_ENTITY;
>             modelblock1 = modelblock;
338c373
<         return lvt_5_2_;
---
>         return modelblock1;
343c378,392
<         return new ResourceLocation(location.getResourceDomain(), "models/" + location.getResourcePath() + ".json");
---
>         String s = location.getResourcePath();
> 
>         if (!s.startsWith("mcpatcher") && !s.startsWith("optifine"))
>         {
>             return new ResourceLocation(location.getResourceDomain(), "models/" + location.getResourcePath() + ".json");
>         }
>         else
>         {
>             if (!s.endsWith(".json"))
>             {
>                 location = new ResourceLocation(location.getResourceDomain(), s + ".json");
>             }
> 
>             return location;
>         }
374c423
<     private void loadItemModel(String variantName, ResourceLocation location, ResourceLocation itemName)
---
>     public void loadItemModel(String variantName, ResourceLocation location, ResourceLocation itemName)
385c434
<             catch (Exception exception)
---
>             catch (Exception exception1)
387c436,437
<                 LOGGER.warn("Unable to load item model: '{}' for item: '{}'", location, itemName, exception);
---
>                 LOGGER.warn("Unable to load item model: '{}' for item: '{}'", location, itemName);
>                 LOGGER.warn(exception1.getClass().getName() + ": " + exception1.getMessage());
393a444
>         this.variantNames.clear();
440a492,496
> 
>         for (Entry<IRegistryDelegate<Item>, Set<String>> entry : customVariantNames.entrySet())
>         {
>             this.variantNames.put((entry.getKey()).get(), Lists.newArrayList((entry.getValue()).iterator()));
>         }
457a514,519
> 
>         if (Reflector.ForgeHooksClient.exists())
>         {
>             resourcelocation = new ResourceLocation(location.replaceAll("#.*", ""));
>         }
> 
565a628,633
> 
>             if (Reflector.ForgeHooksClient.exists())
>             {
>                 modelresourcelocation = (ModelResourceLocation)Reflector.call(Reflector.ModelLoader_getInventoryVariant, entry.getKey());
>             }
> 
651c719
<     private IBakedModel bakeModel(ModelBlock modelBlockIn, ModelRotation modelRotationIn, boolean uvLocked)
---
>     public IBakedModel bakeModel(ModelBlock modelBlockIn, ModelRotation modelRotationIn, boolean uvLocked)
653,654c721,756
<         TextureAtlasSprite textureatlassprite = this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName("particle")));
<         SimpleBakedModel.Builder simplebakedmodel$builder = (new SimpleBakedModel.Builder(modelBlockIn, modelBlockIn.createOverrides())).setTexture(textureatlassprite);
---
>     	//1.12.__.
>       	 TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName("particle")));
>            SimpleBakedModel.Builder simplebakedmodel$builder = (new SimpleBakedModel.Builder(modelBlockIn, modelBlockIn.createOverrides())).setTexture(textureatlassprite);
> 
>            if (modelBlockIn.getElements().isEmpty())
>            {
>                return null;
>            }
>            else
>            {
>                for (BlockPart blockpart : modelBlockIn.getElements())
>                {
>                    for (EnumFacing enumfacing : blockpart.mapFaces.keySet())
>                    {
>                        BlockPartFace blockpartface = (BlockPartFace)blockpart.mapFaces.get(enumfacing);
>                        TextureAtlasSprite textureatlassprite1 = (TextureAtlasSprite)this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName(blockpartface.texture)));
> 
>                        if (blockpartface.cullFace == null)
>                        {
>                            simplebakedmodel$builder.addGeneralQuad(this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked));
>                        }
>                        else
>                        {
>                            simplebakedmodel$builder.addFaceQuad(modelRotationIn.rotateFace(blockpartface.cullFace), this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked));
>                        }
>                    }
>                }
> 
>                return simplebakedmodel$builder.makeBakedModel();
>            }
>     }
> 
>     protected IBakedModel bakeModel(ModelBlock p_bakeModel_1_, ITransformation p_bakeModel_2_, boolean p_bakeModel_3_)
>     {
>         TextureAtlasSprite textureatlassprite = this.sprites.get(new ResourceLocation(p_bakeModel_1_.resolveTextureName("particle")));
>         SimpleBakedModel.Builder simplebakedmodel$builder = (new SimpleBakedModel.Builder(p_bakeModel_1_, p_bakeModel_1_.createOverrides())).setTexture(textureatlassprite);
656c758
<         if (modelBlockIn.getElements().isEmpty())
---
>         if (p_bakeModel_1_.getElements().isEmpty())
662c764
<             for (BlockPart blockpart : modelBlockIn.getElements())
---
>             for (BlockPart blockpart : p_bakeModel_1_.getElements())
667c769,775
<                     TextureAtlasSprite textureatlassprite1 = this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName(blockpartface.texture)));
---
>                     TextureAtlasSprite textureatlassprite1 = this.sprites.get(new ResourceLocation(p_bakeModel_1_.resolveTextureName(blockpartface.texture)));
>                     boolean flag = true;
> 
>                     if (Reflector.ForgeHooksClient.exists())
>                     {
>                         flag = TRSRTransformation.isInteger(p_bakeModel_2_.getMatrix());
>                     }
669c777
<                     if (blockpartface.cullFace == null)
---
>                     if (blockpartface.cullFace != null && flag)
671c779
<                         simplebakedmodel$builder.addGeneralQuad(this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked));
---
>                         simplebakedmodel$builder.addFaceQuad(p_bakeModel_2_.rotate(blockpartface.cullFace), this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, p_bakeModel_2_, p_bakeModel_3_));
675c783
<                         simplebakedmodel$builder.addFaceQuad(modelRotationIn.rotateFace(blockpartface.cullFace), this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked));
---
>                         simplebakedmodel$builder.addGeneralQuad(this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, p_bakeModel_2_, p_bakeModel_3_));
686c794,799
<         return this.faceBakery.makeBakedQuad(p_177589_1_.positionFrom, p_177589_1_.positionTo, p_177589_2_, p_177589_3_, p_177589_4_, p_177589_5_, p_177589_1_.partRotation, p_177589_6_, p_177589_1_.shade);
---
>         return Reflector.ForgeHooksClient.exists() ? this.makeBakedQuad(p_177589_1_, p_177589_2_, p_177589_3_, p_177589_4_, p_177589_5_, p_177589_6_) : this.faceBakery.makeBakedQuad(p_177589_1_.positionFrom, p_177589_1_.positionTo, p_177589_2_, p_177589_3_, p_177589_4_, p_177589_5_, p_177589_1_.partRotation, p_177589_6_, p_177589_1_.shade);
>     }
> 
>     protected BakedQuad makeBakedQuad(BlockPart p_makeBakedQuad_1_, BlockPartFace p_makeBakedQuad_2_, TextureAtlasSprite p_makeBakedQuad_3_, EnumFacing p_makeBakedQuad_4_, ITransformation p_makeBakedQuad_5_, boolean p_makeBakedQuad_6_)
>     {
>         return this.faceBakery.makeBakedQuad(p_makeBakedQuad_1_.positionFrom, p_makeBakedQuad_1_.positionTo, p_makeBakedQuad_2_, p_makeBakedQuad_3_, p_makeBakedQuad_4_, p_makeBakedQuad_5_, p_makeBakedQuad_1_.partRotation, p_makeBakedQuad_6_, p_makeBakedQuad_1_.shade);
727c840
<             catch (Exception exception)
---
>             catch (Exception var5)
729c842
<                 LOGGER.warn("In parent chain: {}; unable to load model: '{}'", JOINER.join(this.getParentPath(resourcelocation1)), resourcelocation1, exception);
---
>                 LOGGER.warn("In parent chain: {}; unable to load model: '{}'", JOINER.join(this.getParentPath(resourcelocation1)), resourcelocation1);
909a1023,1107
>     public ModelBlock getModelBlock(ResourceLocation p_getModelBlock_1_)
>     {
>         ModelBlock modelblock = this.models.get(p_getModelBlock_1_);
>         return modelblock;
>     }
> 
>     public static void fixModelLocations(ModelBlock p_fixModelLocations_0_, String p_fixModelLocations_1_)
>     {
>         ResourceLocation resourcelocation = fixModelLocation(p_fixModelLocations_0_.parentLocation, p_fixModelLocations_1_);
> 
>         if (resourcelocation != p_fixModelLocations_0_.parentLocation)
>         {
>             p_fixModelLocations_0_.parentLocation = resourcelocation;
>         }
> 
>         if (p_fixModelLocations_0_.textures != null)
>         {
>             for (Entry<String, String> entry : p_fixModelLocations_0_.textures.entrySet())
>             {
>                 String s = entry.getValue();
>                 String s1 = fixResourcePath(s, p_fixModelLocations_1_);
> 
>                 if (s1 != s)
>                 {
>                     entry.setValue(s1);
>                 }
>             }
>         }
>     }
> 
>     public static ResourceLocation fixModelLocation(ResourceLocation p_fixModelLocation_0_, String p_fixModelLocation_1_)
>     {
>         if (p_fixModelLocation_0_ != null && p_fixModelLocation_1_ != null)
>         {
>             if (!p_fixModelLocation_0_.getResourceDomain().equals("minecraft"))
>             {
>                 return p_fixModelLocation_0_;
>             }
>             else
>             {
>                 String s = p_fixModelLocation_0_.getResourcePath();
>                 String s1 = fixResourcePath(s, p_fixModelLocation_1_);
> 
>                 if (s1 != s)
>                 {
>                     p_fixModelLocation_0_ = new ResourceLocation(p_fixModelLocation_0_.getResourceDomain(), s1);
>                 }
> 
>                 return p_fixModelLocation_0_;
>             }
>         }
>         else
>         {
>             return p_fixModelLocation_0_;
>         }
>     }
> 
>     private static String fixResourcePath(String p_fixResourcePath_0_, String p_fixResourcePath_1_)
>     {
>         p_fixResourcePath_0_ = TextureUtils.fixResourcePath(p_fixResourcePath_0_, p_fixResourcePath_1_);
>         p_fixResourcePath_0_ = StrUtils.removeSuffix(p_fixResourcePath_0_, ".json");
>         p_fixResourcePath_0_ = StrUtils.removeSuffix(p_fixResourcePath_0_, ".png");
>         return p_fixResourcePath_0_;
>     }
> 
>     protected void registerMultipartVariant(ModelBlockDefinition p_registerMultipartVariant_1_, Collection<ModelResourceLocation> p_registerMultipartVariant_2_)
>     {
>         this.multipartVariantMap.put(p_registerMultipartVariant_1_, p_registerMultipartVariant_2_);
>     }
> 
>     public static void registerItemVariants(Item p_registerItemVariants_0_, ResourceLocation... p_registerItemVariants_1_)
>     {
>         IRegistryDelegate iregistrydelegate = (IRegistryDelegate)Reflector.getFieldValue(p_registerItemVariants_0_, Reflector.ForgeItem_delegate);
> 
>         if (!customVariantNames.containsKey(iregistrydelegate))
>         {
>             customVariantNames.put(iregistrydelegate, Sets.newHashSet());
>         }
> 
>         for (ResourceLocation resourcelocation : p_registerItemVariants_1_)
>         {
>             (customVariantNames.get(iregistrydelegate)).add(resourcelocation.toString());
>         }
>     }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/block/model/ModelRotation.java src\modified/src/minecraft/net/minecraft/client/renderer/block/model/ModelRotation.java
4a5,6
> import java.util.Optional;
> 
6a9,14
> import net.minecraftforge.common.model.IModelPart;
> import net.minecraftforge.common.model.IModelState;
> import net.minecraftforge.common.model.ITransformation;
> import net.minecraftforge.common.model.TRSRTransformation;
> import optifine.Reflector;
> 
10c18
< public enum ModelRotation
---
> public enum ModelRotation implements IModelState, ITransformation
108a117,136
>     public Optional<TRSRTransformation> apply(Optional <? extends IModelPart > p_apply_1_)
>     {
>         return (Optional)Reflector.call(Reflector.ForgeHooksClient_applyTransform, this.getMatrix(), p_apply_1_);
>     }
> 
>     public javax.vecmath.Matrix4f getMatrix()
>     {
>         return Reflector.ForgeHooksClient_getMatrix.exists() ? (javax.vecmath.Matrix4f)Reflector.call(Reflector.ForgeHooksClient_getMatrix, this) : new javax.vecmath.Matrix4f();
>     }
> 
>     public EnumFacing rotate(EnumFacing p_rotate_1_)
>     {
>         return this.rotateFace(p_rotate_1_);
>     }
> 
>     public int rotate(EnumFacing p_rotate_1_, int p_rotate_2_)
>     {
>         return this.rotateVertex(p_rotate_1_, p_rotate_2_);
>     }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/BlockFluidRenderer.java src\modified/src/minecraft/net/minecraft/client/renderer/BlockFluidRenderer.java
4a5
> import net.minecraft.block.BlockSlab;
15a17,20
> import optifine.Config;
> import optifine.CustomColors;
> import optifine.RenderEnv;
> import shadersmod.client.SVertexBuilder;
42,51c47
<         BlockLiquid blockliquid = (BlockLiquid)blockStateIn.getBlock();
<         boolean flag = blockStateIn.getMaterial() == Material.LAVA;
<         TextureAtlasSprite[] atextureatlassprite = flag ? this.atlasSpritesLava : this.atlasSpritesWater;
<         int i = this.blockColors.colorMultiplier(blockStateIn, blockAccess, blockPosIn, 0);
<         float f = (float)(i >> 16 & 255) / 255.0F;
<         float f1 = (float)(i >> 8 & 255) / 255.0F;
<         float f2 = (float)(i & 255) / 255.0F;
<         boolean flag1 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.UP);
<         boolean flag2 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.DOWN);
<         boolean[] aboolean = new boolean[] {blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.NORTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.SOUTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.WEST), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.EAST)};
---
>         boolean flag3;
53c49
<         if (!flag1 && !flag2 && !aboolean[0] && !aboolean[1] && !aboolean[2] && !aboolean[3])
---
>         try
55,74c51
<             return false;
<         }
<         else
<         {
<             boolean flag3 = false;
<             float f3 = 0.5F;
<             float f4 = 1.0F;
<             float f5 = 0.8F;
<             float f6 = 0.6F;
<             Material material = blockStateIn.getMaterial();
<             float f7 = this.getFluidHeight(blockAccess, blockPosIn, material);
<             float f8 = this.getFluidHeight(blockAccess, blockPosIn.south(), material);
<             float f9 = this.getFluidHeight(blockAccess, blockPosIn.east().south(), material);
<             float f10 = this.getFluidHeight(blockAccess, blockPosIn.east(), material);
<             double d0 = (double)blockPosIn.getX();
<             double d1 = (double)blockPosIn.getY();
<             double d2 = (double)blockPosIn.getZ();
<             float f11 = 0.001F;
< 
<             if (flag1)
---
>             if (Config.isShaders())
76,135c53
<                 flag3 = true;
<                 float f12 = BlockLiquid.getSlopeAngle(blockAccess, blockPosIn, material, blockStateIn);
<                 TextureAtlasSprite textureatlassprite = f12 > -999.0F ? atextureatlassprite[1] : atextureatlassprite[0];
<                 f7 -= 0.001F;
<                 f8 -= 0.001F;
<                 f9 -= 0.001F;
<                 f10 -= 0.001F;
<                 float f13;
<                 float f14;
<                 float f15;
<                 float f16;
<                 float f17;
<                 float f18;
<                 float f19;
<                 float f20;
< 
<                 if (f12 < -999.0F)
<                 {
<                     f13 = textureatlassprite.getInterpolatedU(0.0D);
<                     f17 = textureatlassprite.getInterpolatedV(0.0D);
<                     f14 = f13;
<                     f18 = textureatlassprite.getInterpolatedV(16.0D);
<                     f15 = textureatlassprite.getInterpolatedU(16.0D);
<                     f19 = f18;
<                     f16 = f15;
<                     f20 = f17;
<                 }
<                 else
<                 {
<                     float f21 = MathHelper.sin(f12) * 0.25F;
<                     float f22 = MathHelper.cos(f12) * 0.25F;
<                     float f23 = 8.0F;
<                     f13 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 - f21) * 16.0F));
<                     f17 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 + f21) * 16.0F));
<                     f14 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 + f21) * 16.0F));
<                     f18 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 + f21) * 16.0F));
<                     f15 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 + f21) * 16.0F));
<                     f19 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 - f21) * 16.0F));
<                     f16 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 - f21) * 16.0F));
<                     f20 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 - f21) * 16.0F));
<                 }
< 
<                 int k2 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn);
<                 int l2 = k2 >> 16 & 65535;
<                 int i3 = k2 & 65535;
<                 float f24 = 1.0F * f;
<                 float f25 = 1.0F * f1;
<                 float f26 = 1.0F * f2;
<                 worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
<                 worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
<                 worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
<                 worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
< 
<                 if (blockliquid.shouldRenderSides(blockAccess, blockPosIn.up()))
<                 {
<                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
<                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
<                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
<                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
<                 }
---
>                 SVertexBuilder.pushEntity(blockStateIn, blockPosIn, blockAccess, worldRendererIn);
138,152c56,70
<             if (flag2)
<             {
<                 float f35 = atextureatlassprite[0].getMinU();
<                 float f36 = atextureatlassprite[0].getMaxU();
<                 float f37 = atextureatlassprite[0].getMinV();
<                 float f38 = atextureatlassprite[0].getMaxV();
<                 int l1 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn.down());
<                 int i2 = l1 >> 16 & 65535;
<                 int j2 = l1 & 65535;
<                 worldRendererIn.pos(d0, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f38).lightmap(i2, j2).endVertex();
<                 worldRendererIn.pos(d0, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f37).lightmap(i2, j2).endVertex();
<                 worldRendererIn.pos(d0 + 1.0D, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f37).lightmap(i2, j2).endVertex();
<                 worldRendererIn.pos(d0 + 1.0D, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f38).lightmap(i2, j2).endVertex();
<                 flag3 = true;
<             }
---
>             BlockLiquid blockliquid = (BlockLiquid)blockStateIn.getBlock();
>             boolean flag = blockStateIn.getMaterial() == Material.LAVA;
>             TextureAtlasSprite[] atextureatlassprite = flag ? this.atlasSpritesLava : this.atlasSpritesWater;
>             RenderEnv renderenv = worldRendererIn.getRenderEnv(blockAccess, blockStateIn, blockPosIn);
>             int i = CustomColors.getFluidColor(blockAccess, blockStateIn, blockPosIn, renderenv);
>             float f = (float)(i >> 16 & 255) / 255.0F;
>             float f1 = (float)(i >> 8 & 255) / 255.0F;
>             float f2 = (float)(i & 255) / 255.0F;
>             boolean flag1 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.UP);
>             boolean flag2 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.DOWN);
>             boolean[] aboolean = renderenv.getBorderFlags();
>             aboolean[0] = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.NORTH);
>             aboolean[1] = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.SOUTH);
>             aboolean[2] = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.WEST);
>             aboolean[3] = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.EAST);
154c72
<             for (int i1 = 0; i1 < 4; ++i1)
---
>             if (flag1 || flag2 || aboolean[0] || aboolean[1] || aboolean[2] || aboolean[3])
156,157c74,87
<                 int j1 = 0;
<                 int k1 = 0;
---
>                 flag3 = false;
>                 float f3 = 0.5F;
>                 float f4 = 1.0F;
>                 float f5 = 0.8F;
>                 float f6 = 0.6F;
>                 Material material = blockStateIn.getMaterial();
>                 float f7 = this.getFluidHeight(blockAccess, blockPosIn, material);
>                 float f8 = this.getFluidHeight(blockAccess, blockPosIn.south(), material);
>                 float f9 = this.getFluidHeight(blockAccess, blockPosIn.east().south(), material);
>                 float f10 = this.getFluidHeight(blockAccess, blockPosIn.east(), material);
>                 double d0 = (double)blockPosIn.getX();
>                 double d1 = (double)blockPosIn.getY();
>                 double d2 = (double)blockPosIn.getZ();
>                 float f11 = 0.001F;
159c89
<                 if (i1 == 0)
---
>                 if (flag1)
161,162c91,106
<                     --k1;
<                 }
---
>                     flag3 = true;
>                     float f12 = BlockLiquid.getSlopeAngle(blockAccess, blockPosIn, material, blockStateIn);
>                     TextureAtlasSprite textureatlassprite = f12 > -999.0F ? atextureatlassprite[1] : atextureatlassprite[0];
>                     worldRendererIn.setSprite(textureatlassprite);
>                     f7 -= 0.001F;
>                     f8 -= 0.001F;
>                     f9 -= 0.001F;
>                     f10 -= 0.001F;
>                     float f13;
>                     float f14;
>                     float f15;
>                     float f16;
>                     float f17;
>                     float f18;
>                     float f19;
>                     float f20;
164,167c108,132
<                 if (i1 == 1)
<                 {
<                     ++k1;
<                 }
---
>                     if (f12 < -999.0F)
>                     {
>                         f13 = textureatlassprite.getInterpolatedU(0.0D);
>                         f17 = textureatlassprite.getInterpolatedV(0.0D);
>                         f14 = f13;
>                         f18 = textureatlassprite.getInterpolatedV(16.0D);
>                         f15 = textureatlassprite.getInterpolatedU(16.0D);
>                         f19 = f18;
>                         f16 = f15;
>                         f20 = f17;
>                     }
>                     else
>                     {
>                         float f21 = MathHelper.sin(f12) * 0.25F;
>                         float f22 = MathHelper.cos(f12) * 0.25F;
>                         float f23 = 8.0F;
>                         f13 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 - f21) * 16.0F));
>                         f17 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 + f21) * 16.0F));
>                         f14 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 + f21) * 16.0F));
>                         f18 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 + f21) * 16.0F));
>                         f15 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 + f21) * 16.0F));
>                         f19 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 - f21) * 16.0F));
>                         f16 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 - f21) * 16.0F));
>                         f20 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 - f21) * 16.0F));
>                     }
169,172c134,143
<                 if (i1 == 2)
<                 {
<                     --j1;
<                 }
---
>                     int k2 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn);
>                     int l2 = k2 >> 16 & 65535;
>                     int i3 = k2 & 65535;
>                     float f24 = 1.0F * f;
>                     float f25 = 1.0F * f1;
>                     float f26 = 1.0F * f2;
>                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
>                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
>                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
>                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
174,176c145,151
<                 if (i1 == 3)
<                 {
<                     ++j1;
---
>                     if (blockliquid.shouldRenderSides(blockAccess, blockPosIn.up()))
>                     {
>                         worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
>                         worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
>                         worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
>                         worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
>                     }
179,182c154
<                 BlockPos blockpos = blockPosIn.add(j1, 0, k1);
<                 TextureAtlasSprite textureatlassprite1 = atextureatlassprite[1];
< 
<                 if (!flag)
---
>                 if (flag2)
184,189c156,167
<                     Block block = blockAccess.getBlockState(blockpos).getBlock();
< 
<                     if (block == Blocks.GLASS || block == Blocks.STAINED_GLASS)
<                     {
<                         textureatlassprite1 = this.atlasSpriteWaterOverlay;
<                     }
---
>                     float f38 = atextureatlassprite[0].getMinU();
>                     float f39 = atextureatlassprite[0].getMaxU();
>                     float f40 = atextureatlassprite[0].getMinV();
>                     float f41 = atextureatlassprite[0].getMaxV();
>                     int l1 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn.down());
>                     int i2 = l1 >> 16 & 65535;
>                     int j2 = l1 & 65535;
>                     worldRendererIn.pos(d0, d1, d2 + 1.0D).color(f * 0.5F, f1 * 0.5F, f2 * 0.5F, 1.0F).tex((double)f38, (double)f41).lightmap(i2, j2).endVertex();
>                     worldRendererIn.pos(d0, d1, d2).color(f * 0.5F, f1 * 0.5F, f2 * 0.5F, 1.0F).tex((double)f38, (double)f40).lightmap(i2, j2).endVertex();
>                     worldRendererIn.pos(d0 + 1.0D, d1, d2).color(f * 0.5F, f1 * 0.5F, f2 * 0.5F, 1.0F).tex((double)f39, (double)f40).lightmap(i2, j2).endVertex();
>                     worldRendererIn.pos(d0 + 1.0D, d1, d2 + 1.0D).color(f * 0.5F, f1 * 0.5F, f2 * 0.5F, 1.0F).tex((double)f39, (double)f41).lightmap(i2, j2).endVertex();
>                     flag3 = true;
192c170
<                 if (aboolean[i1])
---
>                 for (int i1 = 0; i1 < 4; ++i1)
194,199c172,173
<                     float f39;
<                     float f40;
<                     double d3;
<                     double d4;
<                     double d5;
<                     double d6;
---
>                     int j1 = 0;
>                     int k1 = 0;
203,208c177
<                         f39 = f7;
<                         f40 = f10;
<                         d3 = d0;
<                         d5 = d0 + 1.0D;
<                         d4 = d2 + 0.0010000000474974513D;
<                         d6 = d2 + 0.0010000000474974513D;
---
>                         --k1;
210c179,180
<                     else if (i1 == 1)
---
> 
>                     if (i1 == 1)
212,217c182
<                         f39 = f9;
<                         f40 = f8;
<                         d3 = d0 + 1.0D;
<                         d5 = d0;
<                         d4 = d2 + 1.0D - 0.0010000000474974513D;
<                         d6 = d2 + 1.0D - 0.0010000000474974513D;
---
>                         ++k1;
219c184,185
<                     else if (i1 == 2)
---
> 
>                     if (i1 == 2)
221,226c187
<                         f39 = f8;
<                         f40 = f7;
<                         d3 = d0 + 0.0010000000474974513D;
<                         d5 = d0 + 0.0010000000474974513D;
<                         d4 = d2 + 1.0D;
<                         d6 = d2;
---
>                         --j1;
228c189,190
<                     else
---
> 
>                     if (i1 == 3)
230,235c192
<                         f39 = f10;
<                         f40 = f9;
<                         d3 = d0 + 1.0D - 0.0010000000474974513D;
<                         d5 = d0 + 1.0D - 0.0010000000474974513D;
<                         d4 = d2;
<                         d6 = d2 + 1.0D;
---
>                         ++j1;
238,254c195,228
<                     flag3 = true;
<                     float f41 = textureatlassprite1.getInterpolatedU(0.0D);
<                     float f27 = textureatlassprite1.getInterpolatedU(8.0D);
<                     float f28 = textureatlassprite1.getInterpolatedV((double)((1.0F - f39) * 16.0F * 0.5F));
<                     float f29 = textureatlassprite1.getInterpolatedV((double)((1.0F - f40) * 16.0F * 0.5F));
<                     float f30 = textureatlassprite1.getInterpolatedV(8.0D);
<                     int j = blockStateIn.getPackedLightmapCoords(blockAccess, blockpos);
<                     int k = j >> 16 & 65535;
<                     int l = j & 65535;
<                     float f31 = i1 < 2 ? 0.8F : 0.6F;
<                     float f32 = 1.0F * f31 * f;
<                     float f33 = 1.0F * f31 * f1;
<                     float f34 = 1.0F * f31 * f2;
<                     worldRendererIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
<                     worldRendererIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
<                     worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
<                     worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
---
>                     BlockPos blockpos = blockPosIn.add(j1, 0, k1);
>                     TextureAtlasSprite textureatlassprite1 = atextureatlassprite[1];
>                     worldRendererIn.setSprite(textureatlassprite1);
>                     float f42 = 0.0F;
>                     float f43 = 0.0F;
> 
>                     if (!flag)
>                     {
>                         IBlockState iblockstate = blockAccess.getBlockState(blockpos);
>                         Block block = iblockstate.getBlock();
> 
>                         if (block == Blocks.GLASS || block == Blocks.STAINED_GLASS || block == Blocks.BEACON || block == Blocks.SLIME_BLOCK)
>                         {
>                             textureatlassprite1 = this.atlasSpriteWaterOverlay;
>                             worldRendererIn.setSprite(textureatlassprite1);
>                         }
> 
>                         if (block == Blocks.FARMLAND || block == Blocks.GRASS_PATH)
>                         {
>                             f42 = 0.9375F;
>                             f43 = 0.9375F;
>                         }
> 
>                         if (block instanceof BlockSlab)
>                         {
>                             BlockSlab blockslab = (BlockSlab)block;
> 
>                             if (!blockslab.isDouble() && iblockstate.getValue(BlockSlab.HALF) == BlockSlab.EnumBlockHalf.BOTTOM)
>                             {
>                                 f42 = 0.5F;
>                                 f43 = 0.5F;
>                             }
>                         }
>                     }
256c230
<                     if (textureatlassprite1 != this.atlasSpriteWaterOverlay)
---
>                     if (aboolean[i1])
258,261c232,318
<                         worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
<                         worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
<                         worldRendererIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
<                         worldRendererIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
---
>                         float f44;
>                         float f45;
>                         double d3;
>                         double d4;
>                         double d5;
>                         double d6;
> 
>                         if (i1 == 0)
>                         {
>                             f44 = f7;
>                             f45 = f10;
>                             d3 = d0;
>                             d5 = d0 + 1.0D;
>                             d4 = d2 + 0.0010000000474974513D;
>                             d6 = d2 + 0.0010000000474974513D;
>                         }
>                         else if (i1 == 1)
>                         {
>                             f44 = f9;
>                             f45 = f8;
>                             d3 = d0 + 1.0D;
>                             d5 = d0;
>                             d4 = d2 + 1.0D - 0.0010000000474974513D;
>                             d6 = d2 + 1.0D - 0.0010000000474974513D;
>                         }
>                         else if (i1 == 2)
>                         {
>                             f44 = f8;
>                             f45 = f7;
>                             d3 = d0 + 0.0010000000474974513D;
>                             d5 = d0 + 0.0010000000474974513D;
>                             d4 = d2 + 1.0D;
>                             d6 = d2;
>                         }
>                         else
>                         {
>                             f44 = f10;
>                             f45 = f9;
>                             d3 = d0 + 1.0D - 0.0010000000474974513D;
>                             d5 = d0 + 1.0D - 0.0010000000474974513D;
>                             d4 = d2;
>                             d6 = d2 + 1.0D;
>                         }
> 
>                         if (f44 > f42 || f45 > f43)
>                         {
>                             f42 = Math.min(f42, f44);
>                             f43 = Math.min(f43, f45);
> 
>                             if (f42 > f11)
>                             {
>                                 f42 -= f11;
>                             }
> 
>                             if (f43 > f11)
>                             {
>                                 f43 -= f11;
>                             }
> 
>                             flag3 = true;
>                             float f27 = textureatlassprite1.getInterpolatedU(0.0D);
>                             float f28 = textureatlassprite1.getInterpolatedU(8.0D);
>                             float f29 = textureatlassprite1.getInterpolatedV((double)((1.0F - f44) * 16.0F * 0.5F));
>                             float f30 = textureatlassprite1.getInterpolatedV((double)((1.0F - f45) * 16.0F * 0.5F));
>                             float f31 = textureatlassprite1.getInterpolatedV(8.0D);
>                             float f32 = textureatlassprite1.getInterpolatedV((double)((1.0F - f42) * 16.0F * 0.5F));
>                             float f33 = textureatlassprite1.getInterpolatedV((double)((1.0F - f43) * 16.0F * 0.5F));
>                             int j = blockStateIn.getPackedLightmapCoords(blockAccess, blockpos);
>                             int k = j >> 16 & 65535;
>                             int l = j & 65535;
>                             float f34 = i1 < 2 ? 0.8F : 0.6F;
>                             float f35 = 1.0F * f34 * f;
>                             float f36 = 1.0F * f34 * f1;
>                             float f37 = 1.0F * f34 * f2;
>                             worldRendererIn.pos(d3, d1 + (double)f44, d4).color(f35, f36, f37, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
>                             worldRendererIn.pos(d5, d1 + (double)f45, d6).color(f35, f36, f37, 1.0F).tex((double)f28, (double)f30).lightmap(k, l).endVertex();
>                             worldRendererIn.pos(d5, d1 + (double)f43, d6).color(f35, f36, f37, 1.0F).tex((double)f28, (double)f33).lightmap(k, l).endVertex();
>                             worldRendererIn.pos(d3, d1 + (double)f42, d4).color(f35, f36, f37, 1.0F).tex((double)f27, (double)f32).lightmap(k, l).endVertex();
> 
>                             if (textureatlassprite1 != this.atlasSpriteWaterOverlay)
>                             {
>                                 worldRendererIn.pos(d3, d1 + (double)f42, d4).color(f35, f36, f37, 1.0F).tex((double)f27, (double)f32).lightmap(k, l).endVertex();
>                                 worldRendererIn.pos(d5, d1 + (double)f43, d6).color(f35, f36, f37, 1.0F).tex((double)f28, (double)f33).lightmap(k, l).endVertex();
>                                 worldRendererIn.pos(d5, d1 + (double)f45, d6).color(f35, f36, f37, 1.0F).tex((double)f28, (double)f30).lightmap(k, l).endVertex();
>                                 worldRendererIn.pos(d3, d1 + (double)f44, d4).color(f35, f36, f37, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
>                             }
>                         }
263a321,324
> 
>                 worldRendererIn.setSprite((TextureAtlasSprite)null);
>                 boolean flag4 = flag3;
>                 return flag4;
266c327
<             return flag3;
---
>             flag3 = false;
267a329,337
>         finally
>         {
>             if (Config.isShaders())
>             {
>                 SVertexBuilder.popEntity(worldRendererIn);
>             }
>         }
> 
>         return flag3;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/BlockModelRenderer.java src\modified/src/minecraft/net/minecraft/client/renderer/BlockModelRenderer.java
9a10
> import net.minecraft.client.renderer.block.model.FaceBakery;
15a17
> import net.minecraft.util.BlockRenderLayer;
22a25,33
> import optifine.BetterSnow;
> import optifine.BlockModelCustomizer;
> import optifine.Config;
> import optifine.CustomColors;
> import optifine.ListQuadsOverlay;
> import optifine.Reflector;
> import optifine.ReflectorForge;
> import optifine.RenderEnv;
> import shadersmod.client.SVertexBuilder;
26a38,39
>     private static float aoLightValueOpaque = 0.2F;
>     private static final BlockRenderLayer[] OVERLAY_LAYERS = new BlockRenderLayer[] {BlockRenderLayer.CUTOUT, BlockRenderLayer.CUTOUT_MIPPED, BlockRenderLayer.TRANSLUCENT};
30a44,48
> 
>         if (Reflector.ForgeModContainer_forgeLightPipelineEnabled.exists())
>         {
>             Reflector.setFieldValue(Reflector.ForgeModContainer_forgeLightPipelineEnabled, Boolean.valueOf(false));
>         }
40c58
<         boolean flag = Minecraft.isAmbientOcclusionEnabled() && stateIn.getLightValue() == 0 && modelIn.isAmbientOcclusion();
---
>         boolean flag = Minecraft.isAmbientOcclusionEnabled() && ReflectorForge.getLightValue(stateIn, worldIn, posIn) == 0 && modelIn.isAmbientOcclusion();
44c62,86
<             return flag ? this.renderModelSmooth(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand) : this.renderModelFlat(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand);
---
>             if (Config.isShaders())
>             {
>                 SVertexBuilder.pushEntity(stateIn, posIn, worldIn, buffer);
>             }
> 
>             if (!Config.isAlternateBlocks())
>             {
>                 rand = 0L;
>             }
> 
>             RenderEnv renderenv = buffer.getRenderEnv(worldIn, stateIn, posIn);
>             modelIn = BlockModelCustomizer.getRenderModel(modelIn, stateIn, renderenv);
>             boolean flag1 = flag ? this.renderModelSmooth(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand) : this.renderModelFlat(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand);
> 
>             if (flag1)
>             {
>                 this.renderOverlayModels(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand, renderenv, flag);
>             }
> 
>             if (Config.isShaders())
>             {
>                 SVertexBuilder.popEntity(buffer);
>             }
> 
>             return flag1;
46c88
<         catch (Throwable throwable)
---
>         catch (Throwable throwable1)
48c90
<             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Tesselating block model");
---
>             CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Tesselating block model");
59,61c101
<         float[] afloat = new float[EnumFacing.values().length * 2];
<         BitSet bitset = new BitSet(3);
<         BlockModelRenderer.AmbientOcclusionFace blockmodelrenderer$ambientocclusionface = new BlockModelRenderer.AmbientOcclusionFace();
---
>         RenderEnv renderenv = buffer.getRenderEnv(worldIn, stateIn, posIn);
63c103
<         for (EnumFacing enumfacing : EnumFacing.values())
---
>         for (EnumFacing enumfacing : EnumFacing.VALUES)
69c109,110
<                 this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list, afloat, bitset, blockmodelrenderer$ambientocclusionface);
---
>                 list = BlockModelCustomizer.getRenderQuads(list, worldIn, stateIn, posIn, enumfacing, rand, renderenv);
>                 this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list, renderenv);
78c119,120
<             this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list1, afloat, bitset, blockmodelrenderer$ambientocclusionface);
---
>             list1 = BlockModelCustomizer.getRenderQuads(list1, worldIn, stateIn, posIn, (EnumFacing)null, rand, renderenv);
>             this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list1, renderenv);
88c130
<         BitSet bitset = new BitSet(3);
---
>         RenderEnv renderenv = buffer.getRenderEnv(worldIn, stateIn, posIn);
90c132
<         for (EnumFacing enumfacing : EnumFacing.values())
---
>         for (EnumFacing enumfacing : EnumFacing.VALUES)
97c139,140
<                 this.renderQuadsFlat(worldIn, stateIn, posIn, i, false, buffer, list, bitset);
---
>                 list = BlockModelCustomizer.getRenderQuads(list, worldIn, stateIn, posIn, enumfacing, rand, renderenv);
>                 this.renderQuadsFlat(worldIn, stateIn, posIn, i, false, buffer, list, renderenv);
106c149,150
<             this.renderQuadsFlat(worldIn, stateIn, posIn, -1, true, buffer, list1, bitset);
---
>             list1 = BlockModelCustomizer.getRenderQuads(list1, worldIn, stateIn, posIn, (EnumFacing)null, rand, renderenv);
>             this.renderQuadsFlat(worldIn, stateIn, posIn, -1, true, buffer, list1, renderenv);
113c157
<     private void renderQuadsSmooth(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, List<BakedQuad> list, float[] quadBounds, BitSet bitSet, BlockModelRenderer.AmbientOcclusionFace aoFace)
---
>     private void renderQuadsSmooth(IBlockAccess p_renderQuadsSmooth_1_, IBlockState p_renderQuadsSmooth_2_, BlockPos p_renderQuadsSmooth_3_, BufferBuilder p_renderQuadsSmooth_4_, List<BakedQuad> p_renderQuadsSmooth_5_, RenderEnv p_renderQuadsSmooth_6_)
115,118c159,165
<         Vec3d vec3d = stateIn.func_191059_e(blockAccessIn, posIn);
<         double d0 = (double)posIn.getX() + vec3d.xCoord;
<         double d1 = (double)posIn.getY() + vec3d.yCoord;
<         double d2 = (double)posIn.getZ() + vec3d.zCoord;
---
>         float[] afloat = p_renderQuadsSmooth_6_.getQuadBounds();
>         BitSet bitset = p_renderQuadsSmooth_6_.getBoundsFlags();
>         BlockModelRenderer.AmbientOcclusionFace blockmodelrenderer$ambientocclusionface = p_renderQuadsSmooth_6_.getAoFace();
>         Vec3d vec3d = p_renderQuadsSmooth_2_.func_191059_e(p_renderQuadsSmooth_1_, p_renderQuadsSmooth_3_);
>         double d0 = (double)p_renderQuadsSmooth_3_.getX() + vec3d.xCoord;
>         double d1 = (double)p_renderQuadsSmooth_3_.getY() + vec3d.yCoord;
>         double d2 = (double)p_renderQuadsSmooth_3_.getZ() + vec3d.zCoord;
121c168
<         for (int j = list.size(); i < j; ++i)
---
>         for (int j = p_renderQuadsSmooth_5_.size(); i < j; ++i)
123,127c170,172
<             BakedQuad bakedquad = list.get(i);
<             this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), quadBounds, bitSet);
<             aoFace.updateVertexBrightness(blockAccessIn, stateIn, posIn, bakedquad.getFace(), quadBounds, bitSet);
<             buffer.addVertexData(bakedquad.getVertexData());
<             buffer.putBrightness4(aoFace.vertexBrightness[0], aoFace.vertexBrightness[1], aoFace.vertexBrightness[2], aoFace.vertexBrightness[3]);
---
>             BakedQuad bakedquad = p_renderQuadsSmooth_5_.get(i);
>             this.fillQuadBounds(p_renderQuadsSmooth_2_, bakedquad.getVertexData(), bakedquad.getFace(), afloat, bitset);
>             blockmodelrenderer$ambientocclusionface.updateVertexBrightness(p_renderQuadsSmooth_1_, p_renderQuadsSmooth_2_, p_renderQuadsSmooth_3_, bakedquad.getFace(), afloat, bitset);
129c174
<             if (bakedquad.hasTintIndex())
---
>             if (p_renderQuadsSmooth_4_.isMultiTexture())
131c176,215
<                 int k = this.blockColors.colorMultiplier(stateIn, blockAccessIn, posIn, bakedquad.getTintIndex());
---
>                 p_renderQuadsSmooth_4_.addVertexData(bakedquad.getVertexDataSingle());
>                 p_renderQuadsSmooth_4_.putSprite(bakedquad.getSprite());
>             }
>             else
>             {
>                 p_renderQuadsSmooth_4_.addVertexData(bakedquad.getVertexData());
>             }
> 
>             p_renderQuadsSmooth_4_.putBrightness4(blockmodelrenderer$ambientocclusionface.vertexBrightness[0], blockmodelrenderer$ambientocclusionface.vertexBrightness[1], blockmodelrenderer$ambientocclusionface.vertexBrightness[2], blockmodelrenderer$ambientocclusionface.vertexBrightness[3]);
> 
>             if (bakedquad.shouldApplyDiffuseLighting())
>             {
>                 float f = FaceBakery.getFaceBrightness(bakedquad.getFace());
>                 float[] afloat1 = blockmodelrenderer$ambientocclusionface.vertexColorMultiplier;
>                 afloat1[0] *= f;
>                 afloat1 = blockmodelrenderer$ambientocclusionface.vertexColorMultiplier;
>                 afloat1[1] *= f;
>                 afloat1 = blockmodelrenderer$ambientocclusionface.vertexColorMultiplier;
>                 afloat1[2] *= f;
>                 afloat1 = blockmodelrenderer$ambientocclusionface.vertexColorMultiplier;
>                 afloat1[3] *= f;
>             }
> 
>             int l = CustomColors.getColorMultiplier(bakedquad, p_renderQuadsSmooth_2_, p_renderQuadsSmooth_1_, p_renderQuadsSmooth_3_, p_renderQuadsSmooth_6_);
> 
>             if (!bakedquad.hasTintIndex() && l == -1)
>             {
>                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], 4);
>                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], 3);
>                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], 2);
>                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], 1);
>             }
>             else
>             {
>                 int k = l;
> 
>                 if (l == -1)
>                 {
>                     k = this.blockColors.colorMultiplier(p_renderQuadsSmooth_2_, p_renderQuadsSmooth_1_, p_renderQuadsSmooth_3_, bakedquad.getTintIndex());
>                 }
138,151c222,228
<                 float f = (float)(k >> 16 & 255) / 255.0F;
<                 float f1 = (float)(k >> 8 & 255) / 255.0F;
<                 float f2 = (float)(k & 255) / 255.0F;
<                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[0] * f, aoFace.vertexColorMultiplier[0] * f1, aoFace.vertexColorMultiplier[0] * f2, 4);
<                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[1] * f, aoFace.vertexColorMultiplier[1] * f1, aoFace.vertexColorMultiplier[1] * f2, 3);
<                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[2] * f, aoFace.vertexColorMultiplier[2] * f1, aoFace.vertexColorMultiplier[2] * f2, 2);
<                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[3] * f, aoFace.vertexColorMultiplier[3] * f1, aoFace.vertexColorMultiplier[3] * f2, 1);
<             }
<             else
<             {
<                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[0], aoFace.vertexColorMultiplier[0], aoFace.vertexColorMultiplier[0], 4);
<                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[1], aoFace.vertexColorMultiplier[1], aoFace.vertexColorMultiplier[1], 3);
<                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[2], aoFace.vertexColorMultiplier[2], aoFace.vertexColorMultiplier[2], 2);
<                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[3], aoFace.vertexColorMultiplier[3], aoFace.vertexColorMultiplier[3], 1);
---
>                 float f1 = (float)(k >> 16 & 255) / 255.0F;
>                 float f2 = (float)(k >> 8 & 255) / 255.0F;
>                 float f3 = (float)(k & 255) / 255.0F;
>                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f3, 4);
>                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f3, 3);
>                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f3, 2);
>                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f3, 1);
154c231
<             buffer.putPosition(d0, d1, d2);
---
>             p_renderQuadsSmooth_4_.putPosition(d0, d1, d2);
165a243
>         int i = vertexData.length / 4;
167c245
<         for (int i = 0; i < 4; ++i)
---
>         for (int j = 0; j < 4; ++j)
169,171c247,249
<             float f6 = Float.intBitsToFloat(vertexData[i * 7]);
<             float f7 = Float.intBitsToFloat(vertexData[i * 7 + 1]);
<             float f8 = Float.intBitsToFloat(vertexData[i * 7 + 2]);
---
>             float f6 = Float.intBitsToFloat(vertexData[j * i]);
>             float f7 = Float.intBitsToFloat(vertexData[j * i + 1]);
>             float f8 = Float.intBitsToFloat(vertexData[j * i + 2]);
188,194c266,272
<             int j = EnumFacing.values().length;
<             quadBounds[EnumFacing.WEST.getIndex() + j] = 1.0F - f;
<             quadBounds[EnumFacing.EAST.getIndex() + j] = 1.0F - f3;
<             quadBounds[EnumFacing.DOWN.getIndex() + j] = 1.0F - f1;
<             quadBounds[EnumFacing.UP.getIndex() + j] = 1.0F - f4;
<             quadBounds[EnumFacing.NORTH.getIndex() + j] = 1.0F - f2;
<             quadBounds[EnumFacing.SOUTH.getIndex() + j] = 1.0F - f5;
---
>             int k = EnumFacing.VALUES.length;
>             quadBounds[EnumFacing.WEST.getIndex() + k] = 1.0F - f;
>             quadBounds[EnumFacing.EAST.getIndex() + k] = 1.0F - f3;
>             quadBounds[EnumFacing.DOWN.getIndex() + k] = 1.0F - f1;
>             quadBounds[EnumFacing.UP.getIndex() + k] = 1.0F - f4;
>             quadBounds[EnumFacing.NORTH.getIndex() + k] = 1.0F - f2;
>             quadBounds[EnumFacing.SOUTH.getIndex() + k] = 1.0F - f5;
233c311
<     private void renderQuadsFlat(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, int brightnessIn, boolean ownBrightness, BufferBuilder buffer, List<BakedQuad> list, BitSet bitSet)
---
>     private void renderQuadsFlat(IBlockAccess p_renderQuadsFlat_1_, IBlockState p_renderQuadsFlat_2_, BlockPos p_renderQuadsFlat_3_, int p_renderQuadsFlat_4_, boolean p_renderQuadsFlat_5_, BufferBuilder p_renderQuadsFlat_6_, List<BakedQuad> p_renderQuadsFlat_7_, RenderEnv p_renderQuadsFlat_8_)
235,238c313,317
<         Vec3d vec3d = stateIn.func_191059_e(blockAccessIn, posIn);
<         double d0 = (double)posIn.getX() + vec3d.xCoord;
<         double d1 = (double)posIn.getY() + vec3d.yCoord;
<         double d2 = (double)posIn.getZ() + vec3d.zCoord;
---
>         BitSet bitset = p_renderQuadsFlat_8_.getBoundsFlags();
>         Vec3d vec3d = p_renderQuadsFlat_2_.func_191059_e(p_renderQuadsFlat_1_, p_renderQuadsFlat_3_);
>         double d0 = (double)p_renderQuadsFlat_3_.getX() + vec3d.xCoord;
>         double d1 = (double)p_renderQuadsFlat_3_.getY() + vec3d.yCoord;
>         double d2 = (double)p_renderQuadsFlat_3_.getZ() + vec3d.zCoord;
241c320
<         for (int j = list.size(); i < j; ++i)
---
>         for (int j = p_renderQuadsFlat_7_.size(); i < j; ++i)
243c322,329
<             BakedQuad bakedquad = list.get(i);
---
>             BakedQuad bakedquad = p_renderQuadsFlat_7_.get(i);
> 
>             if (p_renderQuadsFlat_5_)
>             {
>                 this.fillQuadBounds(p_renderQuadsFlat_2_, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, bitset);
>                 BlockPos blockpos = bitset.get(0) ? p_renderQuadsFlat_3_.offset(bakedquad.getFace()) : p_renderQuadsFlat_3_;
>                 p_renderQuadsFlat_4_ = p_renderQuadsFlat_2_.getPackedLightmapCoords(p_renderQuadsFlat_1_, blockpos);
>             }
245c331
<             if (ownBrightness)
---
>             if (p_renderQuadsFlat_6_.isMultiTexture())
247,249c333,338
<                 this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, bitSet);
<                 BlockPos blockpos = bitSet.get(0) ? posIn.offset(bakedquad.getFace()) : posIn;
<                 brightnessIn = stateIn.getPackedLightmapCoords(blockAccessIn, blockpos);
---
>                 p_renderQuadsFlat_6_.addVertexData(bakedquad.getVertexDataSingle());
>                 p_renderQuadsFlat_6_.putSprite(bakedquad.getSprite());
>             }
>             else
>             {
>                 p_renderQuadsFlat_6_.addVertexData(bakedquad.getVertexData());
252,253c341,342
<             buffer.addVertexData(bakedquad.getVertexData());
<             buffer.putBrightness4(brightnessIn, brightnessIn, brightnessIn, brightnessIn);
---
>             p_renderQuadsFlat_6_.putBrightness4(p_renderQuadsFlat_4_, p_renderQuadsFlat_4_, p_renderQuadsFlat_4_, p_renderQuadsFlat_4_);
>             int l = CustomColors.getColorMultiplier(bakedquad, p_renderQuadsFlat_2_, p_renderQuadsFlat_1_, p_renderQuadsFlat_3_, p_renderQuadsFlat_8_);
255c344
<             if (bakedquad.hasTintIndex())
---
>             if (!bakedquad.hasTintIndex() && l == -1)
257c346,362
<                 int k = this.blockColors.colorMultiplier(stateIn, blockAccessIn, posIn, bakedquad.getTintIndex());
---
>                 if (bakedquad.shouldApplyDiffuseLighting())
>                 {
>                     float f4 = FaceBakery.getFaceBrightness(bakedquad.getFace());
>                     p_renderQuadsFlat_6_.putColorMultiplier(f4, f4, f4, 4);
>                     p_renderQuadsFlat_6_.putColorMultiplier(f4, f4, f4, 3);
>                     p_renderQuadsFlat_6_.putColorMultiplier(f4, f4, f4, 2);
>                     p_renderQuadsFlat_6_.putColorMultiplier(f4, f4, f4, 1);
>                 }
>             }
>             else
>             {
>                 int k = l;
> 
>                 if (l == -1)
>                 {
>                     k = this.blockColors.colorMultiplier(p_renderQuadsFlat_2_, p_renderQuadsFlat_1_, p_renderQuadsFlat_3_, bakedquad.getTintIndex());
>                 }
267,270c372,384
<                 buffer.putColorMultiplier(f, f1, f2, 4);
<                 buffer.putColorMultiplier(f, f1, f2, 3);
<                 buffer.putColorMultiplier(f, f1, f2, 2);
<                 buffer.putColorMultiplier(f, f1, f2, 1);
---
> 
>                 if (bakedquad.shouldApplyDiffuseLighting())
>                 {
>                     float f3 = FaceBakery.getFaceBrightness(bakedquad.getFace());
>                     f *= f3;
>                     f1 *= f3;
>                     f2 *= f3;
>                 }
> 
>                 p_renderQuadsFlat_6_.putColorMultiplier(f, f1, f2, 4);
>                 p_renderQuadsFlat_6_.putColorMultiplier(f, f1, f2, 3);
>                 p_renderQuadsFlat_6_.putColorMultiplier(f, f1, f2, 2);
>                 p_renderQuadsFlat_6_.putColorMultiplier(f, f1, f2, 1);
273c387
<             buffer.putPosition(d0, d1, d2);
---
>             p_renderQuadsFlat_6_.putPosition(d0, d1, d2);
284c398
<         for (EnumFacing enumfacing : EnumFacing.values())
---
>         for (EnumFacing enumfacing : EnumFacing.VALUES)
342c456,521
<     class AmbientOcclusionFace
---
>     public static float fixAoLightValue(float p_fixAoLightValue_0_)
>     {
>         return p_fixAoLightValue_0_ == 0.2F ? aoLightValueOpaque : p_fixAoLightValue_0_;
>     }
> 
>     public static void updateAoLightValue()
>     {
>         aoLightValueOpaque = 1.0F - Config.getAmbientOcclusionLevel() * 0.8F;
>     }
> 
>     private void renderOverlayModels(IBlockAccess p_renderOverlayModels_1_, IBakedModel p_renderOverlayModels_2_, IBlockState p_renderOverlayModels_3_, BlockPos p_renderOverlayModels_4_, BufferBuilder p_renderOverlayModels_5_, boolean p_renderOverlayModels_6_, long p_renderOverlayModels_7_, RenderEnv p_renderOverlayModels_9_, boolean p_renderOverlayModels_10_)
>     {
>         if (p_renderOverlayModels_9_.isOverlaysRendered())
>         {
>             for (int i = 0; i < OVERLAY_LAYERS.length; ++i)
>             {
>                 BlockRenderLayer blockrenderlayer = OVERLAY_LAYERS[i];
>                 ListQuadsOverlay listquadsoverlay = p_renderOverlayModels_9_.getListQuadsOverlay(blockrenderlayer);
> 
>                 if (listquadsoverlay.size() > 0)
>                 {
>                     RegionRenderCacheBuilder regionrendercachebuilder = p_renderOverlayModels_9_.getRegionRenderCacheBuilder();
> 
>                     if (regionrendercachebuilder != null)
>                     {
>                         BufferBuilder bufferbuilder = regionrendercachebuilder.getWorldRendererByLayer(blockrenderlayer);
> 
>                         if (!bufferbuilder.isDrawing())
>                         {
>                             bufferbuilder.begin(7, DefaultVertexFormats.BLOCK);
>                             bufferbuilder.setTranslation(p_renderOverlayModels_5_.getXOffset(), p_renderOverlayModels_5_.getYOffset(), p_renderOverlayModels_5_.getZOffset());
>                         }
> 
>                         for (int j = 0; j < listquadsoverlay.size(); ++j)
>                         {
>                             BakedQuad bakedquad = listquadsoverlay.getQuad(j);
>                             List<BakedQuad> list = listquadsoverlay.getListQuadsSingle(bakedquad);
>                             IBlockState iblockstate = listquadsoverlay.getBlockState(j);
>                             p_renderOverlayModels_9_.reset(p_renderOverlayModels_1_, iblockstate, p_renderOverlayModels_4_);
> 
>                             if (p_renderOverlayModels_10_)
>                             {
>                                 this.renderQuadsSmooth(p_renderOverlayModels_1_, iblockstate, p_renderOverlayModels_4_, bufferbuilder, list, p_renderOverlayModels_9_);
>                             }
>                             else
>                             {
>                                 int k = iblockstate.getPackedLightmapCoords(p_renderOverlayModels_1_, p_renderOverlayModels_4_.offset(bakedquad.getFace()));
>                                 this.renderQuadsFlat(p_renderOverlayModels_1_, iblockstate, p_renderOverlayModels_4_, k, false, bufferbuilder, list, p_renderOverlayModels_9_);
>                             }
>                         }
>                     }
> 
>                     listquadsoverlay.clear();
>                 }
>             }
>         }
> 
>         if (Config.isBetterSnow() && !p_renderOverlayModels_9_.isBreakingAnimation() && BetterSnow.shouldRender(p_renderOverlayModels_1_, p_renderOverlayModels_3_, p_renderOverlayModels_4_))
>         {
>             IBakedModel ibakedmodel = BetterSnow.getModelSnowLayer();
>             IBlockState iblockstate1 = BetterSnow.getStateSnowLayer();
>             this.renderModel(p_renderOverlayModels_1_, ibakedmodel, iblockstate1, p_renderOverlayModels_4_, p_renderOverlayModels_5_, p_renderOverlayModels_6_, p_renderOverlayModels_7_);
>         }
>     }
> 
>     public static class AmbientOcclusionFace
346a526,533
>         public AmbientOcclusionFace()
>         {
>         }
> 
>         public AmbientOcclusionFace(BlockModelRenderer p_i46235_1_)
>         {
>         }
> 
363a551,554
>             f = BlockModelRenderer.fixAoLightValue(f);
>             f1 = BlockModelRenderer.fixAoLightValue(f1);
>             f2 = BlockModelRenderer.fixAoLightValue(f2);
>             f3 = BlockModelRenderer.fixAoLightValue(f3);
368d558
<             float f4;
369a560
>             float f25;
373c564
<                 f4 = f;
---
>                 f25 = f;
379c570,571
<                 f4 = worldIn.getBlockState(blockpos1).getAmbientOcclusionLightValue();
---
>                 f25 = worldIn.getBlockState(blockpos1).getAmbientOcclusionLightValue();
>                 f25 = BlockModelRenderer.fixAoLightValue(f25);
383d574
<             float f5;
384a576
>             float f26;
388c580
<                 f5 = f;
---
>                 f26 = f;
394c586,587
<                 f5 = worldIn.getBlockState(blockpos2).getAmbientOcclusionLightValue();
---
>                 f26 = worldIn.getBlockState(blockpos2).getAmbientOcclusionLightValue();
>                 f26 = BlockModelRenderer.fixAoLightValue(f26);
398d590
<             float f6;
399a592
>             float f27;
403c596
<                 f6 = f1;
---
>                 f27 = f1;
409c602,603
<                 f6 = worldIn.getBlockState(blockpos3).getAmbientOcclusionLightValue();
---
>                 f27 = worldIn.getBlockState(blockpos3).getAmbientOcclusionLightValue();
>                 f27 = BlockModelRenderer.fixAoLightValue(f27);
413d606
<             float f7;
414a608
>             float f28;
418c612
<                 f7 = f1;
---
>                 f28 = f1;
424c618,619
<                 f7 = worldIn.getBlockState(blockpos4).getAmbientOcclusionLightValue();
---
>                 f28 = worldIn.getBlockState(blockpos4).getAmbientOcclusionLightValue();
>                 f28 = BlockModelRenderer.fixAoLightValue(f28);
435c630,631
<             float f8 = shapeState.get(0) ? worldIn.getBlockState(blockpos).getAmbientOcclusionLightValue() : worldIn.getBlockState(centerPos).getAmbientOcclusionLightValue();
---
>             float f4 = shapeState.get(0) ? worldIn.getBlockState(blockpos).getAmbientOcclusionLightValue() : worldIn.getBlockState(centerPos).getAmbientOcclusionLightValue();
>             f4 = BlockModelRenderer.fixAoLightValue(f4);
445,468c641,664
<                 float f29 = (f3 + f + f5 + f8) * 0.25F;
<                 float f30 = (f2 + f + f4 + f8) * 0.25F;
<                 float f31 = (f2 + f1 + f6 + f8) * 0.25F;
<                 float f32 = (f3 + f1 + f7 + f8) * 0.25F;
<                 float f13 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[1].shape];
<                 float f14 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[3].shape];
<                 float f15 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[5].shape];
<                 float f16 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[7].shape];
<                 float f17 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[1].shape];
<                 float f18 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[3].shape];
<                 float f19 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[5].shape];
<                 float f20 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[7].shape];
<                 float f21 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[1].shape];
<                 float f22 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[3].shape];
<                 float f23 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[5].shape];
<                 float f24 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[7].shape];
<                 float f25 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[1].shape];
<                 float f26 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[3].shape];
<                 float f27 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[5].shape];
<                 float f28 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[7].shape];
<                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert0] = f29 * f13 + f30 * f14 + f31 * f15 + f32 * f16;
<                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert1] = f29 * f17 + f30 * f18 + f31 * f19 + f32 * f20;
<                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert2] = f29 * f21 + f30 * f22 + f31 * f23 + f32 * f24;
<                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert3] = f29 * f25 + f30 * f26 + f31 * f27 + f32 * f28;
---
>                 float f29 = (f3 + f + f26 + f4) * 0.25F;
>                 float f30 = (f2 + f + f25 + f4) * 0.25F;
>                 float f31 = (f2 + f1 + f27 + f4) * 0.25F;
>                 float f32 = (f3 + f1 + f28 + f4) * 0.25F;
>                 float f9 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[1].shape];
>                 float f10 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[3].shape];
>                 float f11 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[5].shape];
>                 float f12 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[7].shape];
>                 float f13 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[1].shape];
>                 float f14 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[3].shape];
>                 float f15 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[5].shape];
>                 float f16 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[7].shape];
>                 float f17 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[1].shape];
>                 float f18 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[3].shape];
>                 float f19 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[5].shape];
>                 float f20 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[7].shape];
>                 float f21 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[1].shape];
>                 float f22 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[3].shape];
>                 float f23 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[5].shape];
>                 float f24 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[7].shape];
>                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert0] = f29 * f9 + f30 * f10 + f31 * f11 + f32 * f12;
>                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert1] = f29 * f13 + f30 * f14 + f31 * f15 + f32 * f16;
>                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert2] = f29 * f17 + f30 * f18 + f31 * f19 + f32 * f20;
>                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert3] = f29 * f21 + f30 * f22 + f31 * f23 + f32 * f24;
473,476c669,672
<                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert0] = this.getVertexBrightness(i2, j2, k2, l2, f13, f14, f15, f16);
<                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert1] = this.getVertexBrightness(i2, j2, k2, l2, f17, f18, f19, f20);
<                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert2] = this.getVertexBrightness(i2, j2, k2, l2, f21, f22, f23, f24);
<                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert3] = this.getVertexBrightness(i2, j2, k2, l2, f25, f26, f27, f28);
---
>                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert0] = this.getVertexBrightness(i2, j2, k2, l2, f9, f10, f11, f12);
>                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert1] = this.getVertexBrightness(i2, j2, k2, l2, f13, f14, f15, f16);
>                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert2] = this.getVertexBrightness(i2, j2, k2, l2, f17, f18, f19, f20);
>                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert3] = this.getVertexBrightness(i2, j2, k2, l2, f21, f22, f23, f24);
480,483c676,679
<                 float f9 = (f3 + f + f5 + f8) * 0.25F;
<                 float f10 = (f2 + f + f4 + f8) * 0.25F;
<                 float f11 = (f2 + f1 + f6 + f8) * 0.25F;
<                 float f12 = (f3 + f1 + f7 + f8) * 0.25F;
---
>                 float f5 = (f3 + f + f26 + f4) * 0.25F;
>                 float f6 = (f2 + f + f25 + f4) * 0.25F;
>                 float f7 = (f2 + f1 + f27 + f4) * 0.25F;
>                 float f8 = (f3 + f1 + f28 + f4) * 0.25F;
488,491c684,687
<                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert0] = f9;
<                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert1] = f10;
<                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert2] = f11;
<                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert3] = f12;
---
>                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert0] = f5;
>                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert1] = f6;
>                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert2] = f7;
>                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert3] = f8;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/BufferBuilder.java src\modified/src/minecraft/net/minecraft/client/renderer/BufferBuilder.java
11a12,13
> import net.minecraft.block.state.IBlockState;
> import net.minecraft.client.renderer.texture.TextureAtlasSprite;
13a16,17
> import net.minecraft.util.BlockRenderLayer;
> import net.minecraft.util.math.BlockPos;
14a19,23
> import net.minecraft.world.IBlockAccess;
> import optifine.Config;
> import optifine.RenderEnv;
> import optifine.TextureUtils;
> 
16a26,27
> import org.lwjgl.opengl.GL11;
> import shadersmod.client.SVertexBuilder;
22c33
<     private IntBuffer rawIntBuffer;
---
>     public IntBuffer rawIntBuffer;
24,25c35,36
<     private FloatBuffer rawFloatBuffer;
<     private int vertexCount;
---
>     public FloatBuffer rawFloatBuffer;
>     public int vertexCount;
31c42
<     private int drawMode;
---
>     public int drawMode;
36a48,54
>     private BlockRenderLayer blockLayer = null;
>     private boolean[] drawnIcons = new boolean[256];
>     private TextureAtlasSprite[] quadSprites = null;
>     private TextureAtlasSprite[] quadSpritesPrev = null;
>     private TextureAtlasSprite quadSprite = null;
>     public SVertexBuilder sVertexBuilder;
>     public RenderEnv renderEnv = null;
39a58,62
>         if (Config.isShaders())
>         {
>             bufferSizeIn *= 2;
>         }
> 
43a67
>         SVertexBuilder.initVertexBuilder(this);
47a72,76
>         if (Config.isShaders())
>         {
>             p_181670_1_ *= 2;
>         }
> 
59c88
<             this.rawFloatBuffer = this.byteBuffer.asFloatBuffer().asReadOnlyBuffer();
---
>             this.rawFloatBuffer = this.byteBuffer.asFloatBuffer();
63a93,101
> 
>             if (this.quadSprites != null)
>             {
>                 TextureAtlasSprite[] atextureatlassprite = this.quadSprites;
>                 int l = this.getBufferQuadSize();
>                 this.quadSprites = new TextureAtlasSprite[l];
>                 System.arraycopy(atextureatlassprite, 0, this.quadSprites, 0, Math.min(atextureatlassprite.length, this.quadSprites.length));
>                 this.quadSpritesPrev = null;
>             }
124a163,179
> 
>         this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
>         this.rawIntBuffer.position(this.getBufferSize());
> 
>         if (this.quadSprites != null)
>         {
>             TextureAtlasSprite[] atextureatlassprite = new TextureAtlasSprite[this.vertexCount / 4];
>             int i2 = this.vertexFormat.getNextOffset() / 4 * 4;
> 
>             for (int j2 = 0; j2 < ainteger.length; ++j2)
>             {
>                 int k2 = ainteger[j2].intValue();
>                 atextureatlassprite[j2] = this.quadSprites[k2];
>             }
> 
>             System.arraycopy(atextureatlassprite, 0, this.quadSprites, 0, atextureatlassprite.length);
>         }
136c191,200
<         return new BufferBuilder.State(aint, new VertexFormat(this.vertexFormat));
---
>         TextureAtlasSprite[] atextureatlassprite = null;
> 
>         if (this.quadSprites != null)
>         {
>             int j = this.vertexCount / 4;
>             atextureatlassprite = new TextureAtlasSprite[j];
>             System.arraycopy(this.quadSprites, 0, atextureatlassprite, 0, j);
>         }
> 
>         return new BufferBuilder.State(aint, new VertexFormat(this.vertexFormat), atextureatlassprite);
139c203
<     private int getBufferSize()
---
>     public int getBufferSize()
170a235,259
> 
>         if (state.stateQuadSprites != null)
>         {
>             if (this.quadSprites == null)
>             {
>                 this.quadSprites = this.quadSpritesPrev;
>             }
> 
>             if (this.quadSprites == null || this.quadSprites.length < this.getBufferQuadSize())
>             {
>                 this.quadSprites = new TextureAtlasSprite[this.getBufferQuadSize()];
>             }
> 
>             TextureAtlasSprite[] atextureatlassprite = state.stateQuadSprites;
>             System.arraycopy(atextureatlassprite, 0, this.quadSprites, 0, atextureatlassprite.length);
>         }
>         else
>         {
>             if (this.quadSprites != null)
>             {
>                 this.quadSpritesPrev = this.quadSprites;
>             }
> 
>             this.quadSprites = null;
>         }
177a267
>         this.quadSprite = null;
194a285,314
> 
>             if (Config.isShaders())
>             {
>                 SVertexBuilder.endSetVertexFormat(this);
>             }
> 
>             if (Config.isMultiTexture())
>             {
>                 if (this.blockLayer != null)
>                 {
>                     if (this.quadSprites == null)
>                     {
>                         this.quadSprites = this.quadSpritesPrev;
>                     }
> 
>                     if (this.quadSprites == null || this.quadSprites.length < this.getBufferQuadSize())
>                     {
>                         this.quadSprites = new TextureAtlasSprite[this.getBufferQuadSize()];
>                     }
>                 }
>             }
>             else
>             {
>                 if (this.quadSprites != null)
>                 {
>                     this.quadSpritesPrev = this.quadSprites;
>                 }
> 
>                 this.quadSprites = null;
>             }
199a320,326
>         if (this.quadSprite != null && this.quadSprites != null)
>         {
>             u = (double)this.quadSprite.toSingleU((float)u);
>             v = (double)this.quadSprite.toSingleV((float)v);
>             this.quadSprites[this.vertexCount / 4] = this.quadSprite;
>         }
> 
296c423
<     private int getColorIndex(int vertexIndex)
---
>     public int getColorIndex(int vertexIndex)
360c487
<     private void putColorRGBA(int index, int red, int green, int blue)
---
>     public void putColorRGBA(int index, int red, int green, int blue)
444a572,576
>         if (Config.isShaders())
>         {
>             SVertexBuilder.beginAddVertexData(this, vertexData);
>         }
> 
448a581,585
> 
>         if (Config.isShaders())
>         {
>             SVertexBuilder.endAddVertexData(this);
>         }
454a592,598
>         this.vertexFormatIndex = 0;
>         this.vertexFormatElement = this.vertexFormat.getElement(this.vertexFormatIndex);
> 
>         if (Config.isShaders())
>         {
>             SVertexBuilder.endAddVertex(this);
>         }
458a603,607
>         if (Config.isShaders())
>         {
>             SVertexBuilder.beginAddVertex(this);
>         }
> 
541,543c690,692
<                 this.byteBuffer.putShort(i, (short)((int)x * 32767 & 65535));
<                 this.byteBuffer.putShort(i + 2, (short)((int)y * 32767 & 65535));
<                 this.byteBuffer.putShort(i + 4, (short)((int)z * 32767 & 65535));
---
>                 this.byteBuffer.putShort(i, (short)((int)(x * 32767.0F) & 65535));
>                 this.byteBuffer.putShort(i + 2, (short)((int)(y * 32767.0F) & 65535));
>                 this.byteBuffer.putShort(i + 4, (short)((int)(z * 32767.0F) & 65535));
548,550c697,699
<                 this.byteBuffer.put(i, (byte)((int)x * 127 & 255));
<                 this.byteBuffer.put(i + 1, (byte)((int)y * 127 & 255));
<                 this.byteBuffer.put(i + 2, (byte)((int)z * 127 & 255));
---
>                 this.byteBuffer.put(i, (byte)((int)(x * 127.0F) & 255));
>                 this.byteBuffer.put(i + 1, (byte)((int)(y * 127.0F) & 255));
>                 this.byteBuffer.put(i + 2, (byte)((int)(z * 127.0F) & 255));
613a763,978
>     public void putSprite(TextureAtlasSprite p_putSprite_1_)
>     {
>         if (this.quadSprites != null)
>         {
>             int i = this.vertexCount / 4;
>             this.quadSprites[i - 1] = p_putSprite_1_;
>         }
>     }
> 
>     public void setSprite(TextureAtlasSprite p_setSprite_1_)
>     {
>         if (this.quadSprites != null)
>         {
>             this.quadSprite = p_setSprite_1_;
>         }
>     }
> 
>     public boolean isMultiTexture()
>     {
>         return this.quadSprites != null;
>     }
> 
>     public void drawMultiTexture()
>     {
>         if (this.quadSprites != null)
>         {
>             int i = Config.getMinecraft().getTextureMapBlocks().getCountRegisteredSprites();
> 
>             if (this.drawnIcons.length <= i)
>             {
>                 this.drawnIcons = new boolean[i + 1];
>             }
> 
>             Arrays.fill(this.drawnIcons, false);
>             int j = 0;
>             int k = -1;
>             int l = this.vertexCount / 4;
> 
>             for (int i1 = 0; i1 < l; ++i1)
>             {
>                 TextureAtlasSprite textureatlassprite = this.quadSprites[i1];
> 
>                 if (textureatlassprite != null)
>                 {
>                     int j1 = textureatlassprite.getIndexInMap();
> 
>                     if (!this.drawnIcons[j1])
>                     {
>                         if (textureatlassprite == TextureUtils.iconGrassSideOverlay)
>                         {
>                             if (k < 0)
>                             {
>                                 k = i1;
>                             }
>                         }
>                         else
>                         {
>                             i1 = this.drawForIcon(textureatlassprite, i1) - 1;
>                             ++j;
> 
>                             if (this.blockLayer != BlockRenderLayer.TRANSLUCENT)
>                             {
>                                 this.drawnIcons[j1] = true;
>                             }
>                         }
>                     }
>                 }
>             }
> 
>             if (k >= 0)
>             {
>                 this.drawForIcon(TextureUtils.iconGrassSideOverlay, k);
>                 ++j;
>             }
> 
>             if (j > 0)
>             {
>                 ;
>             }
>         }
>     }
> 
>     private int drawForIcon(TextureAtlasSprite p_drawForIcon_1_, int p_drawForIcon_2_)
>     {
>         GL11.glBindTexture(GL11.GL_TEXTURE_2D, p_drawForIcon_1_.glSpriteTextureId);
>         int i = -1;
>         int j = -1;
>         int k = this.vertexCount / 4;
> 
>         for (int l = p_drawForIcon_2_; l < k; ++l)
>         {
>             TextureAtlasSprite textureatlassprite = this.quadSprites[l];
> 
>             if (textureatlassprite == p_drawForIcon_1_)
>             {
>                 if (j < 0)
>                 {
>                     j = l;
>                 }
>             }
>             else if (j >= 0)
>             {
>                 this.draw(j, l);
> 
>                 if (this.blockLayer == BlockRenderLayer.TRANSLUCENT)
>                 {
>                     return l;
>                 }
> 
>                 j = -1;
> 
>                 if (i < 0)
>                 {
>                     i = l;
>                 }
>             }
>         }
> 
>         if (j >= 0)
>         {
>             this.draw(j, k);
>         }
> 
>         if (i < 0)
>         {
>             i = k;
>         }
> 
>         return i;
>     }
> 
>     private void draw(int p_draw_1_, int p_draw_2_)
>     {
>         int i = p_draw_2_ - p_draw_1_;
> 
>         if (i > 0)
>         {
>             int j = p_draw_1_ * 4;
>             int k = i * 4;
>             GL11.glDrawArrays(this.drawMode, j, k);
>         }
>     }
> 
>     public void setBlockLayer(BlockRenderLayer p_setBlockLayer_1_)
>     {
>         this.blockLayer = p_setBlockLayer_1_;
> 
>         if (p_setBlockLayer_1_ == null)
>         {
>             if (this.quadSprites != null)
>             {
>                 this.quadSpritesPrev = this.quadSprites;
>             }
> 
>             this.quadSprites = null;
>             this.quadSprite = null;
>         }
>     }
> 
>     private int getBufferQuadSize()
>     {
>         int i = this.rawIntBuffer.capacity() * 4 / (this.vertexFormat.getIntegerSize() * 4);
>         return i;
>     }
> 
>     public RenderEnv getRenderEnv(IBlockAccess p_getRenderEnv_1_, IBlockState p_getRenderEnv_2_, BlockPos p_getRenderEnv_3_)
>     {
>         if (this.renderEnv == null)
>         {
>             this.renderEnv = new RenderEnv(p_getRenderEnv_1_, p_getRenderEnv_2_, p_getRenderEnv_3_);
>             return this.renderEnv;
>         }
>         else
>         {
>             this.renderEnv.reset(p_getRenderEnv_1_, p_getRenderEnv_2_, p_getRenderEnv_3_);
>             return this.renderEnv;
>         }
>     }
> 
>     public boolean isDrawing()
>     {
>         return this.isDrawing;
>     }
> 
>     public double getXOffset()
>     {
>         return this.xOffset;
>     }
> 
>     public double getYOffset()
>     {
>         return this.yOffset;
>     }
> 
>     public double getZOffset()
>     {
>         return this.zOffset;
>     }
> 
>     public void putColorRGBA(int p_putColorRGBA_1_, int p_putColorRGBA_2_, int p_putColorRGBA_3_, int p_putColorRGBA_4_, int p_putColorRGBA_5_)
>     {
>         if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
>         {
>             this.rawIntBuffer.put(p_putColorRGBA_1_, p_putColorRGBA_5_ << 24 | p_putColorRGBA_4_ << 16 | p_putColorRGBA_3_ << 8 | p_putColorRGBA_2_);
>         }
>         else
>         {
>             this.rawIntBuffer.put(p_putColorRGBA_1_, p_putColorRGBA_2_ << 24 | p_putColorRGBA_3_ << 16 | p_putColorRGBA_4_ << 8 | p_putColorRGBA_5_);
>         }
>     }
> 
>     public boolean isColorDisabled()
>     {
>         return this.noColor;
>     }
> 
617a983,990
>         private TextureAtlasSprite[] stateQuadSprites;
> 
>         public State(int[] p_i5_2_, VertexFormat p_i5_3_, TextureAtlasSprite[] p_i5_4_)
>         {
>             this.stateRawBuffer = p_i5_2_;
>             this.stateVertexFormat = p_i5_3_;
>             this.stateQuadSprites = p_i5_4_;
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java src\modified/src/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
33,35c33,35
<     private final List<Thread> listWorkerThreads = Lists.<Thread>newArrayList();
<     private final List<ChunkRenderWorker> listThreadedWorkers = Lists.<ChunkRenderWorker>newArrayList();
<     private final PriorityBlockingQueue<ChunkCompileTaskGenerator> queueChunkUpdates = Queues.<ChunkCompileTaskGenerator>newPriorityBlockingQueue();
---
>     private final List<Thread> listWorkerThreads;
>     private final List<ChunkRenderWorker> listThreadedWorkers;
>     private final PriorityBlockingQueue<ChunkCompileTaskGenerator> queueChunkUpdates;
37,39c37,39
<     private final WorldVertexBufferUploader worldVertexUploader = new WorldVertexBufferUploader();
<     private final VertexBufferUploader vertexUploader = new VertexBufferUploader();
<     private final Queue<ChunkRenderDispatcher.PendingUpload> queueChunkUploads = Queues.<ChunkRenderDispatcher.PendingUpload>newPriorityQueue();
---
>     private final WorldVertexBufferUploader worldVertexUploader;
>     private final VertexBufferUploader vertexUploader;
>     private final Queue<ChunkRenderDispatcher.PendingUpload> queueChunkUploads;
43a44,54
>         this(-1);
>     }
> 
>     public ChunkRenderDispatcher(int p_i7_1_)
>     {
>         this.listWorkerThreads = Lists.<Thread>newArrayList();
>         this.listThreadedWorkers = Lists.<ChunkRenderWorker>newArrayList();
>         this.queueChunkUpdates = Queues.<ChunkCompileTaskGenerator>newPriorityBlockingQueue();
>         this.worldVertexUploader = new WorldVertexBufferUploader();
>         this.vertexUploader = new VertexBufferUploader();
>         this.queueChunkUploads = Queues.<ChunkRenderDispatcher.PendingUpload>newPriorityQueue();
46c57,65
<         this.countRenderBuilders = MathHelper.clamp(j * 10, 1, i);
---
> 
>         if (p_i7_1_ < 0)
>         {
>             this.countRenderBuilders = MathHelper.clamp(j, 1, i);
>         }
>         else
>         {
>             this.countRenderBuilders = p_i7_1_;
>         }
123c142
<         boolean flag1;
---
>         boolean flag;
135c154
<             boolean flag = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
---
>             boolean flag1 = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
137c156
<             if (!flag)
---
>             if (!flag1)
142c161
<             flag1 = flag;
---
>             flag = flag1;
149c168
<         return flag1;
---
>         return flag;
165c184
<             catch (InterruptedException var7)
---
>             catch (InterruptedException var8)
220c239
<         boolean flag;
---
>         boolean flag1;
226c245
<             if (chunkcompiletaskgenerator == null)
---
>             if (chunkcompiletaskgenerator != null)
228,229c247,255
<                 flag = true;
<                 return flag;
---
>                 chunkcompiletaskgenerator.addFinishRunnable(new Runnable()
>                 {
>                     public void run()
>                     {
>                         ChunkRenderDispatcher.this.queueChunkUpdates.remove(chunkcompiletaskgenerator);
>                     }
>                 });
>                 boolean flag2 = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
>                 return flag2;
232,239c258,259
<             chunkcompiletaskgenerator.addFinishRunnable(new Runnable()
<             {
<                 public void run()
<                 {
<                     ChunkRenderDispatcher.this.queueChunkUpdates.remove(chunkcompiletaskgenerator);
<                 }
<             });
<             flag = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
---
>             boolean flag = true;
>             flag1 = flag;
246c266
<         return flag;
---
>         return flag1;
Only in src\modified/src/minecraft/net/minecraft/client/renderer/chunk: ChunkRenderWo#
Only in src\modified/src/minecraft/net/minecraft/client/renderer/chunk: ChunkRenderWo~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderWorker.java src\modified/src/minecraft/net/minecraft/client/renderer/chunk/ChunkRenderWorker.java
103c103
<         Entity entity = Minecraft.getMinecraft().getRenderViewEntity();
---
>         Entity entity1 = Minecraft.getMinecraft().getRenderViewEntity();
105c105
<         if (entity == null)
---
>         if (entity1 == null)
112,114c112,114
<             float f = (float)entity.posX;
<             float f1 = (float)entity.posY + entity.getEyeHeight();
<             float f2 = (float)entity.posZ;
---
>             float f = (float)entity1.posX;
>             float f1 = (float)entity1.posY + entity1.getEyeHeight();
>             float f2 = (float)entity1.posZ;
148,149c148,149
<             final CompiledChunk compiledchunk = generator.getCompiledChunk();
<             ArrayList arraylist = Lists.newArrayList();
---
>             final CompiledChunk compiledchunk1 = generator.getCompiledChunk();
>             ArrayList arraylist1 = Lists.newArrayList();
155c155
<                     if (compiledchunk.isLayerStarted(blockrenderlayer))
---
>                     if (compiledchunk1.isLayerStarted(blockrenderlayer))
157c157
<                         arraylist.add(this.chunkRenderDispatcher.uploadChunk(blockrenderlayer, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer), generator.getRenderChunk(), compiledchunk, generator.getDistanceSq()));
---
>                         arraylist1.add(this.chunkRenderDispatcher.uploadChunk(blockrenderlayer, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer), generator.getRenderChunk(), compiledchunk1, generator.getDistanceSq()));
163c163
<                 arraylist.add(this.chunkRenderDispatcher.uploadChunk(BlockRenderLayer.TRANSLUCENT, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT), generator.getRenderChunk(), compiledchunk, generator.getDistanceSq()));
---
>                 arraylist1.add(this.chunkRenderDispatcher.uploadChunk(BlockRenderLayer.TRANSLUCENT, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT), generator.getRenderChunk(), compiledchunk1, generator.getDistanceSq()));
166c166
<             final ListenableFuture<List<Object>> listenablefuture = Futures.allAsList(arraylist);
---
>             final ListenableFuture<List<Object>> listenablefuture = Futures.allAsList(arraylist1);
180c180,181
<                     label49:
---
> 
>                     try
182c183
<                         try
---
>                         if (generator.getStatus() != ChunkCompileTaskGenerator.Status.UPLOADING)
184,189d184
<                             if (generator.getStatus() == ChunkCompileTaskGenerator.Status.UPLOADING)
<                             {
<                                 generator.setStatus(ChunkCompileTaskGenerator.Status.DONE);
<                                 break label49;
<                             }
< 
194,197c189,190
<                         }
<                         finally
<                         {
<                             generator.getLock().unlock();
---
> 
>                             return;
200c193
<                         return;
---
>                         generator.setStatus(ChunkCompileTaskGenerator.Status.DONE);
202c195,200
<                     generator.getRenderChunk().setCompiledChunk(compiledchunk);
---
>                     finally
>                     {
>                         generator.getLock().unlock();
>                     }
> 
>                     generator.getRenderChunk().setCompiledChunk(compiledchunk1);
219c217,224
<         return !p_188263_2_.getChunkFromChunkCoords(p_188263_1_.getX() >> 4, p_188263_1_.getZ() >> 4).isEmpty();
---
>         if (p_188263_2_ == null)
>         {
>             return false;
>         }
>         else
>         {
>             return !p_188263_2_.getChunkFromChunkCoords(p_188263_1_.getX() >> 4, p_188263_1_.getZ() >> 4).isEmpty();
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/chunk/RenderChunk.java src\modified/src/minecraft/net/minecraft/client/renderer/chunk/RenderChunk.java
9a10,11
> import net.minecraft.block.BlockCactus;
> import net.minecraft.block.BlockRedstoneWire;
12a15
> import net.minecraft.client.multiplayer.WorldClient;
17a21
> import net.minecraft.client.renderer.RegionRenderCacheBuilder;
18a23
> import net.minecraft.client.renderer.ViewFrustum;
31a37,43
> import optifine.BlockPosM;
> import optifine.ChunkCacheOF;
> import optifine.Config;
> import optifine.Reflector;
> import optifine.ReflectorForge;
> import optifine.RenderEnv;
> import shadersmod.client.SVertexBuilder;
52c64,70
<     private ChunkCache region;
---
>     private static BlockRenderLayer[] ENUM_WORLD_BLOCK_LAYERS = BlockRenderLayer.values();
>     private BlockRenderLayer[] blockLayersSingle = new BlockRenderLayer[1];
>     private boolean isMipmaps = Config.isMipmaps();
>     private boolean fixBlockLayer = !Reflector.BetterFoliageClient.exists();
>     private boolean playerUpdate = false;
>     private RenderChunk[] renderChunksOfset16 = new RenderChunk[6];
>     private Chunk chunk;
103c121
<             for (EnumFacing enumfacing : EnumFacing.values())
---
>             for (EnumFacing enumfacing : EnumFacing.VALUES)
105a124
>                 this.renderChunksOfset16[enumfacing.ordinal()] = null;
107a127
>             this.chunk = null;
118,120c138,141
<             this.preRenderBlocks(generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT), this.position);
<             generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT).setVertexState(compiledchunk.getState());
<             this.postRenderBlocks(BlockRenderLayer.TRANSLUCENT, x, y, z, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT), compiledchunk);
---
>             BufferBuilder bufferbuilder = generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT);
>             this.preRenderBlocks(bufferbuilder, this.position);
>             bufferbuilder.setVertexState(compiledchunk.getState());
>             this.postRenderBlocks(BlockRenderLayer.TRANSLUCENT, x, y, z, bufferbuilder, compiledchunk);
149c170
<         if (!this.region.extendedLevelsInChunkCache())
---
>         if (this.world != null)
151,153c172
<             ++renderChunksUpdated;
<             boolean[] aboolean = new boolean[BlockRenderLayer.values().length];
<             BlockRendererDispatcher blockrendererdispatcher = Minecraft.getMinecraft().getBlockRendererDispatcher();
---
>             ChunkCacheOF chunkcacheof = this.makeChunkCacheOF();
155c174
<             for (BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.getAllInBoxMutable(blockpos, blockpos1))
---
>             if (!chunkcacheof.isEmpty())
157,158c176,181
<                 IBlockState iblockstate = this.region.getBlockState(blockpos$mutableblockpos);
<                 Block block = iblockstate.getBlock();
---
>                 ++renderChunksUpdated;
>                 chunkcacheof.renderStart();
>                 boolean[] aboolean = new boolean[ENUM_WORLD_BLOCK_LAYERS.length];
>                 BlockRendererDispatcher blockrendererdispatcher = Minecraft.getMinecraft().getBlockRendererDispatcher();
>                 boolean flag = Reflector.ForgeBlock_canRenderInLayer.exists();
>                 boolean flag1 = Reflector.ForgeHooksClient_setRenderLayer.exists();
160c183
<                 if (iblockstate.isOpaqueCube())
---
>                 for (Object blockposm0 : BlockPosM.getAllInBoxMutable(blockpos, blockpos1))
162,163c185,187
<                     lvt_9_1_.setOpaqueCube(blockpos$mutableblockpos);
<                 }
---
>                 	BlockPosM blockposm = (BlockPosM) blockposm0;
>                     IBlockState iblockstate = chunkcacheof.getBlockState(blockposm);
>                     Block block = iblockstate.getBlock();
165,167c189,192
<                 if (block.hasTileEntity())
<                 {
<                     TileEntity tileentity = this.region.getTileEntity(blockpos$mutableblockpos, Chunk.EnumCreateEntityType.CHECK);
---
>                     if (iblockstate.isOpaqueCube())
>                     {
>                         lvt_9_1_.setOpaqueCube(blockposm);
>                     }
169c194
<                     if (tileentity != null)
---
>                     if (ReflectorForge.blockHasTileEntity(iblockstate))
171c196
<                         TileEntitySpecialRenderer<TileEntity> tileentityspecialrenderer = TileEntityRendererDispatcher.instance.<TileEntity>getSpecialRenderer(tileentity);
---
>                         TileEntity tileentity = chunkcacheof.getTileEntity(blockposm, Chunk.EnumCreateEntityType.CHECK);
173c198
<                         if (tileentityspecialrenderer != null)
---
>                         if (tileentity != null)
175c200
<                             compiledchunk.addTileEntity(tileentity);
---
>                             TileEntitySpecialRenderer<TileEntity> tileentityspecialrenderer = TileEntityRendererDispatcher.instance.<TileEntity>getSpecialRenderer(tileentity);
177c202
<                             if (tileentityspecialrenderer.isGlobalRenderer(tileentity))
---
>                             if (tileentityspecialrenderer != null)
179c204,211
<                                 lvt_10_1_.add(tileentity);
---
>                                 if (tileentityspecialrenderer.isGlobalRenderer(tileentity))
>                                 {
>                                     lvt_10_1_.add(tileentity);
>                                 }
>                                 else
>                                 {
>                                     compiledchunk.addTileEntity(tileentity);
>                                 }
183d214
<                 }
185,186c216
<                 BlockRenderLayer blockrenderlayer1 = block.getBlockLayer();
<                 int j = blockrenderlayer1.ordinal();
---
>                     BlockRenderLayer[] ablockrenderlayer;
188,190c218,226
<                 if (block.getDefaultState().getRenderType() != EnumBlockRenderType.INVISIBLE)
<                 {
<                     BufferBuilder bufferbuilder = generator.getRegionRenderCacheBuilder().getWorldRendererByLayerId(j);
---
>                     if (flag)
>                     {
>                         ablockrenderlayer = ENUM_WORLD_BLOCK_LAYERS;
>                     }
>                     else
>                     {
>                         ablockrenderlayer = this.blockLayersSingle;
>                         ablockrenderlayer[0] = block.getBlockLayer();
>                     }
192c228
<                     if (!compiledchunk.isLayerStarted(blockrenderlayer1))
---
>                     for (int j = 0; j < ablockrenderlayer.length; ++j)
194,195c230,274
<                         compiledchunk.setLayerStarted(blockrenderlayer1);
<                         this.preRenderBlocks(bufferbuilder, blockpos);
---
>                         BlockRenderLayer blockrenderlayer = ablockrenderlayer[j];
> 
>                         if (flag)
>                         {
>                             boolean flag2 = Reflector.callBoolean(block, Reflector.ForgeBlock_canRenderInLayer, iblockstate, blockrenderlayer);
> 
>                             if (!flag2)
>                             {
>                                 continue;
>                             }
>                         }
> 
>                         if (flag1)
>                         {
>                             Reflector.callVoid(Reflector.ForgeHooksClient_setRenderLayer, blockrenderlayer);
>                         }
> 
>                         if (this.fixBlockLayer)
>                         {
>                             blockrenderlayer = this.fixBlockLayer(block, blockrenderlayer);
>                         }
> 
>                         int k = blockrenderlayer.ordinal();
> 
>                         if (block.getDefaultState().getRenderType() != EnumBlockRenderType.INVISIBLE)
>                         {
>                             BufferBuilder bufferbuilder = generator.getRegionRenderCacheBuilder().getWorldRendererByLayerId(k);
>                             bufferbuilder.setBlockLayer(blockrenderlayer);
>                             RenderEnv renderenv = bufferbuilder.getRenderEnv(chunkcacheof, iblockstate, blockposm);
>                             renderenv.setRegionRenderCacheBuilder(generator.getRegionRenderCacheBuilder());
> 
>                             if (!compiledchunk.isLayerStarted(blockrenderlayer))
>                             {
>                                 compiledchunk.setLayerStarted(blockrenderlayer);
>                                 this.preRenderBlocks(bufferbuilder, blockpos);
>                             }
> 
>                             aboolean[k] |= blockrendererdispatcher.renderBlock(iblockstate, blockposm, chunkcacheof, bufferbuilder);
> 
>                             if (renderenv.isOverlaysRendered())
>                             {
>                                 this.postRenderOverlays(generator.getRegionRenderCacheBuilder(), compiledchunk, aboolean);
>                                 renderenv.setOverlaysRendered(false);
>                             }
>                         }
198c277,280
<                     aboolean[j] |= blockrendererdispatcher.renderBlock(iblockstate, blockpos$mutableblockpos, this.region, bufferbuilder);
---
> //                    if (flag1)
> //                    {
> //                        Reflector.callVoid(Reflector.ForgeHooksClient_setRenderLayer, null);
> //                    }
200d281
<             }
202,204c283
<             for (BlockRenderLayer blockrenderlayer : BlockRenderLayer.values())
<             {
<                 if (aboolean[blockrenderlayer.ordinal()])
---
>                 for (BlockRenderLayer blockrenderlayer1 : ENUM_WORLD_BLOCK_LAYERS)
206,207c285,288
<                     compiledchunk.setLayerUsed(blockrenderlayer);
<                 }
---
>                     if (aboolean[blockrenderlayer1.ordinal()])
>                     {
>                         compiledchunk.setLayerUsed(blockrenderlayer1);
>                     }
209,211c290,298
<                 if (compiledchunk.isLayerStarted(blockrenderlayer))
<                 {
<                     this.postRenderBlocks(blockrenderlayer, x, y, z, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer), compiledchunk);
---
>                     if (compiledchunk.isLayerStarted(blockrenderlayer1))
>                     {
>                         if (Config.isShaders())
>                         {
>                             SVertexBuilder.calcNormalChunkLayer(generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer1));
>                         }
> 
>                         this.postRenderBlocks(blockrenderlayer1, x, y, z, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer1), compiledchunk);
>                     }
212a300,301
> 
>                 chunkcacheof.renderFinish();
214d302
<         }
216,217c304,305
<         compiledchunk.setVisibility(lvt_9_1_.computeVisibility());
<         this.lockCompileTask.lock();
---
>             compiledchunk.setVisibility(lvt_9_1_.computeVisibility());
>             this.lockCompileTask.lock();
219,231c307,320
<         try
<         {
<             Set<TileEntity> set = Sets.newHashSet(lvt_10_1_);
<             Set<TileEntity> set1 = Sets.newHashSet(this.setTileEntities);
<             set.removeAll(this.setTileEntities);
<             set1.removeAll(lvt_10_1_);
<             this.setTileEntities.clear();
<             this.setTileEntities.addAll(lvt_10_1_);
<             this.renderGlobal.updateTileEntities(set1, set);
<         }
<         finally
<         {
<             this.lockCompileTask.unlock();
---
>             try
>             {
>                 Set<TileEntity> set = Sets.newHashSet(lvt_10_1_);
>                 Set<TileEntity> set1 = Sets.newHashSet(this.setTileEntities);
>                 set.removeAll(this.setTileEntities);
>                 set1.removeAll(lvt_10_1_);
>                 this.setTileEntities.clear();
>                 this.setTileEntities.addAll(lvt_10_1_);
>                 this.renderGlobal.updateTileEntities(set1, set);
>             }
>             finally
>             {
>                 this.lockCompileTask.unlock();
>             }
281d369
<         this.region = new ChunkCache(this.world, this.position.add(-1, -1, -1), this.position.add(16, 16, 16), 1);
288c376
<         ChunkCompileTaskGenerator chunkcompiletaskgenerator;
---
>         ChunkCompileTaskGenerator chunkcompiletaskgenerator1;
292c380
<             if (this.compileTask == null || this.compileTask.getStatus() != ChunkCompileTaskGenerator.Status.PENDING)
---
>             if (this.compileTask != null && this.compileTask.getStatus() == ChunkCompileTaskGenerator.Status.PENDING)
294,298c382,384
<                 if (this.compileTask != null && this.compileTask.getStatus() != ChunkCompileTaskGenerator.Status.DONE)
<                 {
<                     this.compileTask.finish();
<                     this.compileTask = null;
<                 }
---
>                 ChunkCompileTaskGenerator chunkcompiletaskgenerator2 = null;
>                 return chunkcompiletaskgenerator2;
>             }
300,303c386,389
<                 this.compileTask = new ChunkCompileTaskGenerator(this, ChunkCompileTaskGenerator.Type.RESORT_TRANSPARENCY, this.getDistanceSq());
<                 this.compileTask.setCompiledChunk(this.compiledChunk);
<                 chunkcompiletaskgenerator = this.compileTask;
<                 return chunkcompiletaskgenerator;
---
>             if (this.compileTask != null && this.compileTask.getStatus() != ChunkCompileTaskGenerator.Status.DONE)
>             {
>                 this.compileTask.finish();
>                 this.compileTask = null;
306c392,395
<             chunkcompiletaskgenerator = null;
---
>             this.compileTask = new ChunkCompileTaskGenerator(this, ChunkCompileTaskGenerator.Type.RESORT_TRANSPARENCY, this.getDistanceSq());
>             this.compileTask.setCompiledChunk(this.compiledChunk);
>             ChunkCompileTaskGenerator chunkcompiletaskgenerator = this.compileTask;
>             chunkcompiletaskgenerator1 = chunkcompiletaskgenerator;
313c402
<         return chunkcompiletaskgenerator;
---
>         return chunkcompiletaskgenerator1;
411a501,505
> 
>         if (this.isWorldPlayerUpdate())
>         {
>             this.playerUpdate = true;
>         }
417a512
>         this.playerUpdate = false;
438a534,642
> 
>     private boolean isWorldPlayerUpdate()
>     {
>         if (this.world instanceof WorldClient)
>         {
>             WorldClient worldclient = (WorldClient)this.world;
>             return worldclient.isPlayerUpdate();
>         }
>         else
>         {
>             return false;
>         }
>     }
> 
>     public boolean isPlayerUpdate()
>     {
>         return this.playerUpdate;
>     }
> 
>     private BlockRenderLayer fixBlockLayer(Block p_fixBlockLayer_1_, BlockRenderLayer p_fixBlockLayer_2_)
>     {
>         if (this.isMipmaps)
>         {
>             if (p_fixBlockLayer_2_ == BlockRenderLayer.CUTOUT)
>             {
>                 if (p_fixBlockLayer_1_ instanceof BlockRedstoneWire)
>                 {
>                     return p_fixBlockLayer_2_;
>                 }
> 
>                 if (p_fixBlockLayer_1_ instanceof BlockCactus)
>                 {
>                     return p_fixBlockLayer_2_;
>                 }
> 
>                 return BlockRenderLayer.CUTOUT_MIPPED;
>             }
>         }
>         else if (p_fixBlockLayer_2_ == BlockRenderLayer.CUTOUT_MIPPED)
>         {
>             return BlockRenderLayer.CUTOUT;
>         }
> 
>         return p_fixBlockLayer_2_;
>     }
> 
>     private void postRenderOverlays(RegionRenderCacheBuilder p_postRenderOverlays_1_, CompiledChunk p_postRenderOverlays_2_, boolean[] p_postRenderOverlays_3_)
>     {
>         this.postRenderOverlay(BlockRenderLayer.CUTOUT, p_postRenderOverlays_1_, p_postRenderOverlays_2_, p_postRenderOverlays_3_);
>         this.postRenderOverlay(BlockRenderLayer.CUTOUT_MIPPED, p_postRenderOverlays_1_, p_postRenderOverlays_2_, p_postRenderOverlays_3_);
>         this.postRenderOverlay(BlockRenderLayer.TRANSLUCENT, p_postRenderOverlays_1_, p_postRenderOverlays_2_, p_postRenderOverlays_3_);
>     }
> 
>     private void postRenderOverlay(BlockRenderLayer p_postRenderOverlay_1_, RegionRenderCacheBuilder p_postRenderOverlay_2_, CompiledChunk p_postRenderOverlay_3_, boolean[] p_postRenderOverlay_4_)
>     {
>         BufferBuilder bufferbuilder = p_postRenderOverlay_2_.getWorldRendererByLayer(p_postRenderOverlay_1_);
> 
>         if (bufferbuilder.isDrawing())
>         {
>             p_postRenderOverlay_3_.setLayerStarted(p_postRenderOverlay_1_);
>             p_postRenderOverlay_4_[p_postRenderOverlay_1_.ordinal()] = true;
>         }
>     }
> 
>     private ChunkCacheOF makeChunkCacheOF()
>     {
>         BlockPos blockpos = this.position.add(-1, -1, -1);
>         ChunkCache chunkcache = this.createRegionRenderCache(this.world, blockpos, this.position.add(16, 16, 16), 1);
> 
>         if (Reflector.MinecraftForgeClient_onRebuildChunk.exists())
>         {
>             Reflector.call(Reflector.MinecraftForgeClient_onRebuildChunk, this.world, this.position, chunkcache);
>         }
> 
>         ChunkCacheOF chunkcacheof = new ChunkCacheOF(chunkcache, blockpos, 1);
>         return chunkcacheof;
>     }
> 
>     public RenderChunk getRenderChunkOffset16(ViewFrustum p_getRenderChunkOffset16_1_, EnumFacing p_getRenderChunkOffset16_2_)
>     {
>         RenderChunk renderchunk = this.renderChunksOfset16[p_getRenderChunkOffset16_2_.ordinal()];
> 
>         if (renderchunk == null)
>         {
>             BlockPos blockpos = this.getBlockPosOffset16(p_getRenderChunkOffset16_2_);
>             renderchunk = p_getRenderChunkOffset16_1_.getRenderChunk(blockpos);
>             this.renderChunksOfset16[p_getRenderChunkOffset16_2_.ordinal()] = renderchunk;
>         }
> 
>         return renderchunk;
>     }
> 
>     public Chunk getChunk(World p_getChunk_1_)
>     {
>         if (this.chunk != null && this.chunk.isLoaded())
>         {
>             return this.chunk;
>         }
>         else
>         {
>             this.chunk = p_getChunk_1_.getChunkFromBlockCoords(this.getPosition());
>             return this.chunk;
>         }
>     }
> 
>     protected ChunkCache createRegionRenderCache(World p_createRegionRenderCache_1_, BlockPos p_createRegionRenderCache_2_, BlockPos p_createRegionRenderCache_3_, int p_createRegionRenderCache_4_)
>     {
>         return new ChunkCache(p_createRegionRenderCache_1_, p_createRegionRenderCache_2_, p_createRegionRenderCache_3_, p_createRegionRenderCache_4_);
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/chunk/SetVisibility.java src\modified/src/minecraft/net/minecraft/client/renderer/chunk/SetVisibility.java
3d2
< import java.util.BitSet;
10,15c9
<     private final BitSet bitSet;
< 
<     public SetVisibility()
<     {
<         this.bitSet = new BitSet(COUNT_FACES * COUNT_FACES);
<     }
---
>     private long bits;
30,31c24,25
<         this.bitSet.set(facing.ordinal() + facing2.ordinal() * COUNT_FACES, p_178619_3_);
<         this.bitSet.set(facing2.ordinal() + facing.ordinal() * COUNT_FACES, p_178619_3_);
---
>         this.setBit(facing.ordinal() + facing2.ordinal() * COUNT_FACES, p_178619_3_);
>         this.setBit(facing2.ordinal() + facing.ordinal() * COUNT_FACES, p_178619_3_);
36c30,37
<         this.bitSet.set(0, this.bitSet.size(), visible);
---
>         if (visible)
>         {
>             this.bits = -1L;
>         }
>         else
>         {
>             this.bits = 0L;
>         }
41c42
<         return this.bitSet.get(facing.ordinal() + facing2.ordinal() * COUNT_FACES);
---
>         return this.getBit(facing.ordinal() + facing2.ordinal() * COUNT_FACES);
77a79,105
> 
>     private boolean getBit(int p_getBit_1_)
>     {
>         return (this.bits & (long)(1 << p_getBit_1_)) != 0L;
>     }
> 
>     private void setBit(int p_setBit_1_, boolean p_setBit_2_)
>     {
>         if (p_setBit_2_)
>         {
>             this.setBit(p_setBit_1_);
>         }
>         else
>         {
>             this.clearBit(p_setBit_1_);
>         }
>     }
> 
>     private void setBit(int p_setBit_1_)
>     {
>         this.bits |= (long)(1 << p_setBit_1_);
>     }
> 
>     private void clearBit(int p_clearBit_1_)
>     {
>         this.bits &= (long)(~(1 << p_clearBit_1_));
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/chunk/VisGraph.java src\modified/src/minecraft/net/minecraft/client/renderer/chunk/VisGraph.java
3c3
< import com.google.common.collect.Queues;
---
> import java.util.ArrayDeque;
6d5
< import java.util.Queue;
71,72c70,71
<         Queue<Integer> queue = Queues.<Integer>newArrayDeque();
<         queue.add(IntegerCache.getInteger(p_178604_1_));
---
>         ArrayDeque arraydeque = new ArrayDeque(384);
>         arraydeque.add(IntegerCache.getInteger(p_178604_1_));
75c74
<         while (!queue.isEmpty())
---
>         while (!arraydeque.isEmpty())
77c76
<             int i = ((Integer)queue.poll()).intValue();
---
>             int i = ((Integer)arraydeque.poll()).intValue();
80c79
<             for (EnumFacing enumfacing : EnumFacing.values())
---
>             for (EnumFacing enumfacing : EnumFacing.VALUES)
87c86
<                     queue.add(IntegerCache.getInteger(j));
---
>                     arraydeque.add(IntegerCache.getInteger(j));
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/culling/ClippingHelper.java src\modified/src/minecraft/net/minecraft/client/renderer/culling/ClippingHelper.java
10c10
<     private double dot(float[] p_178624_1_, double p_178624_2_, double p_178624_4_, double p_178624_6_)
---
>     private float dot(float[] p_dot_1_, float p_dot_2_, float p_dot_3_, float p_dot_4_)
12c12
<         return (double)p_178624_1_[0] * p_178624_2_ + (double)p_178624_1_[1] * p_178624_4_ + (double)p_178624_1_[2] * p_178624_6_ + (double)p_178624_1_[3];
---
>         return p_dot_1_[0] * p_dot_2_ + p_dot_1_[1] * p_dot_3_ + p_dot_1_[2] * p_dot_4_ + p_dot_1_[3];
19a20,26
>         float f = (float)p_78553_1_;
>         float f1 = (float)p_78553_3_;
>         float f2 = (float)p_78553_5_;
>         float f3 = (float)p_78553_7_;
>         float f4 = (float)p_78553_9_;
>         float f5 = (float)p_78553_11_;
> 
24c31
<             if (this.dot(afloat, p_78553_1_, p_78553_3_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_3_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_1_, p_78553_9_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_9_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_1_, p_78553_3_, p_78553_11_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_3_, p_78553_11_) <= 0.0D && this.dot(afloat, p_78553_1_, p_78553_9_, p_78553_11_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_9_, p_78553_11_) <= 0.0D)
---
>             if (this.dot(afloat, f, f1, f2) <= 0.0F && this.dot(afloat, f3, f1, f2) <= 0.0F && this.dot(afloat, f, f4, f2) <= 0.0F && this.dot(afloat, f3, f4, f2) <= 0.0F && this.dot(afloat, f, f1, f5) <= 0.0F && this.dot(afloat, f3, f1, f5) <= 0.0F && this.dot(afloat, f, f4, f5) <= 0.0F && this.dot(afloat, f3, f4, f5) <= 0.0F)
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerArmorBase.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerArmorBase.java
4a5,7
> 
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
8a12
> import net.minecraft.entity.Entity;
13a18,23
> import optifine.Config;
> import optifine.CustomItems;
> import optifine.Reflector;
> import optifine.ReflectorForge;
> import shadersmod.client.Shaders;
> import shadersmod.client.ShadersRender;
49a60,66
>         
>         float[] rgb = ColorUtils.intToRGBAF(ColorUtils.getChromaColor(slotIn.ordinal() * 100));
>         
>         this.colorR = rgb[0];
>         this.colorG = rgb[1];
>         this.colorB = rgb[2];
>         
57a75,80
> 
>                 if (Reflector.ForgeHooksClient.exists())
>                 {
>                     t = this.getArmorModelHook(entityLivingBaseIn, itemstack, slotIn, t);
>                 }
> 
62d84
<                 this.renderer.bindTexture(this.getArmorResource(itemarmor, flag));
64c86
<                 switch (itemarmor.getArmorMaterial())
---
>                 if (!Config.isCustomItems() || !CustomItems.bindCustomArmorTexture(itemstack, slotIn, (String)null))
66,71c88,106
<                     case LEATHER:
<                         int i = itemarmor.getColor(itemstack);
<                         float f = (float)(i >> 16 & 255) / 255.0F;
<                         float f1 = (float)(i >> 8 & 255) / 255.0F;
<                         float f2 = (float)(i & 255) / 255.0F;
<                         GlStateManager.color(this.colorR * f, this.colorG * f1, this.colorB * f2, this.alpha);
---
>                     if (Reflector.ForgeHooksClient_getArmorTexture.exists())
>                     {
>                         this.renderer.bindTexture(this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, (String)null));
>                     }
>                     else
>                     {
>                         this.renderer.bindTexture(this.getArmorResource(itemarmor, flag));
>                     }
>                 }
> 
>                 if (Reflector.ForgeHooksClient_getArmorTexture.exists())
>                 {
>                     if (ReflectorForge.armorHasOverlay(itemarmor, itemstack))
>                     {
>                         int j = itemarmor.getColor(itemstack);
>                         float f3 = (float)(j >> 16 & 255) / 255.0F;
>                         float f4 = (float)(j >> 8 & 255) / 255.0F;
>                         float f5 = (float)(j & 255) / 255.0F;
>                         GlStateManager.color(this.colorR * f3, this.colorG * f4, this.colorB * f5, this.alpha);
73d107
<                         this.renderer.bindTexture(this.getArmorResource(itemarmor, flag, "overlay"));
74a109,140
>                         if (!Config.isCustomItems() || !CustomItems.bindCustomArmorTexture(itemstack, slotIn, "overlay"))
>                         {
>                             this.renderer.bindTexture(this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, "overlay"));
>                         }
>                     }
> 
>                     GlStateManager.color(this.colorR, this.colorG, this.colorB, this.alpha);
>                     t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
> 
>                     if (!this.skipRenderGlint && itemstack.hasEffect() && (!Config.isCustomItems() || !CustomItems.renderCustomArmorEffect(entityLivingBaseIn, itemstack, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale)))
>                     {
>                         renderEnchantedGlint(this.renderer, entityLivingBaseIn, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
>                     }
> 
>                     return;
>                 }
> 
>                 switch (itemarmor.getArmorMaterial())
>                 {
>                     case LEATHER:
> //                        int i = itemarmor.getColor(itemstack);
> //                        float f = (float)(i >> 16 & 255) / 255.0F;
> //                        float f1 = (float)(i >> 8 & 255) / 255.0F;
> //                        float f2 = (float)(i & 255) / 255.0F;
> //                        GlStateManager.color(this.colorR * f, this.colorG * f1, this.colorB * f2, this.alpha);
> //                        t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
> //
> //                        if (!Config.isCustomItems() || !CustomItems.bindCustomArmorTexture(itemstack, slotIn, "overlay"))
> //                        {
> //                            this.renderer.bindTexture(this.getArmorResource(itemarmor, flag, "overlay"));
> //                        }
>                        
80a147
>                 }
82,86c149,151
<                     default:
<                         if (!this.skipRenderGlint && itemstack.isItemEnchanted())
<                         {
<                             renderEnchantedGlint(this.renderer, entityLivingBaseIn, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
<                         }
---
>                 if (!this.skipRenderGlint && itemstack.isItemEnchanted() && (!Config.isCustomItems() || !CustomItems.renderCustomArmorEffect(entityLivingBaseIn, itemstack, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale)))
>                 {
>                     renderEnchantedGlint(this.renderer, entityLivingBaseIn, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
104,113c169
<         float f = (float)p_188364_1_.ticksExisted + p_188364_5_;
<         p_188364_0_.bindTexture(ENCHANTED_ITEM_GLINT_RES);
<         Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
<         GlStateManager.enableBlend();
<         GlStateManager.depthFunc(514);
<         GlStateManager.depthMask(false);
<         float f1 = 0.5F;
<         GlStateManager.color(0.5F, 0.5F, 0.5F, 1.0F);
< 
<         for (int i = 0; i < 2; ++i)
---
>         if (!Config.isShaders() || !Shaders.isShadowPass)
115,118c171,202
<             GlStateManager.disableLighting();
<             GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_COLOR, GlStateManager.DestFactor.ONE);
<             float f2 = 0.76F;
<             GlStateManager.color(0.38F, 0.19F, 0.608F, 1.0F);
---
>             float f = (float)p_188364_1_.ticksExisted + p_188364_5_;
>             p_188364_0_.bindTexture(ENCHANTED_ITEM_GLINT_RES);
> 
>             if (Config.isShaders())
>             {
>                 ShadersRender.renderEnchantedGlintBegin();
>             }
> 
>             Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
>             GlStateManager.enableBlend();
>             GlStateManager.depthFunc(514);
>             GlStateManager.depthMask(false);
>             float f1 = 0.5F;
>             GlStateManager.color(0.5F, 0.5F, 0.5F, 1.0F);
> 
>             for (int i = 0; i < 2; ++i)
>             {
>                 GlStateManager.disableLighting();
>                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_COLOR, GlStateManager.DestFactor.ONE);
>                 float f2 = 0.76F;
>                 GlStateManager.color(0.38F, 0.19F, 0.608F, 1.0F);
>                 GlStateManager.matrixMode(5890);
>                 GlStateManager.loadIdentity();
>                 float f3 = 0.33333334F;
>                 GlStateManager.scale(0.33333334F, 0.33333334F, 0.33333334F);
>                 GlStateManager.rotate(30.0F - (float)i * 60.0F, 0.0F, 0.0F, 1.0F);
>                 GlStateManager.translate(0.0F, f * (0.001F + (float)i * 0.003F) * 20.0F, 0.0F);
>                 GlStateManager.matrixMode(5888);
>                 model.render(p_188364_1_, p_188364_3_, p_188364_4_, p_188364_6_, p_188364_7_, p_188364_8_, p_188364_9_);
>                 GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
>             }
> 
121,124d204
<             float f3 = 0.33333334F;
<             GlStateManager.scale(0.33333334F, 0.33333334F, 0.33333334F);
<             GlStateManager.rotate(30.0F - (float)i * 60.0F, 0.0F, 0.0F, 1.0F);
<             GlStateManager.translate(0.0F, f * (0.001F + (float)i * 0.003F) * 20.0F, 0.0F);
126,128c206,210
<             model.render(p_188364_1_, p_188364_3_, p_188364_4_, p_188364_6_, p_188364_7_, p_188364_8_, p_188364_9_);
<             GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
<         }
---
>             GlStateManager.enableLighting();
>             GlStateManager.depthMask(true);
>             GlStateManager.depthFunc(515);
>             GlStateManager.disableBlend();
>             Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
130,137c212,216
<         GlStateManager.matrixMode(5890);
<         GlStateManager.loadIdentity();
<         GlStateManager.matrixMode(5888);
<         GlStateManager.enableLighting();
<         GlStateManager.depthMask(true);
<         GlStateManager.depthFunc(515);
<         GlStateManager.disableBlend();
<         Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
---
>             if (Config.isShaders())
>             {
>                 ShadersRender.renderEnchantedGlintEnd();
>             }
>         }
161a241,271
> 
>     protected T getArmorModelHook(EntityLivingBase p_getArmorModelHook_1_, ItemStack p_getArmorModelHook_2_, EntityEquipmentSlot p_getArmorModelHook_3_, T p_getArmorModelHook_4_)
>     {
>         return p_getArmorModelHook_4_;
>     }
> 
>     public ResourceLocation getArmorResource(Entity p_getArmorResource_1_, ItemStack p_getArmorResource_2_, EntityEquipmentSlot p_getArmorResource_3_, String p_getArmorResource_4_)
>     {
>         ItemArmor itemarmor = (ItemArmor)p_getArmorResource_2_.getItem();
>         String s = itemarmor.getArmorMaterial().getName();
>         String s1 = "minecraft";
>         int i = s.indexOf(58);
> 
>         if (i != -1)
>         {
>             s1 = s.substring(0, i);
>             s = s.substring(i + 1);
>         }
> 
>         String s2 = String.format("%s:textures/models/armor/%s_layer_%d%s.png", s1, s, this.isLegSlot(p_getArmorResource_3_) ? 2 : 1, p_getArmorResource_4_ == null ? "" : String.format("_%s", p_getArmorResource_4_));
>         s2 = Reflector.callString(Reflector.ForgeHooksClient_getArmorTexture, p_getArmorResource_1_, p_getArmorResource_2_, s2, p_getArmorResource_3_, p_getArmorResource_4_);
>         ResourceLocation resourcelocation = ARMOR_TEXTURE_RES_MAP.get(s2);
> 
>         if (resourcelocation == null)
>         {
>             resourcelocation = new ResourceLocation(s2);
>             ARMOR_TEXTURE_RES_MAP.put(s2, resourcelocation);
>         }
> 
>         return resourcelocation;
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerCape.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerCape.java
48a49,53
>                 if (f2 > 165.0F)
>                 {
>                     f2 = 165.0F;
>                 }
> 
54a60
>                     GlStateManager.translate(0.0F, 0.142F, -0.0178F);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerElytra.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerElytra.java
12a13,14
> import optifine.Config;
> import optifine.CustomItems;
46c48
<                 else if (abstractclientplayer.hasPlayerInfo() && abstractclientplayer.getLocationCape() != null && abstractclientplayer.isWearing(EnumPlayerModelParts.CAPE))
---
>                 else if (abstractclientplayer.hasElytraCape() && abstractclientplayer.hasPlayerInfo() && abstractclientplayer.getLocationCape() != null && abstractclientplayer.isWearing(EnumPlayerModelParts.CAPE))
52c54,61
<                     this.renderPlayer.bindTexture(TEXTURE_ELYTRA);
---
>                     ResourceLocation resourcelocation1 = TEXTURE_ELYTRA;
> 
>                     if (Config.isCustomItems())
>                     {
>                         resourcelocation1 = CustomItems.getCustomElytraTexture(itemstack, resourcelocation1);
>                     }
> 
>                     this.renderPlayer.bindTexture(resourcelocation1);
57c66,73
<                 this.renderPlayer.bindTexture(TEXTURE_ELYTRA);
---
>                 ResourceLocation resourcelocation = TEXTURE_ELYTRA;
> 
>                 if (Config.isCustomItems())
>                 {
>                     resourcelocation = CustomItems.getCustomElytraTexture(itemstack, resourcelocation);
>                 }
> 
>                 this.renderPlayer.bindTexture(resourcelocation);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerEnderDragonEyes.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerEnderDragonEyes.java
8a9,10
> import optifine.Config;
> import shadersmod.client.Shaders;
34a37,43
> 
>         if (Config.isShaders())
>         {
>             Shaders.beginSpiderEyes();
>         }
> 
>         Config.getRenderGlobal().renderOverlayEyes = true;
35a45,51
>         Config.getRenderGlobal().renderOverlayEyes = false;
> 
>         if (Config.isShaders())
>         {
>             Shaders.endSpiderEyes();
>         }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerEndermanEyes.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerEndermanEyes.java
8a9,10
> import optifine.Config;
> import shadersmod.client.Shaders;
34a37,43
> 
>         if (Config.isShaders())
>         {
>             Shaders.beginSpiderEyes();
>         }
> 
>         Config.getRenderGlobal().renderOverlayEyes = true;
35a45,51
>         Config.getRenderGlobal().renderOverlayEyes = false;
> 
>         if (Config.isShaders())
>         {
>             Shaders.endSpiderEyes();
>         }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerSheepWool.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerSheepWool.java
8a9,10
> import optifine.Config;
> import optifine.CustomColors;
14c16
<     private final ModelSheep1 sheepModel = new ModelSheep1();
---
>     public ModelSheep1 sheepModel = new ModelSheep1();
36a39,45
> 
>                 if (Config.isCustomColors())
>                 {
>                     afloat1 = CustomColors.getSheepColors(EnumDyeColor.byMetadata(k), afloat1);
>                     afloat2 = CustomColors.getSheepColors(EnumDyeColor.byMetadata(l), afloat2);
>                 }
> 
41a51,56
> 
>                 if (Config.isCustomColors())
>                 {
>                     afloat = CustomColors.getSheepColors(entitylivingbaseIn.getFleeceColor(), afloat);
>                 }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerSlimeGel.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerSlimeGel.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
23c25,29
<             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
---
>         
>         	long uuid = entitylivingbaseIn.getUniqueID().getMostSignificantBits() * entitylivingbaseIn.getUniqueID().getLeastSignificantBits();
>         	float[] rgb = ColorUtils.intToRGBAF(ColorUtils.getChromaColor(uuid));
>             //GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
>         	GlStateManager.color(rgb[0], rgb[1], rgb[2], 1.0F);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerSpiderEyes.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerSpiderEyes.java
8a9,10
> import optifine.Config;
> import shadersmod.client.Shaders;
41a44,50
> 
>         if (Config.isShaders())
>         {
>             Shaders.beginSpiderEyes();
>         }
> 
>         Config.getRenderGlobal().renderOverlayEyes = true;
42a52,58
>         Config.getRenderGlobal().renderOverlayEyes = false;
> 
>         if (Config.isShaders())
>         {
>             Shaders.endSpiderEyes();
>         }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerWolfCollar.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/layers/LayerWolfCollar.java
6a7,8
> import optifine.Config;
> import optifine.CustomColors;
23a26,31
> 
>             if (Config.isCustomColors())
>             {
>                 afloat = CustomColors.getWolfCollarColors(entitylivingbaseIn.getCollarColor(), afloat);
>             }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/Render.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/Render.java
24a25,27
> import net.optifine.entity.model.IEntityRenderer;
> import optifine.Config;
> import shadersmod.client.Shaders;
26c29
< public abstract class Render<T extends Entity>
---
> public abstract class Render<T extends Entity> implements IEntityRenderer
30c33
<     protected float shadowSize;
---
>     public float shadowSize;
36a40,41
>     private Class entityClass = null;
>     private ResourceLocation locationTextureCustom = null;
117a123,127
>         if (this.locationTextureCustom != null)
>         {
>             resourcelocation = this.locationTextureCustom;
>         }
> 
197,204c207
<         GlStateManager.enableBlend();
<         GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
<         this.renderManager.renderEngine.bindTexture(SHADOW_TEXTURES);
<         World world = this.getWorldFromRenderManager();
<         GlStateManager.depthMask(false);
<         float f = this.shadowSize;
< 
<         if (entityIn instanceof EntityLiving)
---
>         if (!Config.isShaders() || !Shaders.shouldSkipDefaultShadow)
206,207c209,214
<             EntityLiving entityliving = (EntityLiving)entityIn;
<             f *= entityliving.getRenderSizeModifier();
---
>             GlStateManager.enableBlend();
>             GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
>             this.renderManager.renderEngine.bindTexture(SHADOW_TEXTURES);
>             World world = this.getWorldFromRenderManager();
>             GlStateManager.depthMask(false);
>             float f = this.shadowSize;
209c216
<             if (entityliving.isChild())
---
>             if (entityIn instanceof EntityLiving)
211,213c218,219
<                 f *= 0.5F;
<             }
<         }
---
>                 EntityLiving entityliving = (EntityLiving)entityIn;
>                 f *= entityliving.getRenderSizeModifier();
215,229c221,225
<         double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
<         double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
<         double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
<         int i = MathHelper.floor(d5 - (double)f);
<         int j = MathHelper.floor(d5 + (double)f);
<         int k = MathHelper.floor(d0 - (double)f);
<         int l = MathHelper.floor(d0);
<         int i1 = MathHelper.floor(d1 - (double)f);
<         int j1 = MathHelper.floor(d1 + (double)f);
<         double d2 = x - d5;
<         double d3 = y - d0;
<         double d4 = z - d1;
<         Tessellator tessellator = Tessellator.getInstance();
<         BufferBuilder bufferbuilder = tessellator.getBuffer();
<         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
---
>                 if (entityliving.isChild())
>                 {
>                     f *= 0.5F;
>                 }
>             }
231,233c227,241
<         for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1)))
<         {
<             IBlockState iblockstate = world.getBlockState(blockpos.down());
---
>             double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
>             double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
>             double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
>             int i = MathHelper.floor(d5 - (double)f);
>             int j = MathHelper.floor(d5 + (double)f);
>             int k = MathHelper.floor(d0 - (double)f);
>             int l = MathHelper.floor(d0);
>             int i1 = MathHelper.floor(d1 - (double)f);
>             int j1 = MathHelper.floor(d1 + (double)f);
>             double d2 = x - d5;
>             double d3 = y - d0;
>             double d4 = z - d1;
>             Tessellator tessellator = Tessellator.getInstance();
>             BufferBuilder bufferbuilder = tessellator.getBuffer();
>             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
235c243
<             if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE && world.getLightFromNeighbors(blockpos) > 3)
---
>             for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1)))
237c245,250
<                 this.renderShadowSingle(iblockstate, x, y, z, blockpos, shadowAlpha, f, d2, d3, d4);
---
>                 IBlockState iblockstate = world.getBlockState(blockpos.down());
> 
>                 if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE && world.getLightFromNeighbors(blockpos) > 3)
>                 {
>                     this.renderShadowSingle(iblockstate, x, y, z, blockpos, shadowAlpha, f, d2, d3, d4);
>                 }
239d251
<         }
241,244c253,257
<         tessellator.draw();
<         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
<         GlStateManager.disableBlend();
<         GlStateManager.depthMask(true);
---
>             tessellator.draw();
>             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
>             GlStateManager.disableBlend();
>             GlStateManager.depthMask(true);
>         }
392a406,425
> 
>     public Class getEntityClass()
>     {
>         return this.entityClass;
>     }
> 
>     public void setEntityClass(Class p_setEntityClass_1_)
>     {
>         this.entityClass = p_setEntityClass_1_;
>     }
> 
>     public ResourceLocation getLocationTextureCustom()
>     {
>         return this.locationTextureCustom;
>     }
> 
>     public void setLocationTextureCustom(ResourceLocation p_setLocationTextureCustom_1_)
>     {
>         this.locationTextureCustom = p_setLocationTextureCustom_1_;
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/RenderItemFrame.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/RenderItemFrame.java
13a14
> import net.minecraft.entity.Entity;
15a17
> import net.minecraft.item.ItemMap;
19a22,24
> import optifine.Config;
> import optifine.Reflector;
> import optifine.ReflectorForge;
52c57
<         if (entity.getDisplayedItem().getItem() == Items.FILLED_MAP)
---
>         if (entity.getDisplayedItem().getItem() instanceof ItemMap)
100a106,116
>             if (!Config.zoomMode)
>             {
>                 Entity entity = this.mc.player;
>                 double d0 = itemFrame.getDistanceSq(entity.posX, entity.posY, entity.posZ);
> 
>                 if (d0 > 4096.0D)
>                 {
>                     return;
>                 }
>             }
> 
103c119
<             boolean flag = itemstack.getItem() == Items.FILLED_MAP;
---
>             boolean flag = itemstack.getItem() instanceof ItemMap;
107c123
<             if (flag)
---
>             if (!Reflector.postForgeBusEvent(Reflector.RenderItemInFrameEvent_Constructor, itemFrame, this))
109,117c125
<                 this.renderManager.renderEngine.bindTexture(MAP_BACKGROUND_TEXTURES);
<                 GlStateManager.rotate(180.0F, 0.0F, 0.0F, 1.0F);
<                 float f = 0.0078125F;
<                 GlStateManager.scale(0.0078125F, 0.0078125F, 0.0078125F);
<                 GlStateManager.translate(-64.0F, -64.0F, 0.0F);
<                 MapData mapdata = Items.FILLED_MAP.getMapData(itemstack, itemFrame.world);
<                 GlStateManager.translate(0.0F, 0.0F, -1.0F);
< 
<                 if (mapdata != null)
---
>                 if (flag)
119c127,147
<                     this.mc.entityRenderer.getMapItemRenderer().renderMap(mapdata, true);
---
>                     this.renderManager.renderEngine.bindTexture(MAP_BACKGROUND_TEXTURES);
>                     GlStateManager.rotate(180.0F, 0.0F, 0.0F, 1.0F);
>                     float f = 0.0078125F;
>                     GlStateManager.scale(0.0078125F, 0.0078125F, 0.0078125F);
>                     GlStateManager.translate(-64.0F, -64.0F, 0.0F);
>                     MapData mapdata = ReflectorForge.getMapData(Items.FILLED_MAP, itemstack, itemFrame.world);
>                     GlStateManager.translate(0.0F, 0.0F, -1.0F);
> 
>                     if (mapdata != null)
>                     {
>                         this.mc.entityRenderer.getMapItemRenderer().renderMap(mapdata, true);
>                     }
>                 }
>                 else
>                 {
>                     GlStateManager.scale(0.5F, 0.5F, 0.5F);
>                     GlStateManager.pushAttrib();
>                     RenderHelper.enableStandardItemLighting();
>                     this.itemRenderer.renderItem(itemstack, ItemCameraTransforms.TransformType.FIXED);
>                     RenderHelper.disableStandardItemLighting();
>                     GlStateManager.popAttrib();
121,129d148
<             }
<             else
<             {
<                 GlStateManager.scale(0.5F, 0.5F, 0.5F);
<                 GlStateManager.pushAttrib();
<                 RenderHelper.enableStandardItemLighting();
<                 this.itemRenderer.renderItem(itemstack, ItemCameraTransforms.TransformType.FIXED);
<                 RenderHelper.disableStandardItemLighting();
<                 GlStateManager.popAttrib();
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/RenderLiving.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/RenderLiving.java
12a13,14
> import optifine.Config;
> import shadersmod.client.Shaders;
74,76c76
<         Entity entity = entityLivingIn.getLeashedToEntity();
< 
<         if (entity != null)
---
>         if (!Config.isShaders() || !Shaders.isShadowPass)
78,85c78
<             y = y - (1.6D - (double)entityLivingIn.height) * 0.5D;
<             Tessellator tessellator = Tessellator.getInstance();
<             BufferBuilder bufferbuilder = tessellator.getBuffer();
<             double d0 = this.interpolateValue((double)entity.prevRotationYaw, (double)entity.rotationYaw, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
<             double d1 = this.interpolateValue((double)entity.prevRotationPitch, (double)entity.rotationPitch, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
<             double d2 = Math.cos(d0);
<             double d3 = Math.sin(d0);
<             double d4 = Math.sin(d1);
---
>             Entity entity = entityLivingIn.getLeashedToEntity();
87c80
<             if (entity instanceof EntityHanging)
---
>             if (entity != null)
89,92c82,89
<                 d2 = 0.0D;
<                 d3 = 0.0D;
<                 d4 = -1.0D;
<             }
---
>                 y = y - (1.6D - (double)entityLivingIn.height) * 0.5D;
>                 Tessellator tessellator = Tessellator.getInstance();
>                 BufferBuilder bufferbuilder = tessellator.getBuffer();
>                 double d0 = this.interpolateValue((double)entity.prevRotationYaw, (double)entity.rotationYaw, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
>                 double d1 = this.interpolateValue((double)entity.prevRotationPitch, (double)entity.rotationPitch, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
>                 double d2 = Math.cos(d0);
>                 double d3 = Math.sin(d0);
>                 double d4 = Math.sin(d1);
94,114c91,96
<             double d5 = Math.cos(d1);
<             double d6 = this.interpolateValue(entity.prevPosX, entity.posX, (double)partialTicks) - d2 * 0.7D - d3 * 0.5D * d5;
<             double d7 = this.interpolateValue(entity.prevPosY + (double)entity.getEyeHeight() * 0.7D, entity.posY + (double)entity.getEyeHeight() * 0.7D, (double)partialTicks) - d4 * 0.5D - 0.25D;
<             double d8 = this.interpolateValue(entity.prevPosZ, entity.posZ, (double)partialTicks) - d3 * 0.7D + d2 * 0.5D * d5;
<             double d9 = this.interpolateValue((double)entityLivingIn.prevRenderYawOffset, (double)entityLivingIn.renderYawOffset, (double)partialTicks) * 0.01745329238474369D + (Math.PI / 2D);
<             d2 = Math.cos(d9) * (double)entityLivingIn.width * 0.4D;
<             d3 = Math.sin(d9) * (double)entityLivingIn.width * 0.4D;
<             double d10 = this.interpolateValue(entityLivingIn.prevPosX, entityLivingIn.posX, (double)partialTicks) + d2;
<             double d11 = this.interpolateValue(entityLivingIn.prevPosY, entityLivingIn.posY, (double)partialTicks);
<             double d12 = this.interpolateValue(entityLivingIn.prevPosZ, entityLivingIn.posZ, (double)partialTicks) + d3;
<             x = x + d2;
<             z = z + d3;
<             double d13 = (double)((float)(d6 - d10));
<             double d14 = (double)((float)(d7 - d11));
<             double d15 = (double)((float)(d8 - d12));
<             GlStateManager.disableTexture2D();
<             GlStateManager.disableLighting();
<             GlStateManager.disableCull();
<             int i = 24;
<             double d16 = 0.025D;
<             bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
---
>                 if (entity instanceof EntityHanging)
>                 {
>                     d2 = 0.0D;
>                     d3 = 0.0D;
>                     d4 = -1.0D;
>                 }
116,120c98,115
<             for (int j = 0; j <= 24; ++j)
<             {
<                 float f = 0.5F;
<                 float f1 = 0.4F;
<                 float f2 = 0.3F;
---
>                 double d5 = Math.cos(d1);
>                 double d6 = this.interpolateValue(entity.prevPosX, entity.posX, (double)partialTicks) - d2 * 0.7D - d3 * 0.5D * d5;
>                 double d7 = this.interpolateValue(entity.prevPosY + (double)entity.getEyeHeight() * 0.7D, entity.posY + (double)entity.getEyeHeight() * 0.7D, (double)partialTicks) - d4 * 0.5D - 0.25D;
>                 double d8 = this.interpolateValue(entity.prevPosZ, entity.posZ, (double)partialTicks) - d3 * 0.7D + d2 * 0.5D * d5;
>                 double d9 = this.interpolateValue((double)entityLivingIn.prevRenderYawOffset, (double)entityLivingIn.renderYawOffset, (double)partialTicks) * 0.01745329238474369D + (Math.PI / 2D);
>                 d2 = Math.cos(d9) * (double)entityLivingIn.width * 0.4D;
>                 d3 = Math.sin(d9) * (double)entityLivingIn.width * 0.4D;
>                 double d10 = this.interpolateValue(entityLivingIn.prevPosX, entityLivingIn.posX, (double)partialTicks) + d2;
>                 double d11 = this.interpolateValue(entityLivingIn.prevPosY, entityLivingIn.posY, (double)partialTicks);
>                 double d12 = this.interpolateValue(entityLivingIn.prevPosZ, entityLivingIn.posZ, (double)partialTicks) + d3;
>                 x = x + d2;
>                 z = z + d3;
>                 double d13 = (double)((float)(d6 - d10));
>                 double d14 = (double)((float)(d7 - d11));
>                 double d15 = (double)((float)(d8 - d12));
>                 GlStateManager.disableTexture2D();
>                 GlStateManager.disableLighting();
>                 GlStateManager.disableCull();
122c117
<                 if (j % 2 == 0)
---
>                 if (Config.isShaders())
124,126c119
<                     f *= 0.7F;
<                     f1 *= 0.7F;
<                     f2 *= 0.7F;
---
>                     Shaders.beginLeash();
129,132c122,142
<                 float f3 = (float)j / 24.0F;
<                 bufferbuilder.pos(x + d13 * (double)f3 + 0.0D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F), z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
<                 bufferbuilder.pos(x + d13 * (double)f3 + 0.025D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
<             }
---
>                 int i = 24;
>                 double d16 = 0.025D;
>                 bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
> 
>                 for (int j = 0; j <= 24; ++j)
>                 {
>                     float f = 0.5F;
>                     float f1 = 0.4F;
>                     float f2 = 0.3F;
> 
>                     if (j % 2 == 0)
>                     {
>                         f *= 0.7F;
>                         f1 *= 0.7F;
>                         f2 *= 0.7F;
>                     }
> 
>                     float f3 = (float)j / 24.0F;
>                     bufferbuilder.pos(x + d13 * (double)f3 + 0.0D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F), z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
>                     bufferbuilder.pos(x + d13 * (double)f3 + 0.025D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
>                 }
134,135c144,145
<             tessellator.draw();
<             bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
---
>                 tessellator.draw();
>                 bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
137,141c147,165
<             for (int k = 0; k <= 24; ++k)
<             {
<                 float f4 = 0.5F;
<                 float f5 = 0.4F;
<                 float f6 = 0.3F;
---
>                 for (int k = 0; k <= 24; ++k)
>                 {
>                     float f4 = 0.5F;
>                     float f5 = 0.4F;
>                     float f6 = 0.3F;
> 
>                     if (k % 2 == 0)
>                     {
>                         f4 *= 0.7F;
>                         f5 *= 0.7F;
>                         f6 *= 0.7F;
>                     }
> 
>                     float f7 = (float)k / 24.0F;
>                     bufferbuilder.pos(x + d13 * (double)f7 + 0.0D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f7).color(f4, f5, f6, 1.0F).endVertex();
>                     bufferbuilder.pos(x + d13 * (double)f7 + 0.025D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F), z + d15 * (double)f7 + 0.025D).color(f4, f5, f6, 1.0F).endVertex();
>                 }
> 
>                 tessellator.draw();
143c167
<                 if (k % 2 == 0)
---
>                 if (Config.isShaders())
145,147c169
<                     f4 *= 0.7F;
<                     f5 *= 0.7F;
<                     f6 *= 0.7F;
---
>                     Shaders.endLeash();
150,152c172,174
<                 float f7 = (float)k / 24.0F;
<                 bufferbuilder.pos(x + d13 * (double)f7 + 0.0D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f7).color(f4, f5, f6, 1.0F).endVertex();
<                 bufferbuilder.pos(x + d13 * (double)f7 + 0.025D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F), z + d15 * (double)f7 + 0.025D).color(f4, f5, f6, 1.0F).endVertex();
---
>                 GlStateManager.enableLighting();
>                 GlStateManager.enableTexture2D();
>                 GlStateManager.enableCull();
154,158d175
< 
<             tessellator.draw();
<             GlStateManager.enableLighting();
<             GlStateManager.enableTexture2D();
<             GlStateManager.enableCull();
Only in src\modified/src/minecraft/net/minecraft/client/renderer/entity: RenderLivingB#
Only in src\modified/src/minecraft/net/minecraft/client/renderer/entity: RenderLivingB~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/RenderLivingBase.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/RenderLivingBase.java
19a20,23
> import net.optifine.entity.model.CustomEntityModels;
> import optifine.Config;
> import optifine.Reflector;
> 
21a26
> import shadersmod.client.Shaders;
27c32
<     protected ModelBase mainModel;
---
>     public ModelBase mainModel;
30a36,44
>     public static float NAME_TAG_RANGE = 64.0F;
>     public static float NAME_TAG_RANGE_SNEAK = 32.0F;
>     public float renderLimbSwing;
>     public float renderLimbSwingAmount;
>     public float renderAgeInTicks;
>     public float renderHeadYaw;
>     public float renderHeadPitch;
>     public float renderScaleFactor;
>     public static final boolean animateModelLiving = Boolean.getBoolean("animate.model.living");
39c53
<     protected <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean addLayer(U layer)
---
>     public <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean addLayer(U layer)
41c55
<         return this.layerRenderers.add((LayerRenderer<T>)layer);
---
>         return this.layerRenderers.add((LayerRenderer<T>) layer);
80,97c94,99
<         GlStateManager.pushMatrix();
<         GlStateManager.disableCull();
<         this.mainModel.swingProgress = this.getSwingProgress(entity, partialTicks);
<         this.mainModel.isRiding = entity.isRiding();
<         this.mainModel.isChild = entity.isChild();
< 
<         try
<         {
<             float f = this.interpolateRotation(entity.prevRenderYawOffset, entity.renderYawOffset, partialTicks);
<             float f1 = this.interpolateRotation(entity.prevRotationYawHead, entity.rotationYawHead, partialTicks);
<             float f2 = f1 - f;
< 
<             if (entity.isRiding() && entity.getRidingEntity() instanceof EntityLivingBase)
<             {
<                 EntityLivingBase entitylivingbase = (EntityLivingBase)entity.getRidingEntity();
<                 f = this.interpolateRotation(entitylivingbase.prevRenderYawOffset, entitylivingbase.renderYawOffset, partialTicks);
<                 f2 = f1 - f;
<                 float f3 = MathHelper.wrapDegrees(f2);
---
>         if (!Reflector.RenderLivingEvent_Pre_Constructor.exists() || !Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Pre_Constructor, entity, this, partialTicks, x, y, z))
>         {
>             if (animateModelLiving)
>             {
>                 entity.limbSwingAmount = 1.0F;
>             }
99,102c101,109
<                 if (f3 < -85.0F)
<                 {
<                     f3 = -85.0F;
<                 }
---
>             GlStateManager.pushMatrix();
>             GlStateManager.disableCull();
>             this.mainModel.swingProgress = this.getSwingProgress(entity, partialTicks);
>             this.mainModel.isRiding = entity.isRiding();
> 
>             if (Reflector.ForgeEntity_shouldRiderSit.exists())
>             {
>                 this.mainModel.isRiding = entity.isRiding() && entity.getRidingEntity() != null && Reflector.callBoolean(entity.getRidingEntity(), Reflector.ForgeEntity_shouldRiderSit);
>             }
104c111,119
<                 if (f3 >= 85.0F)
---
>             this.mainModel.isChild = entity.isChild();
> 
>             try
>             {
>                 float f = this.interpolateRotation(entity.prevRenderYawOffset, entity.renderYawOffset, partialTicks);
>                 float f1 = this.interpolateRotation(entity.prevRotationYawHead, entity.rotationYawHead, partialTicks);
>                 float f2 = f1 - f;
> 
>                 if (this.mainModel.isRiding && entity.getRidingEntity() instanceof EntityLivingBase)
106c121,143
<                     f3 = 85.0F;
---
>                     EntityLivingBase entitylivingbase = (EntityLivingBase)entity.getRidingEntity();
>                     f = this.interpolateRotation(entitylivingbase.prevRenderYawOffset, entitylivingbase.renderYawOffset, partialTicks);
>                     f2 = f1 - f;
>                     float f3 = MathHelper.wrapDegrees(f2);
> 
>                     if (f3 < -85.0F)
>                     {
>                         f3 = -85.0F;
>                     }
> 
>                     if (f3 >= 85.0F)
>                     {
>                         f3 = 85.0F;
>                     }
> 
>                     f = f1 - f3;
> 
>                     if (f3 * f3 > 2500.0F)
>                     {
>                         f += f3 * 0.2F;
>                     }
> 
>                     f2 = f1 - f;
109c146,152
<                 f = f1 - f3;
---
>                 float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
>                 this.renderLivingAt(entity, x, y, z);
>                 float f8 = this.handleRotationFloat(entity, partialTicks);
>                 this.rotateCorpse(entity, f8, f, partialTicks);
>                 float f4 = this.prepareScale(entity, partialTicks);
>                 float f5 = 0.0F;
>                 float f6 = 0.0F;
111c154
<                 if (f3 * f3 > 2500.0F)
---
>                 if (!entity.isRiding())
113,114c156,157
<                     f += f3 * 0.2F;
<                 }
---
>                     f5 = entity.prevLimbSwingAmount + (entity.limbSwingAmount - entity.prevLimbSwingAmount) * partialTicks;
>                     f6 = entity.limbSwing - entity.limbSwingAmount * (1.0F - partialTicks);
116,117c159,162
<                 f2 = f1 - f;
<             }
---
>                     if (entity.isChild())
>                     {
>                         f6 *= 3.0F;
>                     }
119,125c164,168
<             float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
<             this.renderLivingAt(entity, x, y, z);
<             float f8 = this.handleRotationFloat(entity, partialTicks);
<             this.rotateCorpse(entity, f8, f, partialTicks);
<             float f4 = this.prepareScale(entity, partialTicks);
<             float f5 = 0.0F;
<             float f6 = 0.0F;
---
>                     if (f5 > 1.0F)
>                     {
>                         f5 = 1.0F;
>                     }
>                 }
127,130c170,172
<             if (!entity.isRiding())
<             {
<                 f5 = entity.prevLimbSwingAmount + (entity.limbSwingAmount - entity.prevLimbSwingAmount) * partialTicks;
<                 f6 = entity.limbSwing - entity.limbSwingAmount * (1.0F - partialTicks);
---
>                 GlStateManager.enableAlpha();
>                 this.mainModel.setLivingAnimations(entity, f6, f5, partialTicks);
>                 this.mainModel.setRotationAngles(f6, f5, f8, f2, f7, f4, entity);
132c174
<                 if (entity.isChild())
---
>                 if (CustomEntityModels.isActive())
134c176,181
<                     f6 *= 3.0F;
---
>                     this.renderLimbSwing = f6;
>                     this.renderLimbSwingAmount = f5;
>                     this.renderAgeInTicks = f8;
>                     this.renderHeadYaw = f2;
>                     this.renderHeadPitch = f7;
>                     this.renderScaleFactor = f4;
137c184
<                 if (f5 > 1.0F)
---
>                 if (this.renderOutlines)
139,141c186,188
<                     f5 = 1.0F;
<                 }
<             }
---
>                     boolean flag1 = this.setScoreTeamColor(entity);
>                     GlStateManager.enableColorMaterial();
>                     GlStateManager.enableOutlineMode(this.getTeamColor(entity));
143,145c190,193
<             GlStateManager.enableAlpha();
<             this.mainModel.setLivingAnimations(entity, f6, f5, partialTicks);
<             this.mainModel.setRotationAngles(f6, f5, f8, f2, f7, f4, entity);
---
>                     if (!this.renderMarker)
>                     {
>                         this.renderModel(entity, f6, f5, f8, f2, f7, f4);
>                     }
147,151c195,201
<             if (this.renderOutlines)
<             {
<                 boolean flag1 = this.setScoreTeamColor(entity);
<                 GlStateManager.enableColorMaterial();
<                 GlStateManager.enableOutlineMode(this.getTeamColor(entity));
---
>                     if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
>                     {
>                         this.renderLayers(entity, f6, f5, partialTicks, f8, f2, f7, f4);
>                     }
> 
>                     GlStateManager.disableOutlineMode();
>                     GlStateManager.disableColorMaterial();
153c203,208
<                 if (!this.renderMarker)
---
>                     if (flag1)
>                     {
>                         this.unsetScoreTeamColor();
>                     }
>                 }
>                 else
154a210
>                     boolean flag = this.setDoRenderBrightness(entity, partialTicks);
156d211
<                 }
158,161c213,216
<                 if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
<                 {
<                     this.renderLayers(entity, f6, f5, partialTicks, f8, f2, f7, f4);
<                 }
---
>                     if (flag)
>                     {
>                         this.unsetBrightness();
>                     }
163,164c218
<                 GlStateManager.disableOutlineMode();
<                 GlStateManager.disableColorMaterial();
---
>                     GlStateManager.depthMask(true);
166,168c220,223
<                 if (flag1)
<                 {
<                     this.unsetScoreTeamColor();
---
>                     if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
>                     {
>                         this.renderLayers(entity, f6, f5, partialTicks, f8, f2, f7, f4);
>                     }
169a225,226
> 
>                 GlStateManager.disableRescaleNormal();
171c228
<             else
---
>             catch (Exception exception1)
173,179c230,231
<                 boolean flag = this.setDoRenderBrightness(entity, partialTicks);
<                 this.renderModel(entity, f6, f5, f8, f2, f7, f4);
< 
<                 if (flag)
<                 {
<                     this.unsetBrightness();
<                 }
---
>                 LOGGER.error("Couldn't render entity", (Throwable)exception1);
>             }
181c233,238
<                 GlStateManager.depthMask(true);
---
>             GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
>             GlStateManager.enableTexture2D();
>             GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
>             GlStateManager.enableCull();
>             GlStateManager.popMatrix();
>             super.doRender(entity, x, y, z, entityYaw, partialTicks);
183,186c240,242
<                 if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
<                 {
<                     this.renderLayers(entity, f6, f5, partialTicks, f8, f2, f7, f4);
<                 }
---
>             if (Reflector.RenderLivingEvent_Post_Constructor.exists())
>             {
>                 Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Post_Constructor, entity, this, partialTicks, x, y, z);
188,193d243
< 
<             GlStateManager.disableRescaleNormal();
<         }
<         catch (Exception exception)
<         {
<             LOGGER.error("Couldn't render entity", (Throwable)exception);
195,201d244
< 
<         GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
<         GlStateManager.enableTexture2D();
<         GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
<         GlStateManager.enableCull();
<         GlStateManager.popMatrix();
<         super.doRender(entity, x, y, z, entityYaw, partialTicks);
318a362,366
> 
>                 if (Config.isShaders())
>                 {
>                     Shaders.setEntityColor(1.0F, 0.0F, 0.0F, 0.3F);
>                 }
329a378,382
> 
>                 if (Config.isShaders())
>                 {
>                     Shaders.setEntityColor(f2, f3, f4, 1.0F - f1);
>                 }
389a443,447
> 
>         if (Config.isShaders())
>         {
>             Shaders.setEntityColor(0.0F, 0.0F, 0.0F, 0.0F);
>         }
480c538
<         if (this.canRenderName(entity))
---
>         if (!Reflector.RenderLivingEvent_Specials_Pre_Constructor.exists() || !Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Specials_Pre_Constructor, entity, this, x, y, z))
482,483c540,551
<             double d0 = entity.getDistanceSqToEntity(this.renderManager.renderViewEntity);
<             float f = entity.isSneaking() ? 32.0F : 64.0F;
---
>             if (this.canRenderName(entity))
>             {
>                 double d0 = entity.getDistanceSqToEntity(this.renderManager.renderViewEntity);
>                 float f = entity.isSneaking() ? NAME_TAG_RANGE_SNEAK : NAME_TAG_RANGE;
> 
>                 if (d0 < (double)(f * f))
>                 {
>                     String s = entity.getDisplayName().getFormattedText();
>                     GlStateManager.alphaFunc(516, 0.1F);
>                     this.renderEntityName(entity, x, y, z, s, d0);
>                 }
>             }
485c553
<             if (d0 < (double)(f * f))
---
>             if (Reflector.RenderLivingEvent_Specials_Post_Constructor.exists())
487,489c555
<                 String s = entity.getDisplayName().getFormattedText();
<                 GlStateManager.alphaFunc(516, 0.1F);
<                 this.renderEntityName(entity, x, y, z, s, d0);
---
>                 Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Specials_Post_Constructor, entity, this, x, y, z);
530a597,601
>     public List<LayerRenderer<T>> getLayerRenderers()
>     {
>         return this.layerRenderers;
>     }
> 
Only in src\modified/src/minecraft/net/minecraft/client/renderer/entity: RenderManager#
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java
3a4
> import java.util.Collections;
114a116,118
> import net.optifine.entity.model.CustomEntityModels;
> import optifine.PlayerItemsLayer;
> import optifine.Reflector;
118c122
<     private final Map < Class <? extends Entity > , Render <? extends Entity >> entityRenderMap = Maps. < Class <? extends Entity > , Render <? extends Entity >> newHashMap();
---
>     private final Map<Class, Render> entityRenderMap = Maps.newHashMap();
147a152,153
>     public Entity renderEntity = null;
>     public Render renderRender = null;
236a243,248
>         PlayerItemsLayer.register(this.skinMap);
> 
>         if (Reflector.RenderingRegistry_loadEntityRenderers.exists())
>         {
>             Reflector.call(Reflector.RenderingRegistry_loadEntityRenderers, this, this.entityRenderMap);
>         }
252c264
<             render = this.getEntityClassRenderObject((Class <? extends Entity >)entityClass.getSuperclass());
---
>             render = this.getEntityClassRenderObject((Class<? extends Entity>) entityClass.getSuperclass());
287c299
<             if (block == Blocks.BED)
---
>             if (Reflector.callBoolean(block, Reflector.ForgeBlock_isBed, iblockstate, worldIn, new BlockPos(livingPlayerIn), (EntityLivingBase)livingPlayerIn))
289c301,302
<                 int i = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
---
>                 EnumFacing enumfacing = (EnumFacing)Reflector.call(block, Reflector.ForgeBlock_getBedDirection, iblockstate, worldIn, new BlockPos(livingPlayerIn));
>                 int i = enumfacing.getHorizontalIndex();
292a306,311
>             else if (block == Blocks.BED)
>             {
>                 int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
>                 this.playerViewY = (float)(j * 90 + 180);
>                 this.playerViewX = 0.0F;
>             }
385a405,411
> 
>                     if (CustomEntityModels.isActive())
>                     {
>                         this.renderEntity = entityIn;
>                         this.renderRender = render;
>                     }
> 
388c414
<                 catch (Throwable throwable1)
---
>                 catch (Throwable throwable2)
390c416
<                     throw new ReportedException(CrashReport.makeCrashReport(throwable1, "Rendering entity in world"));
---
>                     throw new ReportedException(CrashReport.makeCrashReport(throwable2, "Rendering entity in world"));
400c426
<                 catch (Throwable throwable2)
---
>                 catch (Throwable throwable1)
402c428
<                     throw new ReportedException(CrashReport.makeCrashReport(throwable2, "Post-rendering entity in world"));
---
>                     throw new ReportedException(CrashReport.makeCrashReport(throwable1, "Post-rendering entity in world"));
543a570,579
> 
>     public Map<Class, Render> getEntityRenderMap()
>     {
>         return this.entityRenderMap;
>     }
> 
>     public Map<String, RenderPlayer> getSkinMap()
>     {
>         return Collections.<String, RenderPlayer>unmodifiableMap(this.skinMap);
>     }
Only in src\modified/src/minecraft/net/minecraft/client/renderer/entity: RenderManager~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/entity/RenderXPOrb.java src\modified/src/minecraft/net/minecraft/client/renderer/entity/RenderXPOrb.java
2a3,4
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
11a14,15
> import optifine.Config;
> import optifine.CustomColors;
15c19,105
<     private static final ResourceLocation EXPERIENCE_ORB_TEXTURES = new ResourceLocation("textures/entity/experience_orb.png");
---
> 	private static final ResourceLocation EXPERIENCE_ORB_TEXTURES = new ResourceLocation("textures/entity/experience_orb.png");
> 
> 	public RenderXPOrb(RenderManager renderManagerIn)
> 	{
> 		super(renderManagerIn);
> 		this.shadowSize = 0.15F;
> 		this.shadowOpaque = 0.75F;
> 	}
> 
> 	/**
> 	 * Renders the desired {@code T} type Entity.
> 	 */
> 	public void doRender(EntityXPOrb entity, double x, double y, double z, float entityYaw, float partialTicks)
> 	{
> 		if (!this.renderOutlines)
> 		{
> 			GlStateManager.pushMatrix();
> 			GlStateManager.translate((float)x, (float)y, (float)z);
> 			this.bindEntityTexture(entity);
> 			RenderHelper.enableStandardItemLighting();
> 			int i = entity.getTextureByXP();
> 			float f = (float)(i % 4 * 16 + 0) / 64.0F;
> 			float f1 = (float)(i % 4 * 16 + 16) / 64.0F;
> 			float f2 = (float)(i / 4 * 16 + 0) / 64.0F;
> 			float f3 = (float)(i / 4 * 16 + 16) / 64.0F;
> 			float f4 = 1.0F;
> 			float f5 = 0.5F;
> 			float f6 = 0.25F;
> 			int j = entity.getBrightnessForRender();
> 			int k = j % 65536;
> 			int l = j / 65536;
> 			OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)k, (float)l);
> 			GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
> 			float f7 = 255.0F;
> 			float f8 = ((float)entity.xpColor + partialTicks) / 2.0F;
> 
> 			if (Config.isCustomColors())
> 			{
> 				f8 = CustomColors.getXpOrbTimer(f8);
> 			}
> 
> 			l = (int)((MathHelper.sin(f8 + 0.0F) + 1.0F) * 0.5F * 255.0F);
> 			int i1 = 255;
> 			int j1 = (int)((MathHelper.sin(f8 + 4.1887903F) + 1.0F) * 0.1F * 255.0F);
> 			GlStateManager.translate(0.0F, 0.1F, 0.0F);
> 			GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
> 			GlStateManager.rotate((float)(this.renderManager.options.thirdPersonView == 2 ? -1 : 1) * -this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
> 			float f9 = 0.3F;
> 			GlStateManager.scale(0.3F, 0.3F, 0.3F);
> 			Tessellator tessellator = Tessellator.getInstance();
> 			BufferBuilder bufferbuilder = tessellator.getBuffer();
> 			bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
> 			//            int k1 = l;
> 			//            int l1 = 255;
> 			//            int i2 = j1;
> 			//int ticksOffset = entity.ticksExisted / 25 + entity.getEntityId();
> 
> 			long uuid = entity.getUniqueID().getMostSignificantBits() * entity.getUniqueID().getLeastSignificantBits();
> 			int[] rgb = ColorUtils.intToRGBAI(ColorUtils.getChromaColor(uuid));
> 
> 			int k1 = rgb[0];
> 			int l1 = rgb[1];
> 			int i2 = rgb[2];
> 
> 			//            if (Config.isCustomColors())
> 			//            {
> 			//                int j2 = CustomColors.getXpOrbColor(f8);
> 			//
> 			//                if (j2 >= 0)
> 			//                {
> 			//                    k1 = j2 >> 16 & 255;
> 			//                    l1 = j2 >> 8 & 255;
> 			//                    i2 = j2 >> 0 & 255;
> 			//                }
> 			//            }
> 
> 			bufferbuilder.pos(-0.5D, -0.25D, 0.0D).tex((double)f, (double)f3).color(k1, l1, i2, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
> 			bufferbuilder.pos(0.5D, -0.25D, 0.0D).tex((double)f1, (double)f3).color(k1, l1, i2, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
> 			bufferbuilder.pos(0.5D, 0.75D, 0.0D).tex((double)f1, (double)f2).color(k1, l1, i2, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
> 			bufferbuilder.pos(-0.5D, 0.75D, 0.0D).tex((double)f, (double)f2).color(k1, l1, i2, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
> 			tessellator.draw();
> 			GlStateManager.disableBlend();
> 			GlStateManager.disableRescaleNormal();
> 			GlStateManager.popMatrix();
> 			super.doRender(entity, x, y, z, entityYaw, partialTicks);
> 		}
> 	}
17,79c107,113
<     public RenderXPOrb(RenderManager renderManagerIn)
<     {
<         super(renderManagerIn);
<         this.shadowSize = 0.15F;
<         this.shadowOpaque = 0.75F;
<     }
< 
<     /**
<      * Renders the desired {@code T} type Entity.
<      */
<     public void doRender(EntityXPOrb entity, double x, double y, double z, float entityYaw, float partialTicks)
<     {
<         if (!this.renderOutlines)
<         {
<             GlStateManager.pushMatrix();
<             GlStateManager.translate((float)x, (float)y, (float)z);
<             this.bindEntityTexture(entity);
<             RenderHelper.enableStandardItemLighting();
<             int i = entity.getTextureByXP();
<             float f = (float)(i % 4 * 16 + 0) / 64.0F;
<             float f1 = (float)(i % 4 * 16 + 16) / 64.0F;
<             float f2 = (float)(i / 4 * 16 + 0) / 64.0F;
<             float f3 = (float)(i / 4 * 16 + 16) / 64.0F;
<             float f4 = 1.0F;
<             float f5 = 0.5F;
<             float f6 = 0.25F;
<             int j = entity.getBrightnessForRender();
<             int k = j % 65536;
<             int l = j / 65536;
<             OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)k, (float)l);
<             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
<             float f8 = 255.0F;
<             float f9 = ((float)entity.xpColor + partialTicks) / 2.0F;
<             l = (int)((MathHelper.sin(f9 + 0.0F) + 1.0F) * 0.5F * 255.0F);
<             int i1 = 255;
<             int j1 = (int)((MathHelper.sin(f9 + 4.1887903F) + 1.0F) * 0.1F * 255.0F);
<             GlStateManager.translate(0.0F, 0.1F, 0.0F);
<             GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
<             GlStateManager.rotate((float)(this.renderManager.options.thirdPersonView == 2 ? -1 : 1) * -this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
<             float f7 = 0.3F;
<             GlStateManager.scale(0.3F, 0.3F, 0.3F);
<             Tessellator tessellator = Tessellator.getInstance();
<             BufferBuilder bufferbuilder = tessellator.getBuffer();
<             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
<             bufferbuilder.pos(-0.5D, -0.25D, 0.0D).tex((double)f, (double)f3).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
<             bufferbuilder.pos(0.5D, -0.25D, 0.0D).tex((double)f1, (double)f3).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
<             bufferbuilder.pos(0.5D, 0.75D, 0.0D).tex((double)f1, (double)f2).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
<             bufferbuilder.pos(-0.5D, 0.75D, 0.0D).tex((double)f, (double)f2).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
<             tessellator.draw();
<             GlStateManager.disableBlend();
<             GlStateManager.disableRescaleNormal();
<             GlStateManager.popMatrix();
<             super.doRender(entity, x, y, z, entityYaw, partialTicks);
<         }
<     }
< 
<     /**
<      * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
<      */
<     protected ResourceLocation getEntityTexture(EntityXPOrb entity)
<     {
<         return EXPERIENCE_ORB_TEXTURES;
<     }
---
> 	/**
> 	 * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
> 	 */
> 	protected ResourceLocation getEntityTexture(EntityXPOrb entity)
> 	{
> 		return EXPERIENCE_ORB_TEXTURES;
> 	}
Only in src\modified/src/minecraft/net/minecraft/client/renderer: EntityRendere#
Only in src\modified/src/minecraft/net/minecraft/client/renderer: EntityRendere~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java src\modified/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
3,5d2
< import com.google.common.base.Predicate;
< import com.google.common.base.Predicates;
< import com.google.gson.JsonSyntaxException;
10a8,9
> import java.util.Calendar;
> import java.util.Date;
12a12
> 
14a15,31
> 
> import org.apache.logging.log4j.LogManager;
> import org.apache.logging.log4j.Logger;
> import org.golde.lttclientmeme.chroma.ColorUtils;
> import org.golde.lttclientmeme.event.events.RenderEvent;
> import org.lwjgl.input.Keyboard;
> import org.lwjgl.input.Mouse;
> import org.lwjgl.opengl.Display;
> import org.lwjgl.opengl.GL11;
> import org.lwjgl.opengl.GLContext;
> import org.lwjgl.util.glu.GLU;
> import org.lwjgl.util.glu.Project;
> 
> import com.google.common.base.Predicate;
> import com.google.common.base.Predicates;
> import com.google.gson.JsonSyntaxException;
> 
21a39,41
> import net.minecraft.client.gui.GuiDownloadTerrain;
> import net.minecraft.client.gui.GuiMainMenu;
> import net.minecraft.client.gui.GuiScreen;
23a44
> import net.minecraft.client.gui.advancements.GuiScreenAdvancements;
25a47,48
> import net.minecraft.client.renderer.chunk.RenderChunk;
> import net.minecraft.client.renderer.culling.ClippingHelper;
30a54
> import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
31a56
> import net.minecraft.client.resources.I18n;
33a59
> import net.minecraft.client.settings.GameSettings;
52a79
> import net.minecraft.server.integrated.IntegratedServer;
66a94,95
> import net.minecraft.util.text.TextComponentString;
> import net.minecraft.util.text.TextFormatting;
68a98
> import net.minecraft.world.WorldProvider;
70,75c100,108
< import org.apache.logging.log4j.LogManager;
< import org.apache.logging.log4j.Logger;
< import org.lwjgl.input.Mouse;
< import org.lwjgl.opengl.Display;
< import org.lwjgl.opengl.GLContext;
< import org.lwjgl.util.glu.Project;
---
> import optifine.Config;
> import optifine.CustomColors;
> import optifine.Lagometer;
> import optifine.RandomMobs;
> import optifine.Reflector;
> import optifine.ReflectorForge;
> import optifine.TextureUtils;
> import shadersmod.client.Shaders;
> import shadersmod.client.ShadersRender;
92c125
<     public final ItemRenderer itemRenderer;
---
>     public ItemRenderer itemRenderer;
100,101c133,134
<     private final MouseFilter mouseFilterXAxis = new MouseFilter();
<     private final MouseFilter mouseFilterYAxis = new MouseFilter();
---
>     private MouseFilter mouseFilterXAxis = new MouseFilter();
>     private MouseFilter mouseFilterYAxis = new MouseFilter();
169,171c202,204
<     private float fogColorRed;
<     private float fogColorGreen;
<     private float fogColorBlue;
---
>     public float fogColorRed;
>     public float fogColorGreen;
>     public float fogColorBlue;
192c225,238
<     private int frameCount;
---
>     public int frameCount;
>     private boolean initialized = false;
>     private World updatedWorld = null;
>     public boolean fogStandard = false;
>     private float clipDistance = 128.0F;
>     private long lastServerTime = 0L;
>     private int lastServerTicks = 0;
>     private int serverWaitTime = 0;
>     private int serverWaitTimeCurrent = 0;
>     private float avgServerTimeDiff = 0.0F;
>     private float avgServerTickDiff = 0.0F;
>     private long lastErrorCheckTimeMs = 0L;
>     private ShaderGroup[] fxaaShaders = new ShaderGroup[10];
>     private boolean loadVisibleChunks = false;
265a312,315
>             else if (Reflector.ForgeHooksClient_loadEntityShader.exists())
>             {
>                 Reflector.call(Reflector.ForgeHooksClient_loadEntityShader, entityIn, this);
>             }
269c319
<     private void loadShader(ResourceLocation resourceLocationIn)
---
>     public void loadShader(ResourceLocation resourceLocationIn)
271,283c321
<         try
<         {
<             this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
<             this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
<             this.useShader = true;
<         }
<         catch (IOException ioexception)
<         {
<             LOGGER.warn("Failed to load shader: {}", resourceLocationIn, ioexception);
<             this.shaderIndex = SHADER_COUNT;
<             this.useShader = false;
<         }
<         catch (JsonSyntaxException jsonsyntaxexception)
---
>         if (OpenGlHelper.isFramebufferEnabled())
285,287c323,340
<             LOGGER.warn("Failed to load shader: {}", resourceLocationIn, jsonsyntaxexception);
<             this.shaderIndex = SHADER_COUNT;
<             this.useShader = false;
---
>             try
>             {
>                 this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
>                 this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
>                 this.useShader = true;
>             }
>             catch (IOException ioexception)
>             {
>                 LOGGER.warn("Failed to load shader: {}", resourceLocationIn, ioexception);
>                 this.shaderIndex = SHADER_COUNT;
>                 this.useShader = false;
>             }
>             catch (JsonSyntaxException jsonsyntaxexception)
>             {
>                 LOGGER.warn("Failed to load shader: {}", resourceLocationIn, jsonsyntaxexception);
>                 this.shaderIndex = SHADER_COUNT;
>                 this.useShader = false;
>             }
348,351c401,409
<         float f3 = this.mc.world.getLightBrightness(new BlockPos(this.mc.getRenderViewEntity()));
<         float f4 = (float)this.mc.gameSettings.renderDistanceChunks / 32.0F;
<         float f2 = f3 * (1.0F - f4) + f4;
<         this.fogColor1 += (f2 - this.fogColor1) * 0.1F;
---
>         Entity entity = this.mc.getRenderViewEntity();
>         double d2 = entity.posX;
>         double d0 = entity.posY + (double)entity.getEyeHeight();
>         double d1 = entity.posZ;
>         float f2 = this.mc.world.getLightBrightness(new BlockPos(d2, d0, d1));
>         float f3 = (float)this.mc.gameSettings.renderDistanceChunks / 16.0F;
>         f3 = MathHelper.clamp(f3, 0.0F, 1.0F);
>         float f4 = f2 * (1.0F - f3) + f3;
>         this.fogColor1 += (f4 - this.fogColor1) * 0.1F;
407c465
<         if (entity != null)
---
>         if (entity != null && this.mc.world != null)
409c467,481
<             if (this.mc.world != null)
---
>             this.mc.mcProfiler.startSection("pick");
>             this.mc.pointedEntity = null;
>             double d0 = (double)this.mc.playerController.getBlockReachDistance();
>             this.mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
>             Vec3d vec3d = entity.getPositionEyes(partialTicks);
>             boolean flag = false;
>             int i = 3;
>             double d1 = d0;
> 
>             if (this.mc.playerController.extendedReach())
>             {
>                 d1 = 6.0D;
>                 d0 = d1;
>             }
>             else if (d0 > 3.0D)
411,418c483,484
<                 this.mc.mcProfiler.startSection("pick");
<                 this.mc.pointedEntity = null;
<                 double d0 = (double)this.mc.playerController.getBlockReachDistance();
<                 this.mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
<                 Vec3d vec3d = entity.getPositionEyes(partialTicks);
<                 boolean flag = false;
<                 int i = 3;
<                 double d1 = d0;
---
>                 flag = true;
>             }
420,431c486,489
<                 if (this.mc.playerController.extendedReach())
<                 {
<                     d1 = 6.0D;
<                     d0 = d1;
<                 }
<                 else
<                 {
<                     if (d0 > 3.0D)
<                     {
<                         flag = true;
<                     }
<                 }
---
>             if (this.mc.objectMouseOver != null)
>             {
>                 d1 = this.mc.objectMouseOver.hitVec.distanceTo(vec3d);
>             }
433c491,498
<                 if (this.mc.objectMouseOver != null)
---
>             Vec3d vec3d1 = entity.getLook(1.0F);
>             Vec3d vec3d2 = vec3d.addVector(vec3d1.xCoord * d0, vec3d1.yCoord * d0, vec3d1.zCoord * d0);
>             this.pointedEntity = null;
>             Vec3d vec3d3 = null;
>             float f = 1.0F;
>             List<Entity> list = this.mc.world.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec3d1.xCoord * d0, vec3d1.yCoord * d0, vec3d1.zCoord * d0).expand(1.0D, 1.0D, 1.0D), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>()
>             {
>                 public boolean apply(@Nullable Entity p_apply_1_)
435c500
<                     d1 = this.mc.objectMouseOver.hitVec.distanceTo(vec3d);
---
>                     return p_apply_1_ != null && p_apply_1_.canBeCollidedWith();
436a502,503
>             }));
>             double d2 = d1;
438,443c505,511
<                 Vec3d vec3d1 = entity.getLook(1.0F);
<                 Vec3d vec3d2 = vec3d.addVector(vec3d1.xCoord * d0, vec3d1.yCoord * d0, vec3d1.zCoord * d0);
<                 this.pointedEntity = null;
<                 Vec3d vec3d3 = null;
<                 float f = 1.0F;
<                 List<Entity> list = this.mc.world.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec3d1.xCoord * d0, vec3d1.yCoord * d0, vec3d1.zCoord * d0).expand(1.0D, 1.0D, 1.0D), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>()
---
>             for (int j = 0; j < list.size(); ++j)
>             {
>                 Entity entity1 = list.get(j);
>                 AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expandXyz((double)entity1.getCollisionBorderSize());
>                 RayTraceResult raytraceresult = axisalignedbb.calculateIntercept(vec3d, vec3d2);
> 
>                 if (axisalignedbb.isVecInside(vec3d))
445c513
<                     public boolean apply(@Nullable Entity p_apply_1_)
---
>                     if (d2 >= 0.0D)
447c515,517
<                         return p_apply_1_ != null && p_apply_1_.canBeCollidedWith();
---
>                         this.pointedEntity = entity1;
>                         vec3d3 = raytraceresult == null ? vec3d : raytraceresult.hitVec;
>                         d2 = 0.0D;
449,452c519,520
<                 }));
<                 double d2 = d1;
< 
<                 for (int j = 0; j < list.size(); ++j)
---
>                 }
>                 else if (raytraceresult != null)
454,456c522
<                     Entity entity1 = list.get(j);
<                     AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expandXyz((double)entity1.getCollisionBorderSize());
<                     RayTraceResult raytraceresult = axisalignedbb.calculateIntercept(vec3d, vec3d2);
---
>                     double d3 = vec3d.distanceTo(raytraceresult.hitVec);
458c524
<                     if (axisalignedbb.isVecInside(vec3d))
---
>                     if (d3 < d2 || d2 == 0.0D)
460c526,528
<                         if (d2 >= 0.0D)
---
>                         boolean flag1 = false;
> 
>                         if (Reflector.ForgeEntity_canRiderInteract.exists())
462,464c530
<                             this.pointedEntity = entity1;
<                             vec3d3 = raytraceresult == null ? vec3d : raytraceresult.hitVec;
<                             d2 = 0.0D;
---
>                             flag1 = Reflector.callBoolean(entity1, Reflector.ForgeEntity_canRiderInteract);
466,469d531
<                     }
<                     else if (raytraceresult != null)
<                     {
<                         double d3 = vec3d.distanceTo(raytraceresult.hitVec);
471c533
<                         if (d3 < d2 || d2 == 0.0D)
---
>                         if (!flag1 && entity1.getLowestRidingEntity() == entity.getLowestRidingEntity())
473,481c535
<                             if (entity1.getLowestRidingEntity() == entity.getLowestRidingEntity())
<                             {
<                                 if (d2 == 0.0D)
<                                 {
<                                     this.pointedEntity = entity1;
<                                     vec3d3 = raytraceresult.hitVec;
<                                 }
<                             }
<                             else
---
>                             if (d2 == 0.0D)
485d538
<                                 d2 = d3;
487a541,546
>                         else
>                         {
>                             this.pointedEntity = entity1;
>                             vec3d3 = raytraceresult.hitVec;
>                             d2 = d3;
>                         }
489a549
>             }
491,495c551,555
<                 if (this.pointedEntity != null && flag && vec3d.distanceTo(vec3d3) > 3.0D)
<                 {
<                     this.pointedEntity = null;
<                     this.mc.objectMouseOver = new RayTraceResult(RayTraceResult.Type.MISS, vec3d3, (EnumFacing)null, new BlockPos(vec3d3));
<                 }
---
>             if (this.pointedEntity != null && flag && vec3d.distanceTo(vec3d3) > 3.0D)
>             {
>                 this.pointedEntity = null;
>                 this.mc.objectMouseOver = new RayTraceResult(RayTraceResult.Type.MISS, vec3d3, (EnumFacing)null, new BlockPos(vec3d3));
>             }
497,499c557,559
<                 if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null))
<                 {
<                     this.mc.objectMouseOver = new RayTraceResult(this.pointedEntity, vec3d3);
---
>             if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null))
>             {
>                 this.mc.objectMouseOver = new RayTraceResult(this.pointedEntity, vec3d3);
501,504c561,563
<                     if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame)
<                     {
<                         this.mc.pointedEntity = this.pointedEntity;
<                     }
---
>                 if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame)
>                 {
>                     this.mc.pointedEntity = this.pointedEntity;
506,507d564
< 
<                 this.mc.mcProfiler.endSection();
508a566,567
> 
>             this.mc.mcProfiler.endSection();
556c615,650
<                 f = f * (this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * partialTicks);
---
> 
>                 if (Config.isDynamicFov())
>                 {
>                     f *= this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * partialTicks;
>                 }
>             }
> 
>             boolean flag = false;
> 
>             if (this.mc.currentScreen == null)
>             {
>                 GameSettings gamesettings = this.mc.gameSettings;
>                 flag = GameSettings.isKeyDown(this.mc.gameSettings.ofKeyBindZoom);
>             }
> 
>             if (flag)
>             {
>                 if (!Config.zoomMode)
>                 {
>                     Config.zoomMode = true;
>                     this.mc.gameSettings.smoothCamera = true;
>                     this.mc.renderGlobal.displayListEntitiesDirty = true;
>                 }
> 
>                 if (Config.zoomMode)
>                 {
>                     f /= 4.0F;
>                 }
>             }
>             else if (Config.zoomMode)
>             {
>                 Config.zoomMode = false;
>                 this.mc.gameSettings.smoothCamera = false;
>                 this.mouseFilterXAxis = new MouseFilter();
>                 this.mouseFilterYAxis = new MouseFilter();
>                 this.mc.renderGlobal.displayListEntitiesDirty = true;
572c666
<             return f;
---
>             return Reflector.ForgeHooksClient_getFOVModifier.exists() ? Reflector.callFloat(Reflector.ForgeHooksClient_getFOVModifier, this, entity, iblockstate, partialTicks, f) : f;
644c738,742
<                 if (block == Blocks.BED)
---
>                 if (Reflector.ForgeHooksClient_orientBedCamera.exists())
>                 {
>                     Reflector.callVoid(Reflector.ForgeHooksClient_orientBedCamera, this.mc.world, blockpos, iblockstate, entity);
>                 }
>                 else if (block == Blocks.BED)
714c812,837
<         if (!this.mc.gameSettings.debugCamEnable)
---
>         if (Reflector.EntityViewRenderEvent_CameraSetup_Constructor.exists())
>         {
>             if (!this.mc.gameSettings.debugCamEnable)
>             {
>                 float f6 = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F;
>                 float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
>                 float f8 = 0.0F;
> 
>                 if (entity instanceof EntityAnimal)
>                 {
>                     EntityAnimal entityanimal1 = (EntityAnimal)entity;
>                     f6 = entityanimal1.prevRotationYawHead + (entityanimal1.rotationYawHead - entityanimal1.prevRotationYawHead) * partialTicks + 180.0F;
>                 }
> 
>                 IBlockState iblockstate1 = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
>                 Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_CameraSetup_Constructor, this, entity, iblockstate1, partialTicks, f6, f7, f8);
>                 Reflector.postForgeBusEvent(object);
>                 f8 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getRoll);
>                 f7 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getPitch);
>                 f6 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getYaw);
>                 GlStateManager.rotate(f8, 0.0F, 0.0F, 1.0F);
>                 GlStateManager.rotate(f7, 1.0F, 0.0F, 0.0F);
>                 GlStateManager.rotate(f6, 0.0F, 1.0F, 0.0F);
>             }
>         }
>         else if (!this.mc.gameSettings.debugCamEnable)
739c862
<     private void setupCameraTransform(float partialTicks, int pass)
---
>     public void setupCameraTransform(float partialTicks, int pass)
741a865,875
> 
>         if (Config.isFogFancy())
>         {
>             this.farPlaneDistance *= 0.95F;
>         }
> 
>         if (Config.isFogFast())
>         {
>             this.farPlaneDistance *= 0.83F;
>         }
> 
750a885,891
>         this.clipDistance = this.farPlaneDistance * 2.0F;
> 
>         if (this.clipDistance < 173.0F)
>         {
>             this.clipDistance = 173.0F;
>         }
> 
757c898
<         Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
---
>         Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
823a965,969
>         this.renderHand(partialTicks, pass, true, true, false);
>     }
> 
>     public void renderHand(float p_renderHand_1_, int p_renderHand_2_, boolean p_renderHand_3_, boolean p_renderHand_4_, boolean p_renderHand_5_)
>     {
832c978,983
<                 GlStateManager.translate((float)(-(pass * 2 - 1)) * 0.07F, 0.0F, 0.0F);
---
>                 GlStateManager.translate((float)(-(p_renderHand_2_ * 2 - 1)) * 0.07F, 0.0F, 0.0F);
>             }
> 
>             if (Config.isShaders())
>             {
>                 Shaders.applyHandDepth();
835c986
<             Project.gluPerspective(this.getFOVModifier(partialTicks, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
---
>             Project.gluPerspective(this.getFOVModifier(p_renderHand_1_, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
841c992
<                 GlStateManager.translate((float)(pass * 2 - 1) * 0.1F, 0.0F, 0.0F);
---
>                 GlStateManager.translate((float)(p_renderHand_2_ * 2 - 1) * 0.1F, 0.0F, 0.0F);
844,845c995
<             GlStateManager.pushMatrix();
<             this.hurtCameraEffect(partialTicks);
---
>             boolean flag = false;
847c997
<             if (this.mc.gameSettings.viewBobbing)
---
>             if (p_renderHand_3_)
849,850c999,1024
<                 this.setupViewBobbing(partialTicks);
<             }
---
>                 GlStateManager.pushMatrix();
>                 this.hurtCameraEffect(p_renderHand_1_);
> 
>                 if (this.mc.gameSettings.viewBobbing)
>                 {
>                     this.setupViewBobbing(p_renderHand_1_);
>                 }
> 
>                 flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
>                 boolean flag1 = !ReflectorForge.renderFirstPersonHand(this.mc.renderGlobal, p_renderHand_1_, p_renderHand_2_);
> 
>                 if (flag1 && this.mc.gameSettings.thirdPersonView == 0 && !flag && !this.mc.gameSettings.hideGUI && !this.mc.playerController.isSpectator())
>                 {
>                     this.enableLightmap();
> 
>                     if (Config.isShaders())
>                     {
>                         ShadersRender.renderItemFP(this.itemRenderer, p_renderHand_1_, p_renderHand_5_);
>                     }
>                     else
>                     {
>                         this.itemRenderer.renderItemInFirstPerson(p_renderHand_1_);
>                     }
> 
>                     this.disableLightmap();
>                 }
852c1026,1027
<             boolean flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
---
>                 GlStateManager.popMatrix();
>             }
854c1029
<             if (this.mc.gameSettings.thirdPersonView == 0 && !flag && !this.mc.gameSettings.hideGUI && !this.mc.playerController.isSpectator())
---
>             if (!p_renderHand_4_)
856,858c1031
<                 this.enableLightmap();
<                 this.itemRenderer.renderItemInFirstPerson(partialTicks);
<                 this.disableLightmap();
---
>                 return;
861c1034
<             GlStateManager.popMatrix();
---
>             this.disableLightmap();
865,866c1038,1039
<                 this.itemRenderer.renderOverlays(partialTicks);
<                 this.hurtCameraEffect(partialTicks);
---
>                 this.itemRenderer.renderOverlays(p_renderHand_1_);
>                 this.hurtCameraEffect(p_renderHand_1_);
871c1044
<                 this.setupViewBobbing(partialTicks);
---
>                 this.setupViewBobbing(p_renderHand_1_);
880a1054,1058
> 
>         if (Config.isShaders())
>         {
>             Shaders.disableLightmap();
>         }
899a1078,1082
> 
>         if (Config.isShaders())
>         {
>             Shaders.enableLightmap();
>         }
921a1105,1112
>                 if (Config.isCustomColors() && CustomColors.updateLightmap(world, this.torchFlickerX, this.lightmapColors, this.mc.player.isPotionActive(MobEffects.NIGHT_VISION)))
>                 {
>                     this.lightmapTexture.updateDynamicTexture();
>                     this.lightmapUpdateNeeded = false;
>                     this.mc.mcProfiler.endSection();
>                     return;
>                 }
> 
960a1152,1164
>                     if (Reflector.ForgeWorldProvider_getLightmapColors.exists())
>                     {
>                         float[] afloat = new float[] {f8, f9, f10};
>                         Reflector.call(world.provider, Reflector.ForgeWorldProvider_getLightmapColors, partialTicks, f, f2, f3, afloat);
>                         f8 = afloat[0];
>                         f9 = afloat[1];
>                         f10 = afloat[2];
>                     }
> 
>                     f8 = MathHelper.clamp(f8, 0.0F, 1.0F);
>                     f9 = MathHelper.clamp(f9, 0.0F, 1.0F);
>                     f10 = MathHelper.clamp(f10, 0.0F, 1.0F);
> 
1044a1249,1250
>                     //TODO: BETTER RGB IN GAME
>                     //this.lightmapColors[i] = ColorUtils.getChromaColor();
1054c1260
<     private float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks)
---
>     public float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks)
1061a1268
>         this.frameInit();
1130c1337,1349
<             if (this.mc.world != null)
---
>             if (this.mc.world == null)
>             {
>                 GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
>                 GlStateManager.matrixMode(5889);
>                 GlStateManager.loadIdentity();
>                 GlStateManager.matrixMode(5888);
>                 GlStateManager.loadIdentity();
>                 this.setupOverlayRendering();
>                 this.renderEndNanoTime = System.nanoTime();
>                 TileEntityRendererDispatcher.instance.renderEngine = this.mc.getTextureManager();
>                 TileEntityRendererDispatcher.instance.fontRenderer = this.mc.fontRendererObj;
>             }
>             else
1173a1393,1402
> 
>                     if (this.mc.gameSettings.ofShowFps && !this.mc.gameSettings.showDebugInfo)
>                     {
>                         Config.drawFps();
>                     }
> 
>                     if (this.mc.gameSettings.showDebugInfo)
>                     {
>                         Lagometer.showLagometer(scaledresolution);
>                     }
1178,1187d1406
<             else
<             {
<                 GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
<                 GlStateManager.matrixMode(5889);
<                 GlStateManager.loadIdentity();
<                 GlStateManager.matrixMode(5888);
<                 GlStateManager.loadIdentity();
<                 this.setupOverlayRendering();
<                 this.renderEndNanoTime = System.nanoTime();
<             }
1195c1414,1421
<                     this.mc.currentScreen.drawScreen(k1, l1, this.mc.func_193989_ak());
---
>                     if (Reflector.ForgeHooksClient_drawScreen.exists())
>                     {
>                         Reflector.callVoid(Reflector.ForgeHooksClient_drawScreen, this.mc.currentScreen, k1, l1, this.mc.func_193989_ak());
>                     }
>                     else
>                     {
>                         this.mc.currentScreen.drawScreen(k1, l1, this.mc.func_193989_ak());
>                     }
1197c1423
<                 catch (Throwable throwable)
---
>                 catch (Throwable throwable1)
1199c1425
<                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
---
>                     CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Rendering screen");
1225a1452,1462
>         
>         new RenderEvent(partialTicks).call();
> 
>         this.frameFinish();
>         this.waitForServerThread();
>         Lagometer.updateLagometer();
> 
>         if (this.mc.gameSettings.ofProfiler)
>         {
>             this.mc.gameSettings.showDebugProfilerChart = true;
>         }
1256c1493
<             catch (IOException ioexception)
---
>             catch (IOException ioexception1)
1258c1495
<                 LOGGER.warn("Couldn't save auto screenshot", (Throwable)ioexception);
---
>                 LOGGER.warn("Couldn't save auto screenshot", (Throwable)ioexception1);
1286c1523,1524
<                     Block block = this.mc.world.getBlockState(blockpos).getBlock();
---
>                     IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
>                     Block block = iblockstate.getBlock();
1290c1528
<                         flag = block.hasTileEntity() && this.mc.world.getTileEntity(blockpos) instanceof IInventory;
---
>                         flag = ReflectorForge.blockHasTileEntity(iblockstate) && this.mc.world.getTileEntity(blockpos) instanceof IInventory;
1312a1551,1556
> 
>         if (Config.isShaders())
>         {
>             Shaders.beginRender(this.mc, partialTicks, finishTimeNano);
>         }
> 
1315c1559
<         GlStateManager.alphaFunc(516, 0.5F);
---
>         GlStateManager.alphaFunc(516, 0.1F);
1337a1582,1588
>         boolean flag = Config.isShaders();
> 
>         if (flag)
>         {
>             Shaders.beginRenderPass(pass, partialTicks, finishTimeNano);
>         }
> 
1340c1591
<         boolean flag = this.isDrawBlockOutline();
---
>         boolean flag1 = this.isDrawBlockOutline();
1343c1594,1603
<         GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
---
> 
>         if (flag)
>         {
>             Shaders.setViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
>         }
>         else
>         {
>             GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
>         }
> 
1345a1606,1611
> 
>         if (flag)
>         {
>             Shaders.clearRenderBuffer();
>         }
> 
1347a1614,1619
> 
>         if (flag)
>         {
>             Shaders.setCamera(partialTicks);
>         }
> 
1350c1622
<         ClippingHelperImpl.getInstance();
---
>         ClippingHelper clippinghelper = ClippingHelperImpl.getInstance();
1352c1624
<         ICamera icamera = new Frustum();
---
>         ICamera icamera = new Frustum(clippinghelper);
1357d1628
<         icamera.setPosition(d0, d1, d2);
1359c1630,1639
<         if (this.mc.gameSettings.renderDistanceChunks >= 4)
---
>         if (flag)
>         {
>             ShadersRender.setFrustrumPosition(icamera, d0, d1, d2);
>         }
>         else
>         {
>             icamera.setPosition(d0, d1, d2);
>         }
> 
>         if ((Config.isSkyEnabled() || Config.isSunMoonEnabled() || Config.isStarsEnabled()) && !Shaders.isShadowPass)
1365c1645
<             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
---
>             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
1366a1647,1652
> 
>             if (flag)
>             {
>                 Shaders.beginSky();
>             }
> 
1367a1654,1659
> 
>             if (flag)
>             {
>                 Shaders.endSky();
>             }
> 
1370c1662
<             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
---
>             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
1372a1665,1668
>         else
>         {
>             GlStateManager.disableBlend();
>         }
1377c1673
<         if (entity.posY + (double)entity.getEyeHeight() < 128.0D)
---
>         if (entity.posY + (double)entity.getEyeHeight() < 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
1387c1683,1692
<         renderglobal.setupTerrain(entity, (double)partialTicks, icamera, this.frameCount++, this.mc.player.isSpectator());
---
>         this.checkLoadVisibleChunks(entity, partialTicks, icamera, this.mc.player.isSpectator());
> 
>         if (flag)
>         {
>             ShadersRender.setupTerrain(renderglobal, entity, (double)partialTicks, icamera, this.frameCount++, this.mc.player.isSpectator());
>         }
>         else
>         {
>             renderglobal.setupTerrain(entity, (double)partialTicks, icamera, this.frameCount++, this.mc.player.isSpectator());
>         }
1391a1697
>             Lagometer.timerChunkUpload.start();
1392a1699
>             Lagometer.timerChunkUpload.end();
1395a1703,1711
>         Lagometer.timerTerrain.start();
> 
>         if (this.mc.gameSettings.ofSmoothFps && pass > 0)
>         {
>             this.mc.mcProfiler.endStartSection("finish");
>             GL11.glFinish();
>             this.mc.mcProfiler.endStartSection("terrain");
>         }
> 
1398a1715,1720
> 
>         if (flag)
>         {
>             ShadersRender.beginTerrainSolid();
>         }
> 
1401,1403c1723,1737
<         renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT_MIPPED, (double)partialTicks, pass, entity);
<         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
<         renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT, (double)partialTicks, pass, entity);
---
> 
>         if (flag)
>         {
>             ShadersRender.beginTerrainCutoutMipped();
>         }
> 
>         renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT_MIPPED, (double)partialTicks, pass, entity);
>         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
> 
>         if (flag)
>         {
>             ShadersRender.beginTerrainCutout();
>         }
> 
>         renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT, (double)partialTicks, pass, entity);
1404a1739,1745
> 
>         if (flag)
>         {
>             ShadersRender.endTerrain();
>         }
> 
>         Lagometer.timerTerrain.end();
1414a1756,1761
> 
>             if (Reflector.ForgeHooksClient_setRenderPass.exists())
>             {
>                 Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, Integer.valueOf(0));
>             }
> 
1415a1763,1768
> 
>             if (Reflector.ForgeHooksClient_setRenderPass.exists())
>             {
>                 Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, Integer.valueOf(-1));
>             }
> 
1423c1776
<         if (flag && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.WATER))
---
>         if (flag1 && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.WATER))
1428c1781,1786
<             renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
---
> 
>             if (!Reflector.ForgeHooksClient_onDrawBlockHighlight.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, renderglobal, entityplayer, this.mc.objectMouseOver, Integer.valueOf(0), partialTicks))
>             {
>                 renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
>             }
> 
1433a1792,1793
>             boolean flag2 = GlStateManager.isFogEnabled();
>             GlStateManager.disableFog();
1434a1795
>             GlStateManager.setFogEnabled(flag2);
1437,1442c1798,1809
<         this.mc.mcProfiler.endStartSection("destroyProgress");
<         GlStateManager.enableBlend();
<         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
<         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
<         renderglobal.drawBlockDamageTexture(Tessellator.getInstance(), Tessellator.getInstance().getBuffer(), entity, partialTicks);
<         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
---
>         if (!renderglobal.damagedBlocks.isEmpty())
>         {
>             this.mc.mcProfiler.endStartSection("destroyProgress");
>             GlStateManager.enableBlend();
>             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
>             this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
>             renderglobal.drawBlockDamageTexture(Tessellator.getInstance(), Tessellator.getInstance().getBuffer(), entity, partialTicks);
>             this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
>             GlStateManager.disableBlend();
>         }
> 
>         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
1448a1816,1821
> 
>             if (flag)
>             {
>                 Shaders.beginLitParticles();
>             }
> 
1452a1826,1831
> 
>             if (flag)
>             {
>                 Shaders.beginParticles();
>             }
> 
1453a1833,1838
> 
>             if (flag)
>             {
>                 Shaders.endParticles();
>             }
> 
1459a1845,1850
> 
>         if (flag)
>         {
>             Shaders.beginWeather();
>         }
> 
1460a1852,1857
> 
>         if (flag)
>         {
>             Shaders.endWeather();
>         }
> 
1462a1860,1866
> 
>         if (flag)
>         {
>             ShadersRender.renderHand0(this, partialTicks, pass);
>             Shaders.preWater();
>         }
> 
1472a1877,1882
> 
>         if (flag)
>         {
>             Shaders.beginWater();
>         }
> 
1473a1884,1900
> 
>         if (flag)
>         {
>             Shaders.endWater();
>         }
> 
>         if (Reflector.ForgeHooksClient_setRenderPass.exists() && !this.debugView)
>         {
>             RenderHelper.enableStandardItemLighting();
>             this.mc.mcProfiler.endStartSection("entities");
>             Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, Integer.valueOf(1));
>             this.mc.renderGlobal.renderEntities(entity, icamera, partialTicks);
>             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
>             Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, Integer.valueOf(-1));
>             RenderHelper.disableStandardItemLighting();
>         }
> 
1480c1907
<         if (entity.posY + (double)entity.getEyeHeight() >= 128.0D)
---
>         if (entity.posY + (double)entity.getEyeHeight() >= 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
1485a1913,1918
>         if (Reflector.ForgeHooksClient_dispatchRenderLast.exists())
>         {
>             this.mc.mcProfiler.endStartSection("forge_render_last");
>             Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, renderglobal, partialTicks);
>         }
> 
1488c1921
<         if (this.renderHand)
---
>         if (this.renderHand && !Shaders.isShadowPass)
1489a1923,1928
>             if (flag)
>             {
>                 ShadersRender.renderHand1(this, partialTicks, pass);
>                 Shaders.renderCompositeFinal();
>             }
> 
1491c1930,1943
<             this.renderHand(partialTicks, pass);
---
> 
>             if (flag)
>             {
>                 ShadersRender.renderFPOverlay(this, partialTicks, pass);
>             }
>             else
>             {
>                 this.renderHand(partialTicks, pass);
>             }
>         }
> 
>         if (flag)
>         {
>             Shaders.endRender();
1497c1949
<         if (this.mc.gameSettings.shouldRenderClouds() != 0)
---
>         if (this.mc.gameSettings.renderDistanceChunks >= 4 && !Config.isCloudsOff() && Shaders.shouldRenderClouds(this.mc.gameSettings))
1502c1954
<             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 4.0F);
---
>             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance * 4.0F);
1511c1963
<             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
---
>             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
1520c1972
<         if (!this.mc.gameSettings.fancyGraphics)
---
>         if (!Config.isRainFancy())
1525c1977
<         if (f != 0.0F)
---
>         if (f != 0.0F && Config.isRainSplash())
1604c2056,2068
<         float f = this.mc.world.getRainStrength(partialTicks);
---
>         if (Reflector.ForgeWorldProvider_getWeatherRenderer.exists())
>         {
>             WorldProvider worldprovider = this.mc.world.provider;
>             Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getWeatherRenderer);
> 
>             if (object != null)
>             {
>                 Reflector.callVoid(object, Reflector.IRenderHandler_render, partialTicks, this.mc.world, this.mc);
>                 return;
>             }
>         }
> 
>         float f5 = this.mc.world.getRainStrength(partialTicks);
1606c2070
<         if (f > 0.0F)
---
>         if (f5 > 0.0F)
1607a2072,2076
>             if (Config.isRainOff())
>             {
>                 return;
>             }
> 
1627c2096
<             if (this.mc.gameSettings.fancyGraphics)
---
>             if (Config.isRainFancy())
1633c2102
<             float f1 = (float)this.rendererUpdateCount + partialTicks;
---
>             float f = (float)this.rendererUpdateCount + partialTicks;
1675c2144
<                             float f2 = biome.getFloatTemperature(blockpos$mutableblockpos);
---
>                             float f1 = biome.getFloatTemperature(blockpos$mutableblockpos);
1677c2146
<                             if (world.getBiomeProvider().getTemperatureAtHeight(f2, j2) >= 0.15F)
---
>                             if (world.getBiomeProvider().getTemperatureAtHeight(f1, j2) >= 0.15F)
1694,1695c2163,2164
<                                 float f3 = MathHelper.sqrt(d6 * d6 + d7 * d7) / (float)i1;
<                                 float f4 = ((1.0F - f3 * f3) * 0.5F + 0.5F) * f;
---
>                                 float f2 = MathHelper.sqrt(d6 * d6 + d7 * d7) / (float)i1;
>                                 float f3 = ((1.0F - f2 * f2) * 0.5F + 0.5F) * f5;
1700,1703c2169,2172
<                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
<                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
<                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
<                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
---
>                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
>                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
>                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
>                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
1720,1721c2189,2190
<                                 double d9 = this.random.nextDouble() + (double)f1 * 0.01D * (double)((float)this.random.nextGaussian());
<                                 double d10 = this.random.nextDouble() + (double)(f1 * (float)this.random.nextGaussian()) * 0.001D;
---
>                                 double d9 = this.random.nextDouble() + (double)f * 0.01D * (double)((float)this.random.nextGaussian());
>                                 double d10 = this.random.nextDouble() + (double)(f * (float)this.random.nextGaussian()) * 0.001D;
1725c2194
<                                 float f5 = ((1.0F - f6 * f6) * 0.3F + 0.5F) * f;
---
>                                 float f4 = ((1.0F - f6 * f6) * 0.3F + 0.5F) * f5;
1730,1733c2199,2202
<                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
<                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
<                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
<                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
---
>                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
>                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
>                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
>                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
1777a2247
>         vec3d = CustomColors.getWorldSkyColor(vec3d, world, this.mc.getRenderViewEntity(), partialTicks);
1781a2252
>         vec3d1 = CustomColors.getWorldFogColor(vec3d1, world, this.mc.getRenderViewEntity(), partialTicks);
1835c2306
<         IBlockState iblockstate = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
---
>         IBlockState iblockstate1 = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
1839c2310,2320
<             Vec3d vec3d3 = world.getCloudColour(partialTicks);
---
>             Vec3d vec3d4 = world.getCloudColour(partialTicks);
>             this.fogColorRed = (float)vec3d4.xCoord;
>             this.fogColorGreen = (float)vec3d4.yCoord;
>             this.fogColorBlue = (float)vec3d4.zCoord;
>         }
>         else if (Reflector.ForgeBlock_getFogColor.exists())
>         {
>             Vec3d vec3d5 = ActiveRenderInfo.projectViewFromEntity(entity, (double)partialTicks);
>             BlockPos blockpos = new BlockPos(vec3d5);
>             IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
>             Vec3d vec3d3 = (Vec3d)Reflector.call(iblockstate.getBlock(), Reflector.ForgeBlock_getFogColor, this.mc.world, blockpos, iblockstate, entity, new Vec3d((double)this.fogColorRed, (double)this.fogColorGreen, (double)this.fogColorBlue), partialTicks);
1844c2325
<         else if (iblockstate.getMaterial() == Material.WATER)
---
>         else if (iblockstate1.getMaterial() == Material.WATER)
1860a2342,2349
>             Vec3d vec3d7 = CustomColors.getUnderwaterColor(this.mc.world, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
> 
>             if (vec3d7 != null)
>             {
>                 this.fogColorRed = (float)vec3d7.xCoord;
>                 this.fogColorGreen = (float)vec3d7.yCoord;
>                 this.fogColorBlue = (float)vec3d7.zCoord;
>             }
1862c2351
<         else if (iblockstate.getMaterial() == Material.LAVA)
---
>         else if (iblockstate1.getMaterial() == Material.LAVA)
1866a2356,2363
>             Vec3d vec3d6 = CustomColors.getUnderlavaColor(this.mc.world, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
> 
>             if (vec3d6 != null)
>             {
>                 this.fogColorRed = (float)vec3d6.xCoord;
>                 this.fogColorGreen = (float)vec3d6.yCoord;
>                 this.fogColorBlue = (float)vec3d6.zCoord;
>             }
1940c2437,2446
<         GlStateManager.clearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
---
>         if (Reflector.EntityViewRenderEvent_FogColors_Constructor.exists())
>         {
>             Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogColors_Constructor, this, entity, iblockstate1, partialTicks, this.fogColorRed, this.fogColorGreen, this.fogColorBlue);
>             Reflector.postForgeBusEvent(object);
>             this.fogColorRed = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_FogColors_getRed);
>             this.fogColorGreen = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_FogColors_getGreen);
>             this.fogColorBlue = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_FogColors_getBlue);
>         }
> 
>         Shaders.setClearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
1948a2455
>         this.fogStandard = false;
1953a2461
>         float f = -1.0F;
1955c2463,2472
<         if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(MobEffects.BLINDNESS))
---
>         if (Reflector.ForgeHooksClient_getFogDensity.exists())
>         {
>             f = Reflector.callFloat(Reflector.ForgeHooksClient_getFogDensity, this, entity, iblockstate, partialTicks, 0.1F);
>         }
> 
>         if (f >= 0.0F)
>         {
>             GlStateManager.setFogDensity(f);
>         }
>         else if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(MobEffects.BLINDNESS))
1957c2474
<             float f1 = 5.0F;
---
>             float f2 = 5.0F;
1962c2479
<                 f1 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)i / 20.0F);
---
>                 f2 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)i / 20.0F);
1965c2482,2489
<             GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
---
>             if (Config.isShaders())
>             {
>                 Shaders.setFog(GlStateManager.FogMode.LINEAR);
>             }
>             else
>             {
>                 GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
>             }
1970c2494
<                 GlStateManager.setFogEnd(f1 * 0.8F);
---
>                 GlStateManager.setFogEnd(f2 * 0.8F);
1974,1975c2498,2499
<                 GlStateManager.setFogStart(f1 * 0.25F);
<                 GlStateManager.setFogEnd(f1);
---
>                 GlStateManager.setFogStart(f2 * 0.25F);
>                 GlStateManager.setFogEnd(f2);
1978c2502
<             if (GLContext.getCapabilities().GL_NV_fog_distance)
---
>             if (GLContext.getCapabilities().GL_NV_fog_distance && Config.isFogFancy())
1985c2509,2517
<             GlStateManager.setFog(GlStateManager.FogMode.EXP);
---
>             if (Config.isShaders())
>             {
>                 Shaders.setFog(GlStateManager.FogMode.EXP);
>             }
>             else
>             {
>                 GlStateManager.setFog(GlStateManager.FogMode.EXP);
>             }
> 
1990c2522,2529
<             GlStateManager.setFog(GlStateManager.FogMode.EXP);
---
>             if (Config.isShaders())
>             {
>                 Shaders.setFog(GlStateManager.FogMode.EXP);
>             }
>             else
>             {
>                 GlStateManager.setFog(GlStateManager.FogMode.EXP);
>             }
2006a2546,2550
> 
>             if (Config.isClearWater())
>             {
>                 GlStateManager.setFogDensity(0.02F);
>             }
2010c2554,2562
<             GlStateManager.setFog(GlStateManager.FogMode.EXP);
---
>             if (Config.isShaders())
>             {
>                 Shaders.setFog(GlStateManager.FogMode.EXP);
>             }
>             else
>             {
>                 GlStateManager.setFog(GlStateManager.FogMode.EXP);
>             }
> 
2015,2016c2567,2577
<             float f = this.farPlaneDistance;
<             GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
---
>             float f1 = this.farPlaneDistance;
>             this.fogStandard = true;
> 
>             if (Config.isShaders())
>             {
>                 Shaders.setFog(GlStateManager.FogMode.LINEAR);
>             }
>             else
>             {
>                 GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
>             }
2021c2582
<                 GlStateManager.setFogEnd(f);
---
>                 GlStateManager.setFogEnd(f1);
2025,2026c2586,2587
<                 GlStateManager.setFogStart(f * 0.75F);
<                 GlStateManager.setFogEnd(f);
---
>                 GlStateManager.setFogStart(f1 * Config.getFogStart());
>                 GlStateManager.setFogEnd(f1);
2031c2592,2600
<                 GlStateManager.glFogi(34138, 34139);
---
>                 if (Config.isFogFancy())
>                 {
>                     GlStateManager.glFogi(34138, 34139);
>                 }
> 
>                 if (Config.isFogFast())
>                 {
>                     GlStateManager.glFogi(34138, 34140);
>                 }
2036,2037c2605,2611
<                 GlStateManager.setFogStart(f * 0.05F);
<                 GlStateManager.setFogEnd(Math.min(f, 192.0F) * 0.5F);
---
>                 GlStateManager.setFogStart(f1 * 0.05F);
>                 GlStateManager.setFogEnd(f1);
>             }
> 
>             if (Reflector.ForgeHooksClient_onFogRender.exists())
>             {
>                 Reflector.callVoid(Reflector.ForgeHooksClient_onFogRender, this, entity, iblockstate, partialTicks, startCoords, f1);
2062a2637,2641
>         if (Config.isShaders())
>         {
>             Shaders.setFogColor(red, green, blue);
>         }
> 
2079a2659,2986
>     private void waitForServerThread()
>     {
>         this.serverWaitTimeCurrent = 0;
> 
>         if (Config.isSmoothWorld() && Config.isSingleProcessor())
>         {
>             if (this.mc.isIntegratedServerRunning())
>             {
>                 IntegratedServer integratedserver = this.mc.getIntegratedServer();
> 
>                 if (integratedserver != null)
>                 {
>                     boolean flag = this.mc.isGamePaused();
> 
>                     if (!flag && !(this.mc.currentScreen instanceof GuiDownloadTerrain))
>                     {
>                         if (this.serverWaitTime > 0)
>                         {
>                             Lagometer.timerServer.start();
>                             Config.sleep((long)this.serverWaitTime);
>                             Lagometer.timerServer.end();
>                             this.serverWaitTimeCurrent = this.serverWaitTime;
>                         }
> 
>                         long i = System.nanoTime() / 1000000L;
> 
>                         if (this.lastServerTime != 0L && this.lastServerTicks != 0)
>                         {
>                             long j = i - this.lastServerTime;
> 
>                             if (j < 0L)
>                             {
>                                 this.lastServerTime = i;
>                                 j = 0L;
>                             }
> 
>                             if (j >= 50L)
>                             {
>                                 this.lastServerTime = i;
>                                 int k = integratedserver.getTickCounter();
>                                 int l = k - this.lastServerTicks;
> 
>                                 if (l < 0)
>                                 {
>                                     this.lastServerTicks = k;
>                                     l = 0;
>                                 }
> 
>                                 if (l < 1 && this.serverWaitTime < 100)
>                                 {
>                                     this.serverWaitTime += 2;
>                                 }
> 
>                                 if (l > 1 && this.serverWaitTime > 0)
>                                 {
>                                     --this.serverWaitTime;
>                                 }
> 
>                                 this.lastServerTicks = k;
>                             }
>                         }
>                         else
>                         {
>                             this.lastServerTime = i;
>                             this.lastServerTicks = integratedserver.getTickCounter();
>                             this.avgServerTickDiff = 1.0F;
>                             this.avgServerTimeDiff = 50.0F;
>                         }
>                     }
>                     else
>                     {
>                         if (this.mc.currentScreen instanceof GuiDownloadTerrain)
>                         {
>                             Config.sleep(20L);
>                         }
> 
>                         this.lastServerTime = 0L;
>                         this.lastServerTicks = 0;
>                     }
>                 }
>             }
>         }
>         else
>         {
>             this.lastServerTime = 0L;
>             this.lastServerTicks = 0;
>         }
>     }
> 
>     private void frameInit()
>     {
>         if (!this.initialized)
>         {
>             TextureUtils.registerResourceListener();
> 
>             if (Config.getBitsOs() == 64 && Config.getBitsJre() == 32)
>             {
>                 Config.setNotify64BitJava(true);
>             }
> 
>             this.initialized = true;
>         }
> 
>         Config.checkDisplayMode();
>         World world = this.mc.world;
> 
>         if (world != null)
>         {
>             if (Config.getNewRelease() != null)
>             {
>                 String s = "HD_U".replace("HD_U", "HD Ultra").replace("L", "Light");
>                 String s1 = s + " " + Config.getNewRelease();
>                 TextComponentString textcomponentstring = new TextComponentString(I18n.format("of.message.newVersion", s1));
>                 this.mc.ingameGUI.getChatGUI().printChatMessage(textcomponentstring);
>                 Config.setNewRelease((String)null);
>             }
> 
>             if (Config.isNotify64BitJava())
>             {
>                 Config.setNotify64BitJava(false);
>                 TextComponentString textcomponentstring1 = new TextComponentString(I18n.format("of.message.java64Bit"));
>                 this.mc.ingameGUI.getChatGUI().printChatMessage(textcomponentstring1);
>             }
>         }
> 
>         if (this.mc.currentScreen instanceof GuiMainMenu)
>         {
>             this.updateMainMenu((GuiMainMenu)this.mc.currentScreen);
>         }
> 
>         if (this.updatedWorld != world)
>         {
>             RandomMobs.worldChanged(this.updatedWorld, world);
>             Config.updateThreadPriorities();
>             this.lastServerTime = 0L;
>             this.lastServerTicks = 0;
>             this.updatedWorld = world;
>         }
> 
>         if (!this.setFxaaShader(Shaders.configAntialiasingLevel))
>         {
>             Shaders.configAntialiasingLevel = 0;
>         }
>     }
> 
>     private void frameFinish()
>     {
>         if (this.mc.world != null)
>         {
>             long i = System.currentTimeMillis();
> 
>             if (i > this.lastErrorCheckTimeMs + 10000L)
>             {
>                 this.lastErrorCheckTimeMs = i;
>                 int j = GlStateManager.glGetError();
> 
>                 if (j != 0)
>                 {
>                     String s = GLU.gluErrorString(j);
>                     TextComponentString textcomponentstring = new TextComponentString(I18n.format("of.message.openglError", j, s));
>                     this.mc.ingameGUI.getChatGUI().printChatMessage(textcomponentstring);
>                 }
>             }
>         }
>     }
> 
>     private void updateMainMenu(GuiMainMenu p_updateMainMenu_1_)
>     {
>         try
>         {
>             String s = null;
>             Calendar calendar = Calendar.getInstance();
>             calendar.setTime(new Date());
>             int i = calendar.get(5);
>             int j = calendar.get(2) + 1;
> 
>             if (i == 8 && j == 4)
>             {
>                 s = "Happy birthday, OptiFine!";
>             }
> 
>             if (i == 14 && j == 8)
>             {
>                 s = "Happy birthday, sp614x!";
>             }
> 
>             if (s == null)
>             {
>                 return;
>             }
> 
>             Reflector.setFieldValue(p_updateMainMenu_1_, Reflector.GuiMainMenu_splashText, s);
>         }
>         catch (Throwable var6)
>         {
>             ;
>         }
>     }
> 
>     public boolean setFxaaShader(int p_setFxaaShader_1_)
>     {
>         if (!OpenGlHelper.isFramebufferEnabled())
>         {
>             return false;
>         }
>         else if (this.theShaderGroup != null && this.theShaderGroup != this.fxaaShaders[2] && this.theShaderGroup != this.fxaaShaders[4])
>         {
>             return true;
>         }
>         else if (p_setFxaaShader_1_ != 2 && p_setFxaaShader_1_ != 4)
>         {
>             if (this.theShaderGroup == null)
>             {
>                 return true;
>             }
>             else
>             {
>                 this.theShaderGroup.deleteShaderGroup();
>                 this.theShaderGroup = null;
>                 return true;
>             }
>         }
>         else if (this.theShaderGroup != null && this.theShaderGroup == this.fxaaShaders[p_setFxaaShader_1_])
>         {
>             return true;
>         }
>         else if (this.mc.world == null)
>         {
>             return true;
>         }
>         else
>         {
>             this.loadShader(new ResourceLocation("shaders/post/fxaa_of_" + p_setFxaaShader_1_ + "x.json"));
>             this.fxaaShaders[p_setFxaaShader_1_] = this.theShaderGroup;
>             return this.useShader;
>         }
>     }
> 
>     private void checkLoadVisibleChunks(Entity p_checkLoadVisibleChunks_1_, float p_checkLoadVisibleChunks_2_, ICamera p_checkLoadVisibleChunks_3_, boolean p_checkLoadVisibleChunks_4_)
>     {
>         int i = 201435902;
> 
>         if (this.loadVisibleChunks)
>         {
>             this.loadVisibleChunks = false;
>             this.loadAllVisibleChunks(p_checkLoadVisibleChunks_1_, (double)p_checkLoadVisibleChunks_2_, p_checkLoadVisibleChunks_3_, p_checkLoadVisibleChunks_4_);
>             this.mc.ingameGUI.getChatGUI().deleteChatLine(i);
>         }
> 
>         if (Keyboard.isKeyDown(61) && Keyboard.isKeyDown(38))
>         {
>             if (this.mc.gameSettings.field_194146_ao.getKeyCode() == 38)
>             {
>                 if (this.mc.currentScreen instanceof GuiScreenAdvancements)
>                 {
>                     this.mc.displayGuiScreen((GuiScreen)null);
>                 }
> 
>                 while (Keyboard.next())
>                 {
>                     ;
>                 }
>             }
> 
>             if (this.mc.currentScreen != null)
>             {
>                 return;
>             }
> 
>             this.loadVisibleChunks = true;
>             TextComponentString textcomponentstring = new TextComponentString(I18n.format("of.message.loadingVisibleChunks"));
>             this.mc.ingameGUI.getChatGUI().printChatMessageWithOptionalDeletion(textcomponentstring, i);
>             Reflector.Minecraft_actionKeyF3.setValue(this.mc, Boolean.TRUE);
>         }
>     }
> 
>     private void loadAllVisibleChunks(Entity p_loadAllVisibleChunks_1_, double p_loadAllVisibleChunks_2_, ICamera p_loadAllVisibleChunks_4_, boolean p_loadAllVisibleChunks_5_)
>     {
>         RenderGlobal renderglobal = Config.getRenderGlobal();
>         int i = renderglobal.getCountLoadedChunks();
>         long j = System.currentTimeMillis();
>         Config.dbg("Loading visible chunks");
>         long k = System.currentTimeMillis() + 5000L;
>         int l = 0;
>         boolean flag = false;
> 
>         while (true)
>         {
>             flag = false;
> 
>             for (int i1 = 0; i1 < 100; ++i1)
>             {
>                 renderglobal.displayListEntitiesDirty = true;
>                 renderglobal.setupTerrain(p_loadAllVisibleChunks_1_, p_loadAllVisibleChunks_2_, p_loadAllVisibleChunks_4_, this.frameCount++, p_loadAllVisibleChunks_5_);
> 
>                 if (!renderglobal.hasNoChunkUpdates())
>                 {
>                     flag = true;
>                 }
> 
>                 l = l + renderglobal.getCountChunksToUpdate();
>                 renderglobal.updateChunks(System.nanoTime() + 1000000000L);
>                 l = l - renderglobal.getCountChunksToUpdate();
>             }
> 
>             if (renderglobal.getCountLoadedChunks() != i)
>             {
>                 flag = true;
>                 i = renderglobal.getCountLoadedChunks();
>             }
> 
>             if (System.currentTimeMillis() > k)
>             {
>                 Config.log("Chunks loaded: " + l);
>                 k = System.currentTimeMillis() + 5000L;
>             }
> 
>             if (!flag)
>             {
>                 break;
>             }
>         }
> 
>         Config.log("Chunks loaded: " + l);
>         Config.log("Finished loading visible chunks");
>         RenderChunk.renderChunksUpdated = 0;
>     }
> 
2109c3016
< 
---
>         
2112c3019,3020
<             fontRendererIn.drawString(str, -fontRendererIn.getStringWidth(str) / 2, verticalShift, 553648127);
---
>             //fontRendererIn.drawString(str, -fontRendererIn.getStringWidth(str) / 2, verticalShift, 553648127);
>         	ColorUtils.drawChromaString(str, -fontRendererIn.getStringWidth(str) / 2, verticalShift);
2117c3025,3026
<         fontRendererIn.drawString(str, -fontRendererIn.getStringWidth(str) / 2, verticalShift, isSneaking ? 553648127 : -1);
---
>         //fontRendererIn.drawString(str, -fontRendererIn.getStringWidth(str) / 2, verticalShift, isSneaking ? 553648127 : -1);
>         ColorUtils.drawChromaString(str, -fontRendererIn.getStringWidth(str) / 2, verticalShift);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/GlStateManager.java src\modified/src/minecraft/net/minecraft/client/renderer/GlStateManager.java
6a7
> 
14a16,18
> import optifine.Config;
> import optifine.GlBlendState;
> 
33,34c37,38
<     private static int activeTextureUnit;
<     private static final GlStateManager.TextureState[] textureState;
---
>     public static int activeTextureUnit;
>     public static final GlStateManager.TextureState[] textureState;
38a43
>     public static boolean clearEnabled = true;
464,466c469
<         GL11.glDeleteTextures(texture);
< 
<         for (GlStateManager.TextureState glstatemanager$texturestate : textureState)
---
>         if (texture != 0)
468c471,473
<             if (glstatemanager$texturestate.textureName == texture)
---
>             GL11.glDeleteTextures(texture);
> 
>             for (GlStateManager.TextureState glstatemanager$texturestate : textureState)
470c475,478
<                 glstatemanager$texturestate.textureName = -1;
---
>                 if (glstatemanager$texturestate.textureName == texture)
>                 {
>                     glstatemanager$texturestate.textureName = 0;
>                 }
573c581,584
<         GL11.glClear(mask);
---
>         if (clearEnabled)
>         {
>             GL11.glClear(mask);
>         }
837a849,918
>     public static int getActiveTextureUnit()
>     {
>         return OpenGlHelper.defaultTexUnit + activeTextureUnit;
>     }
> 
>     public static void bindCurrentTexture()
>     {
>         GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureState[activeTextureUnit].textureName);
>     }
> 
>     public static int getBoundTexture()
>     {
>         return textureState[activeTextureUnit].textureName;
>     }
> 
>     public static void checkBoundTexture()
>     {
>         if (Config.isMinecraftThread())
>         {
>             int i = GL11.glGetInteger(GL13.GL_ACTIVE_TEXTURE);
>             int j = GL11.glGetInteger(GL11.GL_TEXTURE_BINDING_2D);
>             int k = getActiveTextureUnit();
>             int l = getBoundTexture();
> 
>             if (l > 0)
>             {
>                 if (i != k || j != l)
>                 {
>                     Config.dbg("checkTexture: act: " + k + ", glAct: " + i + ", tex: " + l + ", glTex: " + j);
>                 }
>             }
>         }
>     }
> 
>     public static void deleteTextures(IntBuffer p_deleteTextures_0_)
>     {
>         p_deleteTextures_0_.rewind();
> 
>         while (p_deleteTextures_0_.position() < p_deleteTextures_0_.limit())
>         {
>             int i = p_deleteTextures_0_.get();
>             deleteTexture(i);
>         }
> 
>         p_deleteTextures_0_.rewind();
>     }
> 
>     public static boolean isFogEnabled()
>     {
>         return fogState.fog.currentState;
>     }
> 
>     public static void setFogEnabled(boolean p_setFogEnabled_0_)
>     {
>         fogState.fog.setState(p_setFogEnabled_0_);
>     }
> 
>     public static void getBlendState(GlBlendState p_getBlendState_0_)
>     {
>         p_getBlendState_0_.enabled = blendState.blend.currentState;
>         p_getBlendState_0_.srcFactor = blendState.srcFactor;
>         p_getBlendState_0_.dstFactor = blendState.dstFactor;
>     }
> 
>     public static void setBlendState(GlBlendState p_setBlendState_0_)
>     {
>         blendState.blend.setState(p_setBlendState_0_.enabled);
>         blendFunc(p_setBlendState_0_.srcFactor, p_setBlendState_0_.dstFactor);
>     }
> 
856c937
<         textureState = new GlStateManager.TextureState[8];
---
>         textureState = new GlStateManager.TextureState[32];
858c939
<         for (int j = 0; j < 8; ++j)
---
>         for (int j = 0; j < textureState.length; ++j)
1397c1478
<     static class TextureState
---
>    public static class TextureState
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/ImageBufferDownload.java src\modified/src/minecraft/net/minecraft/client/renderer/ImageBufferDownload.java
26a27,36
>             int i = image.getWidth();
>             int j = image.getHeight();
>             int k;
> 
>             for (k = 1; this.imageWidth < i || this.imageHeight < j; k *= 2)
>             {
>                 this.imageWidth *= 2;
>                 this.imageHeight *= 2;
>             }
> 
30c40
<             boolean flag = image.getHeight() == 32;
---
>             boolean flag = image.getHeight() == 32 * k;
35,47c45,57
<                 graphics.fillRect(0, 32, 64, 32);
<                 graphics.drawImage(bufferedimage, 24, 48, 20, 52, 4, 16, 8, 20, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 28, 48, 24, 52, 8, 16, 12, 20, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 20, 52, 16, 64, 8, 20, 12, 32, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 24, 52, 20, 64, 4, 20, 8, 32, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 28, 52, 24, 64, 0, 20, 4, 32, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 32, 52, 28, 64, 12, 20, 16, 32, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 40, 48, 36, 52, 44, 16, 48, 20, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 44, 48, 40, 52, 48, 16, 52, 20, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 36, 52, 32, 64, 48, 20, 52, 32, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 40, 52, 36, 64, 44, 20, 48, 32, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 44, 52, 40, 64, 40, 20, 44, 32, (ImageObserver)null);
<                 graphics.drawImage(bufferedimage, 48, 52, 44, 64, 52, 20, 56, 32, (ImageObserver)null);
---
>                 graphics.fillRect(0 * k, 32 * k, 64 * k, 32 * k);
>                 graphics.drawImage(bufferedimage, 24 * k, 48 * k, 20 * k, 52 * k, 4 * k, 16 * k, 8 * k, 20 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 28 * k, 48 * k, 24 * k, 52 * k, 8 * k, 16 * k, 12 * k, 20 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 20 * k, 52 * k, 16 * k, 64 * k, 8 * k, 20 * k, 12 * k, 32 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 24 * k, 52 * k, 20 * k, 64 * k, 4 * k, 20 * k, 8 * k, 32 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 28 * k, 52 * k, 24 * k, 64 * k, 0 * k, 20 * k, 4 * k, 32 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 32 * k, 52 * k, 28 * k, 64 * k, 12 * k, 20 * k, 16 * k, 32 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 40 * k, 48 * k, 36 * k, 52 * k, 44 * k, 16 * k, 48 * k, 20 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 44 * k, 48 * k, 40 * k, 52 * k, 48 * k, 16 * k, 52 * k, 20 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 36 * k, 52 * k, 32 * k, 64 * k, 48 * k, 20 * k, 52 * k, 32 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 40 * k, 52 * k, 36 * k, 64 * k, 44 * k, 20 * k, 48 * k, 32 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 44 * k, 52 * k, 40 * k, 64 * k, 40 * k, 20 * k, 44 * k, 32 * k, (ImageObserver)null);
>                 graphics.drawImage(bufferedimage, 48 * k, 52 * k, 44 * k, 64 * k, 52 * k, 20 * k, 56 * k, 32 * k, (ImageObserver)null);
52c62
<             this.setAreaOpaque(0, 0, 32, 16);
---
>             this.setAreaOpaque(0 * k, 0 * k, 32 * k, 16 * k);
56c66
<                 this.doTransparencyHack(32, 0, 64, 32);
---
>                 this.doTransparencyHack(32 * k, 0 * k, 64 * k, 32 * k);
59,60c69,70
<             this.setAreaOpaque(0, 16, 64, 32);
<             this.setAreaOpaque(16, 48, 48, 64);
---
>             this.setAreaOpaque(0 * k, 16 * k, 64 * k, 32 * k);
>             this.setAreaOpaque(16 * k, 48 * k, 48 * k, 64 * k);
Only in src\modified/src/minecraft/net/minecraft/client/renderer: ItemRenderer.~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/ItemRenderer.java src\modified/src/minecraft/net/minecraft/client/renderer/ItemRenderer.java
21a22
> import net.minecraft.item.ItemMap;
30a32,36
> import optifine.Config;
> import optifine.DynamicLights;
> import optifine.Reflector;
> import optifine.ReflectorForge;
> import shadersmod.client.Shaders;
69c75
<             if (flag)
---
>             if (flag && (!Config.isShaders() || !Shaders.renderItemKeepDepthMask))
100a107,112
> 
>         if (Config.isDynamicLights())
>         {
>             i = DynamicLights.getCombinedLight(this.mc.getRenderViewEntity(), i);
>         }
> 
224c236
<         MapData mapdata = Items.FILLED_MAP.getMapData(stack, this.mc.world);
---
>         MapData mapdata = ReflectorForge.getMapData(Items.FILLED_MAP, stack, this.mc.world);
323c335
<             if (itemstack.getItem() == Items.BOW)
---
>             if (!itemstack.func_190926_b() && itemstack.getItem() == Items.BOW)
340c352,356
<             this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.MAIN_HAND, f3, this.itemStackMainHand, f5);
---
> 
>             if (!Reflector.ForgeHooksClient_renderSpecificFirstPersonHand.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_renderSpecificFirstPersonHand, EnumHand.MAIN_HAND, partialTicks, f1, f3, f5, this.itemStackMainHand))
>             {
>                 this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.MAIN_HAND, f3, this.itemStackMainHand, f5);
>             }
347c363,367
<             this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.OFF_HAND, f4, this.itemStackOffHand, f6);
---
> 
>             if (!Reflector.ForgeHooksClient_renderSpecificFirstPersonHand.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_renderSpecificFirstPersonHand, EnumHand.OFF_HAND, partialTicks, f1, f4, f6, this.itemStackOffHand))
>             {
>                 this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.OFF_HAND, f4, this.itemStackOffHand, f6);
>             }
356,360c376
<         boolean flag = p_187457_4_ == EnumHand.MAIN_HAND;
<         EnumHandSide enumhandside = flag ? p_187457_1_.getPrimaryHand() : p_187457_1_.getPrimaryHand().opposite();
<         GlStateManager.pushMatrix();
< 
<         if (p_187457_6_.func_190926_b())
---
>         if (!Config.isShaders() || !Shaders.isSkipRenderHand(p_187457_4_))
362c378,382
<             if (flag && !p_187457_1_.isInvisible())
---
>             boolean flag = p_187457_4_ == EnumHand.MAIN_HAND;
>             EnumHandSide enumhandside = flag ? p_187457_1_.getPrimaryHand() : p_187457_1_.getPrimaryHand().opposite();
>             GlStateManager.pushMatrix();
> 
>             if (p_187457_6_.func_190926_b())
364c384,387
<                 this.renderArmFirstPerson(p_187457_7_, p_187457_5_, enumhandside);
---
>                 if (flag && !p_187457_1_.isInvisible())
>                 {
>                     this.renderArmFirstPerson(p_187457_7_, p_187457_5_, enumhandside);
>                 }
366,369c389
<         }
<         else if (p_187457_6_.getItem() == Items.FILLED_MAP)
<         {
<             if (flag && this.itemStackOffHand.func_190926_b())
---
>             else if (p_187457_6_.getItem() instanceof ItemMap)
371c391,398
<                 this.renderMapFirstPerson(p_187457_3_, p_187457_7_, p_187457_5_);
---
>                 if (flag && this.itemStackOffHand.func_190926_b())
>                 {
>                     this.renderMapFirstPerson(p_187457_3_, p_187457_7_, p_187457_5_);
>                 }
>                 else
>                 {
>                     this.renderMapFirstPersonSide(p_187457_7_, enumhandside, p_187457_5_, p_187457_6_);
>                 }
375,380c402
<                 this.renderMapFirstPersonSide(p_187457_7_, enumhandside, p_187457_5_, p_187457_6_);
<             }
<         }
<         else
<         {
<             boolean flag1 = enumhandside == EnumHandSide.RIGHT;
---
>                 boolean flag1 = enumhandside == EnumHandSide.RIGHT;
382,384c404,406
<             if (p_187457_1_.isHandActive() && p_187457_1_.getItemInUseCount() > 0 && p_187457_1_.getActiveHand() == p_187457_4_)
<             {
<                 int j = flag1 ? 1 : -1;
---
>                 if (p_187457_1_.isHandActive() && p_187457_1_.getItemInUseCount() > 0 && p_187457_1_.getActiveHand() == p_187457_4_)
>                 {
>                     int j = flag1 ? 1 : -1;
386c408,452
<                 switch (p_187457_6_.getItemUseAction())
---
>                     switch (p_187457_6_.getItemUseAction())
>                     {
>                         case NONE:
>                             this.transformSideFirstPerson(enumhandside, p_187457_7_);
>                             break;
> 
>                         case EAT:
>                         case DRINK:
>                             this.transformEatFirstPerson(p_187457_2_, enumhandside, p_187457_6_);
>                             this.transformSideFirstPerson(enumhandside, p_187457_7_);
>                             break;
> 
>                         case BLOCK:
>                             this.transformSideFirstPerson(enumhandside, p_187457_7_);
>                             break;
> 
>                         case BOW:
>                             this.transformSideFirstPerson(enumhandside, p_187457_7_);
>                             GlStateManager.translate((float)j * -0.2785682F, 0.18344387F, 0.15731531F);
>                             GlStateManager.rotate(-13.935F, 1.0F, 0.0F, 0.0F);
>                             GlStateManager.rotate((float)j * 35.3F, 0.0F, 1.0F, 0.0F);
>                             GlStateManager.rotate((float)j * -9.785F, 0.0F, 0.0F, 1.0F);
>                             float f5 = (float)p_187457_6_.getMaxItemUseDuration() - ((float)this.mc.player.getItemInUseCount() - p_187457_2_ + 1.0F);
>                             float f6 = f5 / 20.0F;
>                             f6 = (f6 * f6 + f6 * 2.0F) / 3.0F;
> 
>                             if (f6 > 1.0F)
>                             {
>                                 f6 = 1.0F;
>                             }
> 
>                             if (f6 > 0.1F)
>                             {
>                                 float f7 = MathHelper.sin((f5 - 0.1F) * 1.3F);
>                                 float f3 = f6 - 0.1F;
>                                 float f4 = f7 * f3;
>                                 GlStateManager.translate(f4 * 0.0F, f4 * 0.004F, f4 * 0.0F);
>                             }
> 
>                             GlStateManager.translate(f6 * 0.0F, f6 * 0.0F, f6 * 0.04F);
>                             GlStateManager.scale(1.0F, 1.0F, 1.0F + f6 * 0.2F);
>                             GlStateManager.rotate((float)j * 45.0F, 0.0F, -1.0F, 0.0F);
>                     }
>                 }
>                 else
388,427c454,460
<                     case NONE:
<                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
<                         break;
< 
<                     case EAT:
<                     case DRINK:
<                         this.transformEatFirstPerson(p_187457_2_, enumhandside, p_187457_6_);
<                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
<                         break;
< 
<                     case BLOCK:
<                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
<                         break;
< 
<                     case BOW:
<                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
<                         GlStateManager.translate((float)j * -0.2785682F, 0.18344387F, 0.15731531F);
<                         GlStateManager.rotate(-13.935F, 1.0F, 0.0F, 0.0F);
<                         GlStateManager.rotate((float)j * 35.3F, 0.0F, 1.0F, 0.0F);
<                         GlStateManager.rotate((float)j * -9.785F, 0.0F, 0.0F, 1.0F);
<                         float f5 = (float)p_187457_6_.getMaxItemUseDuration() - ((float)this.mc.player.getItemInUseCount() - p_187457_2_ + 1.0F);
<                         float f6 = f5 / 20.0F;
<                         f6 = (f6 * f6 + f6 * 2.0F) / 3.0F;
< 
<                         if (f6 > 1.0F)
<                         {
<                             f6 = 1.0F;
<                         }
< 
<                         if (f6 > 0.1F)
<                         {
<                             float f7 = MathHelper.sin((f5 - 0.1F) * 1.3F);
<                             float f3 = f6 - 0.1F;
<                             float f4 = f7 * f3;
<                             GlStateManager.translate(f4 * 0.0F, f4 * 0.004F, f4 * 0.0F);
<                         }
< 
<                         GlStateManager.translate(f6 * 0.0F, f6 * 0.0F, f6 * 0.04F);
<                         GlStateManager.scale(1.0F, 1.0F, 1.0F + f6 * 0.2F);
<                         GlStateManager.rotate((float)j * 45.0F, 0.0F, -1.0F, 0.0F);
---
>                     float f = -0.4F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * (float)Math.PI);
>                     float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * ((float)Math.PI * 2F));
>                     float f2 = -0.2F * MathHelper.sin(p_187457_5_ * (float)Math.PI);
>                     int i = flag1 ? 1 : -1;
>                     GlStateManager.translate((float)i * f, f1, f2);
>                     this.transformSideFirstPerson(enumhandside, p_187457_7_);
>                     this.transformFirstPerson(enumhandside, p_187457_5_);
429,438c462,463
<             }
<             else
<             {
<                 float f = -0.4F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * (float)Math.PI);
<                 float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * ((float)Math.PI * 2F));
<                 float f2 = -0.2F * MathHelper.sin(p_187457_5_ * (float)Math.PI);
<                 int i = flag1 ? 1 : -1;
<                 GlStateManager.translate((float)i * f, f1, f2);
<                 this.transformSideFirstPerson(enumhandside, p_187457_7_);
<                 this.transformFirstPerson(enumhandside, p_187457_5_);
---
> 
>                 this.renderItemSide(p_187457_1_, p_187457_6_, flag1 ? ItemCameraTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : ItemCameraTransforms.TransformType.FIRST_PERSON_LEFT_HAND, !flag1);
441c466
<             this.renderItemSide(p_187457_1_, p_187457_6_, flag1 ? ItemCameraTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : ItemCameraTransforms.TransformType.FIRST_PERSON_LEFT_HAND, !flag1);
---
>             GlStateManager.popMatrix();
443,444d467
< 
<         GlStateManager.popMatrix();
456a480
>             BlockPos blockpos = new BlockPos(this.mc.player);
464,465c488,489
<                 BlockPos blockpos = new BlockPos(d0, d1 + (double)entityplayer.getEyeHeight(), d2);
<                 IBlockState iblockstate1 = this.mc.world.getBlockState(blockpos);
---
>                 BlockPos blockpos1 = new BlockPos(d0, d1 + (double)entityplayer.getEyeHeight(), d2);
>                 IBlockState iblockstate1 = this.mc.world.getBlockState(blockpos1);
469a494
>                     blockpos = blockpos1;
475c500,505
<                 this.renderBlockInHand(this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(iblockstate));
---
>                 Object object = Reflector.getFieldValue(Reflector.RenderBlockOverlayEvent_OverlayType_BLOCK);
> 
>                 if (!Reflector.callBoolean(Reflector.ForgeEventFactory_renderBlockOverlay, this.mc.player, partialTicks, object, iblockstate, blockpos))
>                 {
>                     this.renderBlockInHand(this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(iblockstate));
>                 }
481c511
<             if (this.mc.player.isInsideOfMaterial(Material.WATER))
---
>             if (this.mc.player.isInsideOfMaterial(Material.WATER) && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderWaterOverlay, this.mc.player, partialTicks))
486c516
<             if (this.mc.player.isBurning())
---
>             if (this.mc.player.isBurning() && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderFireOverlay, this.mc.player, partialTicks))
531,555c561,588
<         this.mc.getTextureManager().bindTexture(RES_UNDERWATER_OVERLAY);
<         Tessellator tessellator = Tessellator.getInstance();
<         BufferBuilder bufferbuilder = tessellator.getBuffer();
<         float f = this.mc.player.getBrightness();
<         GlStateManager.color(f, f, f, 0.5F);
<         GlStateManager.enableBlend();
<         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
<         GlStateManager.pushMatrix();
<         float f1 = 4.0F;
<         float f2 = -1.0F;
<         float f3 = 1.0F;
<         float f4 = -1.0F;
<         float f5 = 1.0F;
<         float f6 = -0.5F;
<         float f7 = -this.mc.player.rotationYaw / 64.0F;
<         float f8 = this.mc.player.rotationPitch / 64.0F;
<         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
<         bufferbuilder.pos(-1.0D, -1.0D, -0.5D).tex((double)(4.0F + f7), (double)(4.0F + f8)).endVertex();
<         bufferbuilder.pos(1.0D, -1.0D, -0.5D).tex((double)(0.0F + f7), (double)(4.0F + f8)).endVertex();
<         bufferbuilder.pos(1.0D, 1.0D, -0.5D).tex((double)(0.0F + f7), (double)(0.0F + f8)).endVertex();
<         bufferbuilder.pos(-1.0D, 1.0D, -0.5D).tex((double)(4.0F + f7), (double)(0.0F + f8)).endVertex();
<         tessellator.draw();
<         GlStateManager.popMatrix();
<         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
<         GlStateManager.disableBlend();
---
>         if (!Config.isShaders() || Shaders.isUnderwaterOverlay())
>         {
>             this.mc.getTextureManager().bindTexture(RES_UNDERWATER_OVERLAY);
>             Tessellator tessellator = Tessellator.getInstance();
>             BufferBuilder bufferbuilder = tessellator.getBuffer();
>             float f = this.mc.player.getBrightness();
>             GlStateManager.color(f, f, f, 0.5F);
>             GlStateManager.enableBlend();
>             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
>             GlStateManager.pushMatrix();
>             float f1 = 4.0F;
>             float f2 = -1.0F;
>             float f3 = 1.0F;
>             float f4 = -1.0F;
>             float f5 = 1.0F;
>             float f6 = -0.5F;
>             float f7 = -this.mc.player.rotationYaw / 64.0F;
>             float f8 = this.mc.player.rotationPitch / 64.0F;
>             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
>             bufferbuilder.pos(-1.0D, -1.0D, -0.5D).tex((double)(4.0F + f7), (double)(4.0F + f8)).endVertex();
>             bufferbuilder.pos(1.0D, -1.0D, -0.5D).tex((double)(0.0F + f7), (double)(4.0F + f8)).endVertex();
>             bufferbuilder.pos(1.0D, 1.0D, -0.5D).tex((double)(0.0F + f7), (double)(0.0F + f8)).endVertex();
>             bufferbuilder.pos(-1.0D, 1.0D, -0.5D).tex((double)(4.0F + f7), (double)(0.0F + f8)).endVertex();
>             tessellator.draw();
>             GlStateManager.popMatrix();
>             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
>             GlStateManager.disableBlend();
>         }
619,620c652,675
<             this.equippedProgressMainHand += MathHelper.clamp((Objects.equals(this.itemStackMainHand, itemstack) ? f * f * f : 0.0F) - this.equippedProgressMainHand, -0.4F, 0.4F);
<             this.equippedProgressOffHand += MathHelper.clamp((float)(Objects.equals(this.itemStackOffHand, itemstack1) ? 1 : 0) - this.equippedProgressOffHand, -0.4F, 0.4F);
---
> 
>             if (Reflector.ForgeHooksClient_shouldCauseReequipAnimation.exists())
>             {
>                 boolean flag = Reflector.callBoolean(Reflector.ForgeHooksClient_shouldCauseReequipAnimation, this.itemStackMainHand, itemstack, entityplayersp.inventory.currentItem);
>                 boolean flag1 = Reflector.callBoolean(Reflector.ForgeHooksClient_shouldCauseReequipAnimation, this.itemStackOffHand, itemstack1, Integer.valueOf(-1));
> 
>                 if (!flag && !Objects.equals(this.itemStackMainHand, itemstack))
>                 {
>                     this.itemStackMainHand = itemstack;
>                 }
> 
>                 if (!flag && !Objects.equals(this.itemStackOffHand, itemstack1))
>                 {
>                     this.itemStackOffHand = itemstack1;
>                 }
> 
>                 this.equippedProgressMainHand += MathHelper.clamp((!flag ? f * f * f : 0.0F) - this.equippedProgressMainHand, -0.4F, 0.4F);
>                 this.equippedProgressOffHand += MathHelper.clamp((float)(!flag1 ? 1 : 0) - this.equippedProgressOffHand, -0.4F, 0.4F);
>             }
>             else
>             {
>                 this.equippedProgressMainHand += MathHelper.clamp((Objects.equals(this.itemStackMainHand, itemstack) ? f * f * f : 0.0F) - this.equippedProgressMainHand, -0.4F, 0.4F);
>                 this.equippedProgressOffHand += MathHelper.clamp((float)(Objects.equals(this.itemStackOffHand, itemstack1) ? 1 : 0) - this.equippedProgressOffHand, -0.4F, 0.4F);
>             }
625a681,685
> 
>             if (Config.isShaders())
>             {
>                 Shaders.setItemToRenderMain(this.itemStackMainHand);
>             }
630a691,695
> 
>             if (Config.isShaders())
>             {
>                 Shaders.setItemToRenderOff(this.itemStackOffHand);
>             }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/OpenGlHelper.java src\modified/src/minecraft/net/minecraft/client/renderer/OpenGlHelper.java
13a14,15
> import optifine.Config;
> 
102a105,106
>     public static float lastBrightnessX = 0.0F;
>     public static float lastBrightnessY = 0.0F;
108a113
>         Config.initDisplay();
641c646,653
<         return vboSupported && Minecraft.getMinecraft().gameSettings.useVbo;
---
>         if (Config.isMultiTexture())
>         {
>             return false;
>         }
>         else
>         {
>             return vboSupported && Minecraft.getMinecraft().gameSettings.useVbo;
>         }
904a917,922
> 
>         if (target == lightmapTexUnit)
>         {
>             lastBrightnessX = p_77475_1_;
>             lastBrightnessY = t;
>         }
928c946,957
<         return framebufferSupported && Minecraft.getMinecraft().gameSettings.fboEnable;
---
>         if (Config.isFastRender())
>         {
>             return false;
>         }
>         else if (Config.isAntialiasing())
>         {
>             return false;
>         }
>         else
>         {
>             return framebufferSupported && Minecraft.getMinecraft().gameSettings.fboEnable;
>         }
1005c1034
<         catch (Throwable throwable)
---
>         catch (Throwable throwable1)
1007c1036
<             LOGGER.error("Couldn't open link", throwable);
---
>             LOGGER.error("Couldn't open link", throwable1);
Only in src\modified/src/minecraft/net/minecraft/client/renderer: RenderGlobal.#
Only in src\modified/src/minecraft/net/minecraft/client/renderer: RenderGlobal.~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java src\modified/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
5d4
< import com.google.common.collect.Queues;
7a7
> import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
8a9,11
> import java.util.ArrayDeque;
> import java.util.ArrayList;
> import java.util.Arrays;
9a13,15
> import java.util.Collections;
> import java.util.Deque;
> import java.util.HashSet;
10a17
> import java.util.LinkedHashSet;
13d19
< import java.util.Queue;
15a22
> import java.util.function.Supplier;
27a35
> import net.minecraft.client.gui.FontRenderer;
68a77
> import net.minecraft.tileentity.TileEntitySign;
81a91
> import net.minecraft.world.DimensionType;
83a94
> import net.minecraft.world.WorldProvider;
85a97,109
> import net.minecraft.world.chunk.IChunkProvider;
> import optifine.ChunkUtils;
> import optifine.CloudRenderer;
> import optifine.Config;
> import optifine.CustomColors;
> import optifine.CustomSky;
> import optifine.DynamicLights;
> import optifine.Lagometer;
> import optifine.RandomMobs;
> import optifine.Reflector;
> import optifine.RenderEnv;
> import optifine.RenderInfoLazy;
> 
87a112,113
> import org.golde.lttclientmeme.chroma.ColorUtils;
> import org.lwjgl.input.Keyboard;
89a116,118
> import shadersmod.client.Shaders;
> import shadersmod.client.ShadersRender;
> import shadersmod.client.ShadowUtils;
101c130
<     private final Minecraft mc;
---
>     public final Minecraft mc;
129c158
<     private final Map<Integer, DestroyBlockProgress> damagedBlocks = Maps.<Integer, DestroyBlockProgress>newHashMap();
---
>     public final Map<Integer, DestroyBlockProgress> damagedBlocks = Maps.<Integer, DestroyBlockProgress>newHashMap();
171c200
<     private boolean displayListEntitiesDirty = true;
---
>     public boolean displayListEntitiesDirty = true;
173a203,226
>     private CloudRenderer cloudRenderer;
>     public Entity renderedEntity;
>     public Set chunksToResortTransparency = new LinkedHashSet();
>     public Set chunksToUpdateForced = new LinkedHashSet();
>     private Deque visibilityDeque = new ArrayDeque();
>     private List renderInfosEntities = new ArrayList(1024);
>     private List renderInfosTileEntities = new ArrayList(1024);
>     private List renderInfosNormal = new ArrayList(1024);
>     private List renderInfosEntitiesNormal = new ArrayList(1024);
>     private List renderInfosTileEntitiesNormal = new ArrayList(1024);
>     private List renderInfosShadow = new ArrayList(1024);
>     private List renderInfosEntitiesShadow = new ArrayList(1024);
>     private List renderInfosTileEntitiesShadow = new ArrayList(1024);
>     private int renderDistance = 0;
>     private int renderDistanceSq = 0;
>     private static final Set SET_ALL_FACINGS = Collections.unmodifiableSet(new HashSet(Arrays.asList(EnumFacing.VALUES)));
>     private int countTileEntitiesRendered;
>     private IChunkProvider worldChunkProvider = null;
>     private Long2ObjectMap<Chunk> worldChunkProviderMap = null;
>     private int countLoadedChunksPrev = 0;
>     private RenderEnv renderEnv;
>     public boolean renderOverlayDamaged;
>     public boolean renderOverlayEyes;
>     static Deque<RenderGlobal.ContainerLocalRenderInformation> renderInfoCache = new ArrayDeque<RenderGlobal.ContainerLocalRenderInformation>();
176a230,233
>         this.renderEnv = new RenderEnv(this.theWorld, Blocks.AIR.getDefaultState(), new BlockPos(0, 0, 0));
>         this.renderOverlayDamaged = false;
>         this.renderOverlayEyes = false;
>         this.cloudRenderer = new CloudRenderer(mcIn);
273c330,337
<         return this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.player != null;
---
>         if (!Config.isFastRender() && !Config.isShaders() && !Config.isAntialiasing())
>         {
>             return this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.player != null;
>         }
>         else
>         {
>             return false;
>         }
475a540,544
>         if (Config.isDynamicLights())
>         {
>             DynamicLights.clear();
>         }
> 
514,515c583,592
<             Blocks.LEAVES.setGraphicsLevel(this.mc.gameSettings.fancyGraphics);
<             Blocks.LEAVES2.setGraphicsLevel(this.mc.gameSettings.fancyGraphics);
---
>             Blocks.LEAVES.setGraphicsLevel(Config.isTreesFancy());
>             Blocks.LEAVES2.setGraphicsLevel(Config.isTreesFancy());
>             BlockModelRenderer.updateAoLightValue();
>             renderInfoCache.clear();
> 
>             if (Config.isDynamicLights())
>             {
>                 DynamicLights.clear();
>             }
> 
516a594,595
>             this.renderDistance = this.renderDistanceChunks * 16;
>             this.renderDistanceSq = this.renderDistance * this.renderDistance;
574c653
<         if (OpenGlHelper.shadersSupported)
---
>         if (OpenGlHelper.shadersSupported && this.entityOutlineShader != null)
576,579c655
<             if (this.entityOutlineShader != null)
<             {
<                 this.entityOutlineShader.createBindFramebuffers(width, height);
<             }
---
>             this.entityOutlineShader.createBindFramebuffers(width, height);
584a661,667
>         int i = 0;
> 
>         if (Reflector.MinecraftForgeClient_getRenderPass.exists())
>         {
>             i = Reflector.callInt(Reflector.MinecraftForgeClient_getRenderPass);
>         }
> 
586a670,674
>             if (i > 0)
>             {
>                 return;
>             }
> 
597,599c685,693
<             this.countEntitiesTotal = 0;
<             this.countEntitiesRendered = 0;
<             this.countEntitiesHidden = 0;
---
> 
>             if (i == 0)
>             {
>                 this.countEntitiesTotal = 0;
>                 this.countEntitiesRendered = 0;
>                 this.countEntitiesHidden = 0;
>                 this.countTileEntitiesRendered = 0;
>             }
> 
611d704
<             this.countEntitiesTotal = list.size();
613c706,719
<             for (int i = 0; i < this.theWorld.weatherEffects.size(); ++i)
---
>             if (i == 0)
>             {
>                 this.countEntitiesTotal = list.size();
>             }
> 
>             if (Config.isFogOff() && this.mc.entityRenderer.fogStandard)
>             {
>                 GlStateManager.disableFog();
>             }
> 
>             boolean flag = Reflector.ForgeEntity_shouldRenderInPass.exists();
>             boolean flag1 = Reflector.ForgeTileEntity_shouldRenderInPass.exists();
> 
>             for (int j = 0; j < this.theWorld.weatherEffects.size(); ++j)
615,616c721
<                 Entity entity1 = this.theWorld.weatherEffects.get(i);
<                 ++this.countEntitiesRendered;
---
>                 Entity entity1 = this.theWorld.weatherEffects.get(j);
618c723
<                 if (entity1.isInRangeToRender3d(d0, d1, d2))
---
>                 if (!flag || Reflector.callBoolean(entity1, Reflector.ForgeEntity_shouldRenderInPass, i))
620c725,730
<                     this.renderManager.renderEntityStatic(entity1, partialTicks, false);
---
>                     ++this.countEntitiesRendered;
> 
>                     if (entity1.isInRangeToRender3d(d0, d1, d2))
>                     {
>                         this.renderManager.renderEntityStatic(entity1, partialTicks, false);
>                     }
624a735,743
>             boolean flag4 = Config.isShaders();
> 
>             if (flag4)
>             {
>                 Shaders.beginEntities();
>             }
> 
>             boolean flag5 = this.mc.gameSettings.fancyGraphics;
>             this.mc.gameSettings.fancyGraphics = Config.isDroppedItemsFancy();
629c748
<             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
---
>             for (Object renderglobal$containerlocalrenderinformation0 : this.renderInfosEntities)
631c750,751
<                 Chunk chunk = this.theWorld.getChunkFromBlockCoords(renderglobal$containerlocalrenderinformation.renderChunk.getPosition());
---
>             	RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = (RenderGlobal.ContainerLocalRenderInformation) renderglobal$containerlocalrenderinformation0;
>                 Chunk chunk = renderglobal$containerlocalrenderinformation.renderChunk.getChunk(this.theWorld);
638,640c758
<                         boolean flag = this.renderManager.shouldRender(entity2, camera, d0, d1, d2) || entity2.isRidingOrBeingRiddenBy(this.mc.player);
< 
<                         if (flag)
---
>                         if (!flag || Reflector.callBoolean(entity2, Reflector.ForgeEntity_shouldRenderInPass, i))
642c760
<                             boolean flag1 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
---
>                             boolean flag2 = this.renderManager.shouldRender(entity2, camera, d0, d1, d2) || entity2.isRidingOrBeingRiddenBy(this.mc.player);
644c762
<                             if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag1) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(blockpos$pooledmutableblockpos.setPos(entity2))))
---
>                             if (flag2)
646,647c764
<                                 ++this.countEntitiesRendered;
<                                 this.renderManager.renderEntityStatic(entity2, partialTicks, false);
---
>                                 boolean flag3 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
649c766
<                                 if (this.isOutlineActive(entity2, entity, camera))
---
>                                 if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag3) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(blockpos$pooledmutableblockpos.setPos(entity2))))
651,652c768,769
<                                     list1.add(entity2);
<                                 }
---
>                                     ++this.countEntitiesRendered;
>                                     this.renderedEntity = entity2;
654,656c771,787
<                                 if (this.renderManager.isRenderMultipass(entity2))
<                                 {
<                                     list2.add(entity2);
---
>                                     if (flag4)
>                                     {
>                                         Shaders.nextEntity(entity2);
>                                     }
> 
>                                     this.renderManager.renderEntityStatic(entity2, partialTicks, false);
>                                     this.renderedEntity = null;
> 
>                                     if (this.isOutlineActive(entity2, entity, camera))
>                                     {
>                                         list1.add(entity2);
>                                     }
> 
>                                     if (this.renderManager.isRenderMultipass(entity2))
>                                     {
>                                         list2.add(entity2);
>                                     }
670c801,809
<                     this.renderManager.renderMultipass(entity3, partialTicks);
---
>                     if (!flag || Reflector.callBoolean(entity3, Reflector.ForgeEntity_shouldRenderInPass, i))
>                     {
>                         if (flag4)
>                         {
>                             Shaders.nextEntity(entity3);
>                         }
> 
>                         this.renderManager.renderMultipass(entity3, partialTicks);
>                     }
674c813
<             if (this.isRenderEntityOutlines() && (!list1.isEmpty() || this.entityOutlinesRendered))
---
>             if (i == 0 && this.isRenderEntityOutlines() && (!list1.isEmpty() || this.entityOutlinesRendered))
688c827
<                     for (int j = 0; j < list1.size(); ++j)
---
>                     for (int k = 0; k < list1.size(); ++k)
690c829,839
<                         this.renderManager.renderEntityStatic(list1.get(j), partialTicks, false);
---
>                         Entity entity4 = list1.get(k);
> 
>                         if (!flag || Reflector.callBoolean(entity4, Reflector.ForgeEntity_shouldRenderInPass, i))
>                         {
>                             if (flag4)
>                             {
>                                 Shaders.nextEntity(entity4);
>                             }
> 
>                             this.renderManager.renderEntityStatic(entity4, partialTicks, false);
>                         }
709a859,903
>             if (!this.isRenderEntityOutlines() && (!list1.isEmpty() || this.entityOutlinesRendered))
>             {
>                 this.theWorld.theProfiler.endStartSection("entityOutlines");
>                 this.entityOutlinesRendered = !list1.isEmpty();
> 
>                 if (!list1.isEmpty())
>                 {
>                     GlStateManager.disableFog();
>                     GlStateManager.disableDepth();
>                     this.mc.entityRenderer.disableLightmap();
>                     RenderHelper.disableStandardItemLighting();
>                     this.renderManager.setRenderOutlines(true);
> 
>                     for (int l = 0; l < list1.size(); ++l)
>                     {
>                         Entity entity5 = list1.get(l);
> 
>                         if (!flag || Reflector.callBoolean(entity5, Reflector.ForgeEntity_shouldRenderInPass, i))
>                         {
>                             if (flag4)
>                             {
>                                 Shaders.nextEntity(entity5);
>                             }
> 
>                             this.renderManager.renderEntityStatic(entity5, partialTicks, false);
>                         }
>                     }
> 
>                     this.renderManager.setRenderOutlines(false);
>                     RenderHelper.enableStandardItemLighting();
>                     this.mc.entityRenderer.enableLightmap();
>                     GlStateManager.enableDepth();
>                     GlStateManager.enableFog();
>                 }
>             }
> 
>             this.mc.gameSettings.fancyGraphics = flag5;
>             FontRenderer fontrenderer = TileEntityRendererDispatcher.instance.getFontRenderer();
> 
>             if (flag4)
>             {
>                 Shaders.endEntities();
>                 Shaders.beginBlockEntities();
>             }
> 
713c907,914
<             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 : this.renderInfos)
---
>             if (Reflector.ForgeTileEntity_hasFastRenderer.exists())
>             {
>                 TileEntityRendererDispatcher.instance.preDrawBatch();
>             }
> 
>             label251:
> 
>             for (Object renderglobal$containerlocalrenderinformation10 : this.renderInfosTileEntities)
714a916
>             	RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = (RenderGlobal.ContainerLocalRenderInformation) renderglobal$containerlocalrenderinformation10;
719c921,923
<                     for (TileEntity tileentity2 : list3)
---
>                     Iterator iterator = list3.iterator();
> 
>                     while (true)
721c925,972
<                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity2, partialTicks, -1);
---
>                         TileEntity tileentity1;
> 
>                         while (true)
>                         {
>                             if (!iterator.hasNext())
>                             {
>                                 continue label251;
>                             }
> 
>                             tileentity1 = (TileEntity)iterator.next();
> 
>                             if (!flag1)
>                             {
>                                 break;
>                             }
> 
>                             if (Reflector.callBoolean(tileentity1, Reflector.ForgeTileEntity_shouldRenderInPass, i))
>                             {
>                                 AxisAlignedBB axisalignedbb = (AxisAlignedBB)Reflector.call(tileentity1, Reflector.ForgeTileEntity_getRenderBoundingBox);
> 
>                                 if (axisalignedbb == null || camera.isBoundingBoxInFrustum(axisalignedbb))
>                                 {
>                                     break;
>                                 }
>                             }
>                         }
> 
>                         Class oclass = tileentity1.getClass();
> 
>                         if (oclass == TileEntitySign.class && !Config.zoomMode)
>                         {
>                             EntityPlayer entityplayer = this.mc.player;
>                             double d6 = tileentity1.getDistanceSq(entityplayer.posX, entityplayer.posY, entityplayer.posZ);
> 
>                             if (d6 > 256.0D)
>                             {
>                                 fontrenderer.enabled = false;
>                             }
>                         }
> 
>                         if (flag4)
>                         {
>                             Shaders.nextBlockEntity(tileentity1);
>                         }
> 
>                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity1, partialTicks, -1);
>                         ++this.countTileEntitiesRendered;
>                         fontrenderer.enabled = true;
730c981,989
<                     TileEntityRendererDispatcher.instance.renderTileEntity(tileentity, partialTicks, -1);
---
>                     if (!flag1 || Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_shouldRenderInPass, i))
>                     {
>                         if (flag4)
>                         {
>                             Shaders.nextBlockEntity(tileentity);
>                         }
> 
>                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity, partialTicks, -1);
>                     }
733a993,998
>             if (Reflector.ForgeTileEntity_hasFastRenderer.exists())
>             {
>                 TileEntityRendererDispatcher.instance.drawBatch(i);
>             }
> 
>             this.renderOverlayDamaged = true;
742c1007
<                     TileEntity tileentity1 = this.theWorld.getTileEntity(blockpos);
---
>                     TileEntity tileentity2 = this.theWorld.getTileEntity(blockpos);
744c1009
<                     if (tileentity1 instanceof TileEntityChest)
---
>                     if (tileentity2 instanceof TileEntityChest)
746c1011
<                         TileEntityChest tileentitychest = (TileEntityChest)tileentity1;
---
>                         TileEntityChest tileentitychest = (TileEntityChest)tileentity2;
751c1016
<                             tileentity1 = this.theWorld.getTileEntity(blockpos);
---
>                             tileentity2 = this.theWorld.getTileEntity(blockpos);
756c1021
<                             tileentity1 = this.theWorld.getTileEntity(blockpos);
---
>                             tileentity2 = this.theWorld.getTileEntity(blockpos);
762c1027
<                     if (tileentity1 != null && iblockstate.func_191057_i())
---
>                     if (tileentity2 != null && iblockstate.func_191057_i())
764c1029,1034
<                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity1, partialTicks, destroyblockprogress.getPartialBlockDamage());
---
>                         if (flag4)
>                         {
>                             Shaders.nextBlockEntity(tileentity2);
>                         }
> 
>                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity2, partialTicks, destroyblockprogress.getPartialBlockDamage());
769a1040
>             this.renderOverlayDamaged = false;
829c1100
<         return "E: " + this.countEntitiesRendered + "/" + this.countEntitiesTotal + ", B: " + this.countEntitiesHidden;
---
>         return "E: " + this.countEntitiesRendered + "/" + this.countEntitiesTotal + ", B: " + this.countEntitiesHidden + ", " + Config.getVersionDebug();
854a1126,1130
>         if (Config.isDynamicLights())
>         {
>             DynamicLights.update(this);
>         }
> 
872c1148
<         BlockPos blockpos = new BlockPos(MathHelper.floor(d3 / 16.0D) * 16, MathHelper.floor(d4 / 16.0D) * 16, MathHelper.floor(d5 / 16.0D) * 16);
---
>         new BlockPos(MathHelper.floor(d3 / 16.0D) * 16, MathHelper.floor(d4 / 16.0D) * 16, MathHelper.floor(d5 / 16.0D) * 16);
880a1157,1213
>         Lagometer.timerVisibility.start();
>         int i = this.getCountLoadedChunks();
> 
>         if (i != this.countLoadedChunksPrev)
>         {
>             this.countLoadedChunksPrev = i;
>             this.displayListEntitiesDirty = true;
>         }
> 
>         if (Shaders.isShadowPass)
>         {
>             this.renderInfos = this.renderInfosShadow;
>             this.renderInfosEntities = this.renderInfosEntitiesShadow;
>             this.renderInfosTileEntities = this.renderInfosTileEntitiesShadow;
> 
>             if (!flag && this.displayListEntitiesDirty)
>             {
>                 this.renderInfos.clear();
>                 this.renderInfosEntities.clear();
>                 this.renderInfosTileEntities.clear();
>                 RenderInfoLazy renderinfolazy = new RenderInfoLazy();
>                 Iterator<RenderChunk> iterator = ShadowUtils.makeShadowChunkIterator(this.theWorld, partialTicks, viewEntity, this.renderDistanceChunks, this.viewFrustum);
> 
>                 while (iterator.hasNext())
>                 {
>                     RenderChunk renderchunk1 = iterator.next();
> 
>                     if (renderchunk1 != null)
>                     {
>                         renderinfolazy.setRenderChunk(renderchunk1);
> 
>                         if (!renderchunk1.compiledChunk.isEmpty() || renderchunk1.isNeedsUpdate())
>                         {
>                             this.renderInfos.add(renderinfolazy.getRenderInfo());
>                         }
> 
>                         BlockPos blockpos = renderchunk1.getPosition();
> 
>                         if (ChunkUtils.hasEntities(this.theWorld.getChunkFromBlockCoords(blockpos)))
>                         {
>                             this.renderInfosEntities.add(renderinfolazy.getRenderInfo());
>                         }
> 
>                         if (renderchunk1.getCompiledChunk().getTileEntities().size() > 0)
>                         {
>                             this.renderInfosTileEntities.add(renderinfolazy.getRenderInfo());
>                         }
>                     }
>                 }
>             }
>         }
>         else
>         {
>             this.renderInfos = this.renderInfosNormal;
>             this.renderInfosEntities = this.renderInfosEntitiesNormal;
>             this.renderInfosTileEntities = this.renderInfosTileEntitiesNormal;
>         }
882c1215
<         if (!flag && this.displayListEntitiesDirty)
---
>         if (!flag && this.displayListEntitiesDirty && !Shaders.isShadowPass)
885,886c1218,1228
<             this.renderInfos = Lists.<RenderGlobal.ContainerLocalRenderInformation>newArrayList();
<             Queue<RenderGlobal.ContainerLocalRenderInformation> queue = Queues.<RenderGlobal.ContainerLocalRenderInformation>newArrayDeque();
---
> 
>             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 : this.renderInfos)
>             {
>                 this.freeRenderInformation(renderglobal$containerlocalrenderinformation1);
>             }
> 
>             this.renderInfos.clear();
>             this.renderInfosEntities.clear();
>             this.renderInfosTileEntities.clear();
>             this.visibilityDeque.clear();
>             Deque deque = this.visibilityDeque;
888c1230
<             boolean flag1 = this.mc.renderChunksMany;
---
>             boolean flag2 = this.mc.renderChunksMany;
892c1234
<                 boolean flag2 = false;
---
>                 boolean flag3 = false;
894c1236
<                 Set<EnumFacing> set1 = this.getVisibleFacings(blockpos1);
---
>                 Set set1 = SET_ALL_FACINGS;
905c1247
<                     flag2 = true;
---
>                     flag3 = true;
908c1250
<                 if (flag2 && !playerSpectator)
---
>                 if (flag3 && !playerSpectator)
916c1258
<                         flag1 = false;
---
>                         flag2 = false;
920c1262
<                     queue.add(renderglobal$containerlocalrenderinformation3);
---
>                     deque.add(renderglobal$containerlocalrenderinformation3);
925c1267
<                 int i = blockpos1.getY() > 0 ? 248 : 8;
---
>                 int i1 = blockpos1.getY() > 0 ? 248 : 8;
927c1269
<                 for (int j = -this.renderDistanceChunks; j <= this.renderDistanceChunks; ++j)
---
>                 for (int j1 = -this.renderDistanceChunks; j1 <= this.renderDistanceChunks; ++j1)
929c1271
<                     for (int k = -this.renderDistanceChunks; k <= this.renderDistanceChunks; ++k)
---
>                     for (int j = -this.renderDistanceChunks; j <= this.renderDistanceChunks; ++j)
931c1273
<                         RenderChunk renderchunk1 = this.viewFrustum.getRenderChunk(new BlockPos((j << 4) + 8, i, (k << 4) + 8));
---
>                         RenderChunk renderchunk2 = this.viewFrustum.getRenderChunk(new BlockPos((j1 << 4) + 8, i1, (j << 4) + 8));
933c1275
<                         if (renderchunk1 != null && camera.isBoundingBoxInFrustum(renderchunk1.boundingBox))
---
>                         if (renderchunk2 != null && camera.isBoundingBoxInFrustum(renderchunk2.boundingBox))
935,936c1277,1278
<                             renderchunk1.setFrameIndex(frameCount);
<                             queue.add(new RenderGlobal.ContainerLocalRenderInformation(renderchunk1, (EnumFacing)null, 0));
---
>                             renderchunk2.setFrameIndex(frameCount);
>                             deque.add(new RenderGlobal.ContainerLocalRenderInformation(renderchunk2, (EnumFacing)null, 0));
942a1285,1286
>             EnumFacing[] aenumfacing = EnumFacing.VALUES;
>             int k1 = aenumfacing.length;
944c1288
<             while (!queue.isEmpty())
---
>             while (!deque.isEmpty())
946,949c1290,1312
<                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = queue.poll();
<                 RenderChunk renderchunk3 = renderglobal$containerlocalrenderinformation1.renderChunk;
<                 EnumFacing enumfacing2 = renderglobal$containerlocalrenderinformation1.facing;
<                 this.renderInfos.add(renderglobal$containerlocalrenderinformation1);
---
>                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation4 = (RenderGlobal.ContainerLocalRenderInformation)deque.poll();
>                 RenderChunk renderchunk5 = renderglobal$containerlocalrenderinformation4.renderChunk;
>                 EnumFacing enumfacing2 = renderglobal$containerlocalrenderinformation4.facing;
>                 boolean flag1 = false;
>                 CompiledChunk compiledchunk = renderchunk5.compiledChunk;
> 
>                 if (!compiledchunk.isEmpty() || renderchunk5.isNeedsUpdate())
>                 {
>                     this.renderInfos.add(renderglobal$containerlocalrenderinformation4);
>                     flag1 = true;
>                 }
> 
>                 if (ChunkUtils.hasEntities(renderchunk5.getChunk(this.theWorld)))
>                 {
>                     this.renderInfosEntities.add(renderglobal$containerlocalrenderinformation4);
>                     flag1 = true;
>                 }
> 
>                 if (compiledchunk.getTileEntities().size() > 0)
>                 {
>                     this.renderInfosTileEntities.add(renderglobal$containerlocalrenderinformation4);
>                     flag1 = true;
>                 }
951c1314
<                 for (EnumFacing enumfacing1 : EnumFacing.values())
---
>                 for (int k = 0; k < k1; ++k)
953c1316
<                     RenderChunk renderchunk2 = this.getRenderChunkOffset(blockpos, renderchunk3, enumfacing1);
---
>                     EnumFacing enumfacing1 = aenumfacing[k];
955c1318
<                     if ((!flag1 || !renderglobal$containerlocalrenderinformation1.hasDirection(enumfacing1.getOpposite())) && (!flag1 || enumfacing2 == null || renderchunk3.getCompiledChunk().isVisible(enumfacing2.getOpposite(), enumfacing1)) && renderchunk2 != null && renderchunk2.setFrameIndex(frameCount) && camera.isBoundingBoxInFrustum(renderchunk2.boundingBox))
---
>                     if ((!flag2 || !renderglobal$containerlocalrenderinformation4.hasDirection(enumfacing1.getOpposite())) && (!flag2 || enumfacing2 == null || compiledchunk.isVisible(enumfacing2.getOpposite(), enumfacing1)))
957,959c1320,1327
<                         RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = new RenderGlobal.ContainerLocalRenderInformation(renderchunk2, enumfacing1, renderglobal$containerlocalrenderinformation1.counter + 1);
<                         renderglobal$containerlocalrenderinformation.setDirection(renderglobal$containerlocalrenderinformation1.setFacing, enumfacing1);
<                         queue.add(renderglobal$containerlocalrenderinformation);
---
>                         RenderChunk renderchunk3 = this.getRenderChunkOffset(blockpos1, renderchunk5, enumfacing1);
> 
>                         if (renderchunk3 != null && renderchunk3.setFrameIndex(frameCount) && camera.isBoundingBoxInFrustum(renderchunk3.boundingBox))
>                         {
>                             int l = renderglobal$containerlocalrenderinformation4.setFacing | 1 << enumfacing1.ordinal();
>                             RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = this.allocateRenderInformation(renderchunk3, enumfacing1, l);
>                             deque.add(renderglobal$containerlocalrenderinformation);
>                         }
961a1330,1334
> 
>                 if (!flag1)
>                 {
>                     this.freeRenderInformation(renderglobal$containerlocalrenderinformation4);
>                 }
975,977c1348
<         this.mc.mcProfiler.endStartSection("rebuildNear");
<         Set<RenderChunk> set = this.chunksToUpdate;
<         this.chunksToUpdate = Sets.<RenderChunk>newLinkedHashSet();
---
>         Lagometer.timerVisibility.end();
979c1350
<         for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation2 : this.renderInfos)
---
>         if (Shaders.isShadowPass)
981c1352,1359
<             RenderChunk renderchunk4 = renderglobal$containerlocalrenderinformation2.renderChunk;
---
>             Shaders.mcProfilerEndSection();
>         }
>         else
>         {
>             this.mc.mcProfiler.endStartSection("rebuildNear");
>             Set<RenderChunk> set = this.chunksToUpdate;
>             this.chunksToUpdate = Sets.<RenderChunk>newLinkedHashSet();
>             Lagometer.timerChunkUpdate.start();
983c1361
<             if (renderchunk4.isNeedsUpdate() || set.contains(renderchunk4))
---
>             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation2 : this.renderInfos)
985,987c1363
<                 this.displayListEntitiesDirty = true;
<                 BlockPos blockpos2 = renderchunk4.getPosition().add(8, 8, 8);
<                 boolean flag3 = blockpos2.distanceSq(blockpos1) < 768.0D;
---
>                 RenderChunk renderchunk4 = renderglobal$containerlocalrenderinformation2.renderChunk;
989,993c1365
<                 if (!renderchunk4.isNeedsUpdateCustom() && !flag3)
<                 {
<                     this.chunksToUpdate.add(renderchunk4);
<                 }
<                 else
---
>                 if (renderchunk4.isNeedsUpdate() || set.contains(renderchunk4))
995,998c1367,1385
<                     this.mc.mcProfiler.startSection("build near");
<                     this.renderDispatcher.updateChunkNow(renderchunk4);
<                     renderchunk4.clearNeedsUpdate();
<                     this.mc.mcProfiler.endSection();
---
>                     this.displayListEntitiesDirty = true;
>                     BlockPos blockpos2 = renderchunk4.getPosition();
>                     boolean flag4 = blockpos1.distanceSq((double)(blockpos2.getX() + 8), (double)(blockpos2.getY() + 8), (double)(blockpos2.getZ() + 8)) < 768.0D;
> 
>                     if (!flag4)
>                     {
>                         this.chunksToUpdate.add(renderchunk4);
>                     }
>                     else if (!renderchunk4.isPlayerUpdate())
>                     {
>                         this.chunksToUpdateForced.add(renderchunk4);
>                     }
>                     else
>                     {
>                         this.mc.mcProfiler.startSection("build near");
>                         this.renderDispatcher.updateChunkNow(renderchunk4);
>                         renderchunk4.clearNeedsUpdate();
>                         this.mc.mcProfiler.endSection();
>                     }
1001d1387
<         }
1003,1004c1389,1392
<         this.chunksToUpdate.addAll(set);
<         this.mc.mcProfiler.endSection();
---
>             Lagometer.timerChunkUpdate.end();
>             this.chunksToUpdate.addAll(set);
>             this.mc.mcProfiler.endSection();
>         }
1033,1037c1421
<         if (MathHelper.abs(playerPos.getX() - blockpos.getX()) > this.renderDistanceChunks * 16)
<         {
<             return null;
<         }
<         else if (blockpos.getY() >= 0 && blockpos.getY() < 256)
---
>         if (blockpos.getY() >= 0 && blockpos.getY() < 256)
1039c1423,1443
<             return MathHelper.abs(playerPos.getZ() - blockpos.getZ()) > this.renderDistanceChunks * 16 ? null : this.viewFrustum.getRenderChunk(blockpos);
---
>             int i = playerPos.getX() - blockpos.getX();
>             int j = playerPos.getZ() - blockpos.getZ();
> 
>             if (Config.isFogOff())
>             {
>                 if (Math.abs(i) > this.renderDistance || Math.abs(j) > this.renderDistance)
>                 {
>                     return null;
>                 }
>             }
>             else
>             {
>                 int k = i * i + j * j;
> 
>                 if (k > this.renderDistanceSq)
>                 {
>                     return null;
>                 }
>             }
> 
>             return renderChunkBase.getRenderChunkOffset16(this.viewFrustum, facing);
1113a1518
>                 this.chunksToResortTransparency.clear();
1119c1524
<                         this.renderDispatcher.updateTransparencyLater(renderglobal$containerlocalrenderinformation.renderChunk);
---
>                         this.chunksToResortTransparency.add(renderglobal$containerlocalrenderinformation.renderChunk);
1145,1148c1550,1566
<         this.mc.mcProfiler.endStartSection("render_" + blockLayerIn);
<         this.renderBlockLayer(blockLayerIn);
<         this.mc.mcProfiler.endSection();
<         return l;
---
>         if (l == 0)
>         {
>             this.mc.mcProfiler.endSection();
>             return l;
>         }
>         else
>         {
>             if (Config.isFogOff() && this.mc.entityRenderer.fogStandard)
>             {
>                 GlStateManager.disableFog();
>             }
> 
>             this.mc.mcProfiler.endStartSection("render_" + blockLayerIn);
>             this.renderBlockLayer(blockLayerIn);
>             this.mc.mcProfiler.endSection();
>             return l;
>         }
1152c1570
<     private void renderBlockLayer(BlockRenderLayer blockLayerIn)
---
> 	private void renderBlockLayer(BlockRenderLayer blockLayerIn)
1166a1585,1589
>         if (Config.isShaders())
>         {
>             ShadersRender.preRenderChunkLayer(blockLayerIn);
>         }
> 
1168a1592,1596
>         if (Config.isShaders())
>         {
>             ShadersRender.postRenderChunkLayer(blockLayerIn);
>         }
> 
1174c1602
<                 int i = vertexformatelement.getIndex();
---
>                 int k1 = vertexformatelement.getIndex();
1183c1611
<                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + i);
---
>                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + k1);
1203c1631
<             int i = destroyblockprogress.getCreationCloudUpdateTick();
---
>             int k1 = destroyblockprogress.getCreationCloudUpdateTick();
1205c1633
<             if (this.cloudTickCounter - i > 400)
---
>             if (this.cloudTickCounter - k1 > 400)
1213a1642,1648
>         if (Config.isShaders() && Keyboard.isKeyDown(61) && Keyboard.isKeyDown(19))
>         {
>             Shaders.uninit();
>             Shaders.loadShaderPack();
>             Reflector.Minecraft_actionKeyF3.setValue(this.mc, Boolean.TRUE);
>         }
> 
1229,1232c1664,1667
<                 int i = blockpos.getX();
<                 int j = blockpos.getY();
<                 int k = blockpos.getZ();
<                 this.markBlocksForUpdate(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1, false);
---
>                 int k1 = blockpos.getX();
>                 int l1 = blockpos.getY();
>                 int i2 = blockpos.getZ();
>                 this.markBlocksForUpdate(k1 - 1, l1 - 1, i2 - 1, k1 + 1, l1 + 1, i2 + 1, false);
1239,1249c1674
<         GlStateManager.disableFog();
<         GlStateManager.disableAlpha();
<         GlStateManager.enableBlend();
<         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
<         RenderHelper.disableStandardItemLighting();
<         GlStateManager.depthMask(false);
<         this.renderEngine.bindTexture(END_SKY_TEXTURES);
<         Tessellator tessellator = Tessellator.getInstance();
<         BufferBuilder bufferbuilder = tessellator.getBuffer();
< 
<         for (int i = 0; i < 6; ++i)
---
>         if (Config.isSkyEnabled())
1251c1676,1684
<             GlStateManager.pushMatrix();
---
>             GlStateManager.disableFog();
>             GlStateManager.disableAlpha();
>             GlStateManager.enableBlend();
>             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
>             RenderHelper.disableStandardItemLighting();
>             GlStateManager.depthMask(false);
>             this.renderEngine.bindTexture(END_SKY_TEXTURES);
>             Tessellator tessellator = Tessellator.getInstance();
>             BufferBuilder bufferbuilder = tessellator.getBuffer();
1253c1686
<             if (i == 1)
---
>             for (int k1 = 0; k1 < 6; ++k1)
1255,1256c1688
<                 GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
<             }
---
>                 GlStateManager.pushMatrix();
1258,1261c1690,1693
<             if (i == 2)
<             {
<                 GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
<             }
---
>                 if (k1 == 1)
>                 {
>                     GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
>                 }
1263,1266c1695,1698
<             if (i == 3)
<             {
<                 GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
<             }
---
>                 if (k1 == 2)
>                 {
>                     GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
>                 }
1268,1271c1700,1703
<             if (i == 4)
<             {
<                 GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
<             }
---
>                 if (k1 == 3)
>                 {
>                     GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
>                 }
1273,1275c1705,1734
<             if (i == 5)
<             {
<                 GlStateManager.rotate(-90.0F, 0.0F, 0.0F, 1.0F);
---
>                 if (k1 == 4)
>                 {
>                     GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
>                 }
> 
>                 if (k1 == 5)
>                 {
>                     GlStateManager.rotate(-90.0F, 0.0F, 0.0F, 1.0F);
>                 }
> 
>                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
>                 int l1 = 40;
>                 int i2 = 40;
>                 int j2 = 40;
> 
>                 if (Config.isCustomColors())
>                 {
>                     Vec3d vec3d = new Vec3d((double)l1 / 255.0D, (double)i2 / 255.0D, (double)j2 / 255.0D);
>                     vec3d = CustomColors.getWorldSkyColor(vec3d, this.theWorld, this.mc.getRenderViewEntity(), 0.0F);
>                     l1 = (int)(vec3d.xCoord * 255.0D);
>                     i2 = (int)(vec3d.yCoord * 255.0D);
>                     j2 = (int)(vec3d.zCoord * 255.0D);
>                 }
> 
>                 bufferbuilder.pos(-100.0D, -100.0D, -100.0D).tex(0.0D, 0.0D).color(l1, i2, j2, 255).endVertex();
>                 bufferbuilder.pos(-100.0D, -100.0D, 100.0D).tex(0.0D, 16.0D).color(l1, i2, j2, 255).endVertex();
>                 bufferbuilder.pos(100.0D, -100.0D, 100.0D).tex(16.0D, 16.0D).color(l1, i2, j2, 255).endVertex();
>                 bufferbuilder.pos(100.0D, -100.0D, -100.0D).tex(16.0D, 0.0D).color(l1, i2, j2, 255).endVertex();
>                 tessellator.draw();
>                 GlStateManager.popMatrix();
1278,1284c1737,1740
<             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
<             bufferbuilder.pos(-100.0D, -100.0D, -100.0D).tex(0.0D, 0.0D).color(40, 40, 40, 255).endVertex();
<             bufferbuilder.pos(-100.0D, -100.0D, 100.0D).tex(0.0D, 16.0D).color(40, 40, 40, 255).endVertex();
<             bufferbuilder.pos(100.0D, -100.0D, 100.0D).tex(16.0D, 16.0D).color(40, 40, 40, 255).endVertex();
<             bufferbuilder.pos(100.0D, -100.0D, -100.0D).tex(16.0D, 0.0D).color(40, 40, 40, 255).endVertex();
<             tessellator.draw();
<             GlStateManager.popMatrix();
---
>             GlStateManager.depthMask(true);
>             GlStateManager.enableTexture2D();
>             GlStateManager.enableAlpha();
>             GlStateManager.disableBlend();
1286,1289d1741
< 
<         GlStateManager.depthMask(true);
<         GlStateManager.enableTexture2D();
<         GlStateManager.enableAlpha();
1294c1746,1758
<         if (this.mc.world.provider.getDimensionType().getId() == 1)
---
>         if (Reflector.ForgeWorldProvider_getSkyRenderer.exists())
>         {
>             WorldProvider worldprovider = this.mc.world.provider;
>             Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getSkyRenderer);
> 
>             if (object != null)
>             {
>                 Reflector.callVoid(object, Reflector.IRenderHandler_render, partialTicks, this.theWorld, this.mc);
>                 return;
>             }
>         }
> 
>         if (this.mc.world.provider.getDimensionType() == DimensionType.THE_END)
1300a1765,1771
>             boolean flag1 = Config.isShaders();
> 
>             if (flag1)
>             {
>                 Shaders.disableTexture2D();
>             }
> 
1301a1773,1779
>             vec3d = CustomColors.getSkyColor(vec3d, this.mc.world, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
> 
>             if (flag1)
>             {
>                 Shaders.setSkyColor(vec3d);
>             }
> 
1320a1799,1804
> 
>             if (flag1)
>             {
>                 Shaders.enableFog();
>             }
> 
1323c1807
<             if (this.vboEnabled)
---
>             if (flag1)
1325,1330c1809
<                 this.skyVBO.bindBuffer();
<                 GlStateManager.glEnableClientState(32884);
<                 GlStateManager.glVertexPointer(3, 5126, 12, 0);
<                 this.skyVBO.drawArrays(7);
<                 this.skyVBO.unbindBuffer();
<                 GlStateManager.glDisableClientState(32884);
---
>                 Shaders.preSkyList();
1332c1811,1812
<             else
---
> 
>             if (Config.isSkyEnabled())
1334c1814,1826
<                 GlStateManager.callList(this.glSkyList);
---
>                 if (this.vboEnabled)
>                 {
>                     this.skyVBO.bindBuffer();
>                     GlStateManager.glEnableClientState(32884);
>                     GlStateManager.glVertexPointer(3, 5126, 12, 0);
>                     this.skyVBO.drawArrays(7);
>                     this.skyVBO.unbindBuffer();
>                     GlStateManager.glDisableClientState(32884);
>                 }
>                 else
>                 {
>                     GlStateManager.callList(this.glSkyList);
>                 }
1337a1830,1835
> 
>             if (flag1)
>             {
>                 Shaders.disableFog();
>             }
> 
1344c1842
<             if (afloat != null)
---
>             if (afloat != null && Config.isSunMoonEnabled())
1346a1845,1850
> 
>                 if (flag1)
>                 {
>                     Shaders.disableTexture2D();
>                 }
> 
1368c1872
<                 int j = 16;
---
>                 int l1 = 16;
1370c1874
<                 for (int l = 0; l <= 16; ++l)
---
>                 for (int j2 = 0; j2 <= 16; ++j2)
1372,1374c1876,1878
<                     float f21 = (float)l * ((float)Math.PI * 2F) / 16.0F;
<                     float f12 = MathHelper.sin(f21);
<                     float f13 = MathHelper.cos(f21);
---
>                     float f18 = (float)j2 * ((float)Math.PI * 2F) / 16.0F;
>                     float f12 = MathHelper.sin(f18);
>                     float f13 = MathHelper.cos(f18);
1383a1888,1893
> 
>             if (flag1)
>             {
>                 Shaders.enableTexture2D();
>             }
> 
1386,1387c1896,1897
<             float f16 = 1.0F - this.theWorld.getRainStrength(partialTicks);
<             GlStateManager.color(1.0F, 1.0F, 1.0F, f16);
---
>             float f15 = 1.0F - this.theWorld.getRainStrength(partialTicks);
>             GlStateManager.color(1.0F, 1.0F, 1.0F, f15);
1388a1899,1905
>             CustomSky.renderSky(this.theWorld, this.renderEngine, partialTicks);
> 
>             if (flag1)
>             {
>                 Shaders.preCelestialRotate();
>             }
> 
1390,1412c1907,1945
<             float f17 = 30.0F;
<             this.renderEngine.bindTexture(SUN_TEXTURES);
<             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
<             bufferbuilder.pos((double)(-f17), 100.0D, (double)(-f17)).tex(0.0D, 0.0D).endVertex();
<             bufferbuilder.pos((double)f17, 100.0D, (double)(-f17)).tex(1.0D, 0.0D).endVertex();
<             bufferbuilder.pos((double)f17, 100.0D, (double)f17).tex(1.0D, 1.0D).endVertex();
<             bufferbuilder.pos((double)(-f17), 100.0D, (double)f17).tex(0.0D, 1.0D).endVertex();
<             tessellator.draw();
<             f17 = 20.0F;
<             this.renderEngine.bindTexture(MOON_PHASES_TEXTURES);
<             int i = this.theWorld.getMoonPhase();
<             int k = i % 4;
<             int i1 = i / 4 % 2;
<             float f22 = (float)(k + 0) / 4.0F;
<             float f23 = (float)(i1 + 0) / 2.0F;
<             float f24 = (float)(k + 1) / 4.0F;
<             float f14 = (float)(i1 + 1) / 2.0F;
<             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
<             bufferbuilder.pos((double)(-f17), -100.0D, (double)f17).tex((double)f24, (double)f14).endVertex();
<             bufferbuilder.pos((double)f17, -100.0D, (double)f17).tex((double)f22, (double)f14).endVertex();
<             bufferbuilder.pos((double)f17, -100.0D, (double)(-f17)).tex((double)f22, (double)f23).endVertex();
<             bufferbuilder.pos((double)(-f17), -100.0D, (double)(-f17)).tex((double)f24, (double)f23).endVertex();
<             tessellator.draw();
---
> 
>             if (flag1)
>             {
>                 Shaders.postCelestialRotate();
>             }
> 
>             float f16 = 30.0F;
> 
>             if (Config.isSunTexture())
>             {
>                 this.renderEngine.bindTexture(SUN_TEXTURES);
>                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
>                 bufferbuilder.pos((double)(-f16), 100.0D, (double)(-f16)).tex(0.0D, 0.0D).endVertex();
>                 bufferbuilder.pos((double)f16, 100.0D, (double)(-f16)).tex(1.0D, 0.0D).endVertex();
>                 bufferbuilder.pos((double)f16, 100.0D, (double)f16).tex(1.0D, 1.0D).endVertex();
>                 bufferbuilder.pos((double)(-f16), 100.0D, (double)f16).tex(0.0D, 1.0D).endVertex();
>                 tessellator.draw();
>             }
> 
>             f16 = 20.0F;
> 
>             if (Config.isMoonTexture())
>             {
>                 this.renderEngine.bindTexture(MOON_PHASES_TEXTURES);
>                 int k1 = this.theWorld.getMoonPhase();
>                 int i2 = k1 % 4;
>                 int k2 = k1 / 4 % 2;
>                 float f19 = (float)(i2 + 0) / 4.0F;
>                 float f21 = (float)(k2 + 0) / 2.0F;
>                 float f23 = (float)(i2 + 1) / 4.0F;
>                 float f14 = (float)(k2 + 1) / 2.0F;
>                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
>                 bufferbuilder.pos((double)(-f16), -100.0D, (double)f16).tex((double)f23, (double)f14).endVertex();
>                 bufferbuilder.pos((double)f16, -100.0D, (double)f16).tex((double)f19, (double)f14).endVertex();
>                 bufferbuilder.pos((double)f16, -100.0D, (double)(-f16)).tex((double)f19, (double)f21).endVertex();
>                 bufferbuilder.pos((double)(-f16), -100.0D, (double)(-f16)).tex((double)f23, (double)f21).endVertex();
>                 tessellator.draw();
>             }
> 
1414d1946
<             float f15 = this.theWorld.getStarBrightness(partialTicks) * f16;
1416c1948,1955
<             if (f15 > 0.0F)
---
>             if (flag1)
>             {
>                 Shaders.disableTexture2D();
>             }
> 
>             float f17 = this.theWorld.getStarBrightness(partialTicks) * f15;
> 
>             if (f17 > 0.0F && Config.isStarsEnabled() && !CustomSky.hasSkyLayers(this.theWorld))
1418c1957
<                 GlStateManager.color(f15, f15, f15, f15);
---
>                 GlStateManager.color(f17, f17, f17, f17);
1438a1978,1983
> 
>             if (flag1)
>             {
>                 Shaders.enableFog();
>             }
> 
1440a1986,1991
> 
>             if (flag1)
>             {
>                 Shaders.disableTexture2D();
>             }
> 
1442c1993
<             double d0 = this.mc.player.getPositionEyes(partialTicks).yCoord - this.theWorld.getHorizon();
---
>             double d3 = this.mc.player.getPositionEyes(partialTicks).yCoord - this.theWorld.getHorizon();
1444c1995
<             if (d0 < 0.0D)
---
>             if (d3 < 0.0D)
1464,1466c2015,2017
<                 float f18 = 1.0F;
<                 float f19 = -((float)(d0 + 65.0D));
<                 float f20 = -1.0F;
---
>                 float f20 = 1.0F;
>                 float f22 = -((float)(d3 + 65.0D));
>                 float f24 = -1.0F;
1468,1469c2019,2020
<                 bufferbuilder.pos(-1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
<                 bufferbuilder.pos(1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
---
>                 bufferbuilder.pos(-1.0D, (double)f22, 1.0D).color(0, 0, 0, 255).endVertex();
>                 bufferbuilder.pos(1.0D, (double)f22, 1.0D).color(0, 0, 0, 255).endVertex();
1474,1475c2025,2026
<                 bufferbuilder.pos(1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
<                 bufferbuilder.pos(-1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
---
>                 bufferbuilder.pos(1.0D, (double)f22, -1.0D).color(0, 0, 0, 255).endVertex();
>                 bufferbuilder.pos(-1.0D, (double)f22, -1.0D).color(0, 0, 0, 255).endVertex();
1478,1481c2029,2032
<                 bufferbuilder.pos(1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
<                 bufferbuilder.pos(1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
<                 bufferbuilder.pos(-1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
<                 bufferbuilder.pos(-1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
---
>                 bufferbuilder.pos(1.0D, (double)f22, 1.0D).color(0, 0, 0, 255).endVertex();
>                 bufferbuilder.pos(1.0D, (double)f22, -1.0D).color(0, 0, 0, 255).endVertex();
>                 bufferbuilder.pos(-1.0D, (double)f22, -1.0D).color(0, 0, 0, 255).endVertex();
>                 bufferbuilder.pos(-1.0D, (double)f22, 1.0D).color(0, 0, 0, 255).endVertex();
1499a2051,2055
>             if (this.mc.gameSettings.renderDistanceChunks <= 4)
>             {
>                 GlStateManager.color(this.mc.entityRenderer.fogColorRed, this.mc.entityRenderer.fogColorGreen, this.mc.entityRenderer.fogColorBlue);
>             }
> 
1501,1502c2057,2063
<             GlStateManager.translate(0.0F, -((float)(d0 - 16.0D)), 0.0F);
<             GlStateManager.callList(this.glSkyList2);
---
>             GlStateManager.translate(0.0F, -((float)(d3 - 16.0D)), 0.0F);
> 
>             if (Config.isSkyEnabled())
>             {
>                 GlStateManager.callList(this.glSkyList2);
>             }
> 
1504a2066,2071
> 
>             if (flag1)
>             {
>                 Shaders.enableTexture2D();
>             }
> 
1511c2078
<         if (this.mc.world.provider.isSurfaceWorld())
---
>         if (!Config.isCloudsOff())
1513c2080
<             if (this.mc.gameSettings.shouldRenderClouds() == 2)
---
>             if (Reflector.ForgeWorldProvider_getCloudRenderer.exists())
1515c2082,2089
<                 this.renderCloudsFancy(partialTicks, pass, p_180447_3_, p_180447_5_, p_180447_7_);
---
>                 WorldProvider worldprovider = this.mc.world.provider;
>                 Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getCloudRenderer);
> 
>                 if (object != null)
>                 {
>                     Reflector.callVoid(object, Reflector.IRenderHandler_render, partialTicks, this.theWorld, this.mc);
>                     return;
>                 }
1517,1530d2090
<             else
<             {
<                 GlStateManager.disableCull();
<                 int i = 32;
<                 int j = 8;
<                 Tessellator tessellator = Tessellator.getInstance();
<                 BufferBuilder bufferbuilder = tessellator.getBuffer();
<                 this.renderEngine.bindTexture(CLOUDS_TEXTURES);
<                 GlStateManager.enableBlend();
<                 GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
<                 Vec3d vec3d = this.theWorld.getCloudColour(partialTicks);
<                 float f = (float)vec3d.xCoord;
<                 float f1 = (float)vec3d.yCoord;
<                 float f2 = (float)vec3d.zCoord;
1532c2092,2094
<                 if (pass != 2)
---
>             if (this.mc.world.provider.isSurfaceWorld())
>             {
>                 if (Config.isShaders())
1534,1552c2096,2097
<                     float f3 = (f * 30.0F + f1 * 59.0F + f2 * 11.0F) / 100.0F;
<                     float f4 = (f * 30.0F + f1 * 70.0F) / 100.0F;
<                     float f5 = (f * 30.0F + f2 * 70.0F) / 100.0F;
<                     f = f3;
<                     f1 = f4;
<                     f2 = f5;
<                 }
< 
<                 float f9 = 4.8828125E-4F;
<                 double d2 = (double)((float)this.cloudTickCounter + partialTicks);
<                 double d0 = p_180447_3_ + d2 * 0.029999999329447746D;
<                 int k = MathHelper.floor(d0 / 2048.0D);
<                 int l = MathHelper.floor(p_180447_7_ / 2048.0D);
<                 d0 = d0 - (double)(k * 2048);
<                 double lvt_22_1_ = p_180447_7_ - (double)(l * 2048);
<                 float f6 = this.theWorld.provider.getCloudHeight() - (float)p_180447_5_ + 0.33F;
<                 float f7 = (float)(d0 * 4.8828125E-4D);
<                 float f8 = (float)(lvt_22_1_ * 4.8828125E-4D);
<                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
---
>                     Shaders.beginClouds();
>                 }
1554c2099
<                 for (int i1 = -256; i1 < 256; i1 += 32)
---
>                 if (Config.isCloudsFancy())
1556c2101,2121
<                     for (int j1 = -256; j1 < 256; j1 += 32)
---
>                     this.renderCloudsFancy(partialTicks, pass, p_180447_3_, p_180447_5_, p_180447_7_);
>                 }
>                 else
>                 {
>                     float f9 = partialTicks;
>                     partialTicks = 0.0F;
>                     GlStateManager.disableCull();
>                     int l2 = 32;
>                     int k1 = 8;
>                     Tessellator tessellator = Tessellator.getInstance();
>                     BufferBuilder bufferbuilder = tessellator.getBuffer();
>                     this.renderEngine.bindTexture(CLOUDS_TEXTURES);
>                     GlStateManager.enableBlend();
>                     GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
>                     Vec3d vec3d = this.theWorld.getCloudColour(partialTicks);
>                     float f = (float)vec3d.xCoord;
>                     float f1 = (float)vec3d.yCoord;
>                     float f2 = (float)vec3d.zCoord;
>                     this.cloudRenderer.prepareToRender(false, this.cloudTickCounter, f9, vec3d);
> 
>                     if (this.cloudRenderer.shouldUpdateGlList())
1558,1561c2123,2164
<                         bufferbuilder.pos((double)(i1 + 0), (double)f6, (double)(j1 + 32)).tex((double)((float)(i1 + 0) * 4.8828125E-4F + f7), (double)((float)(j1 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
<                         bufferbuilder.pos((double)(i1 + 32), (double)f6, (double)(j1 + 32)).tex((double)((float)(i1 + 32) * 4.8828125E-4F + f7), (double)((float)(j1 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
<                         bufferbuilder.pos((double)(i1 + 32), (double)f6, (double)(j1 + 0)).tex((double)((float)(i1 + 32) * 4.8828125E-4F + f7), (double)((float)(j1 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
<                         bufferbuilder.pos((double)(i1 + 0), (double)f6, (double)(j1 + 0)).tex((double)((float)(i1 + 0) * 4.8828125E-4F + f7), (double)((float)(j1 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
---
>                         this.cloudRenderer.startUpdateGlList();
> 
>                         if (pass != 2)
>                         {
>                             float f3 = (f * 30.0F + f1 * 59.0F + f2 * 11.0F) / 100.0F;
>                             float f4 = (f * 30.0F + f1 * 70.0F) / 100.0F;
>                             float f5 = (f * 30.0F + f2 * 70.0F) / 100.0F;
>                             f = f3;
>                             f1 = f4;
>                             f2 = f5;
>                         }
> 
>                         float f10 = 4.8828125E-4F;
>                         double d5 = (double)((float)this.cloudTickCounter + partialTicks);
>                         double d3 = p_180447_3_ + d5 * 0.029999999329447746D;
>                         int l1 = MathHelper.floor(d3 / 2048.0D);
>                         int i2 = MathHelper.floor(p_180447_7_ / 2048.0D);
>                         d3 = d3 - (double)(l1 * 2048);
>                         double d4 = p_180447_7_ - (double)(i2 * 2048);
>                         float f6 = this.theWorld.provider.getCloudHeight() - (float)p_180447_5_ + 0.33F;
>                         f6 = f6 + this.mc.gameSettings.ofCloudsHeight * 128.0F;
>                         float f7 = (float)(d3 * 4.8828125E-4D);
>                         float f8 = (float)(d4 * 4.8828125E-4D);
>                         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
> 
>                         for (int j2 = -256; j2 < 256; j2 += 32)
>                         {
>                             for (int k2 = -256; k2 < 256; k2 += 32)
>                             {
> //                            	float[] rgb = ColorUtils.intToRGBAF(ColorUtils.getChromaColor());
> //                            	f = rgb[0];
> //                            	f1 = rgb[1];
> //                            	f2 = rgb[2];
>                                 bufferbuilder.pos((double)(j2 + 0), (double)f6, (double)(k2 + 32)).tex((double)((float)(j2 + 0) * 4.8828125E-4F + f7), (double)((float)(k2 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
>                                 bufferbuilder.pos((double)(j2 + 32), (double)f6, (double)(k2 + 32)).tex((double)((float)(j2 + 32) * 4.8828125E-4F + f7), (double)((float)(k2 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
>                                 bufferbuilder.pos((double)(j2 + 32), (double)f6, (double)(k2 + 0)).tex((double)((float)(j2 + 32) * 4.8828125E-4F + f7), (double)((float)(k2 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
>                                 bufferbuilder.pos((double)(j2 + 0), (double)f6, (double)(k2 + 0)).tex((double)((float)(j2 + 0) * 4.8828125E-4F + f7), (double)((float)(k2 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
>                             }
>                         }
> 
>                         tessellator.draw();
>                         this.cloudRenderer.endUpdateGlList();
1562a2166,2170
> 
>                     this.cloudRenderer.renderGlList();
>                     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
>                     GlStateManager.disableBlend();
>                     GlStateManager.enableCull();
1565,1568c2173,2176
<                 tessellator.draw();
<                 GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
<                 GlStateManager.disableBlend();
<                 GlStateManager.enableCull();
---
>                 if (Config.isShaders())
>                 {
>                     Shaders.endClouds();
>                 }
1582a2191
>         float f251 = 0.0F;
1588,1590c2197,2199
<         double d0 = (double)((float)this.cloudTickCounter + partialTicks);
<         double d1 = (p_180445_3_ + d0 * 0.029999999329447746D) / 12.0D;
<         double d2 = p_180445_7_ / 12.0D + 0.33000001311302185D;
---
>         double d3 = (double)((float)this.cloudTickCounter + f251);
>         double d4 = (p_180445_3_ + d3 * 0.029999999329447746D) / 12.0D;
>         double d5 = p_180445_7_ / 12.0D + 0.33000001311302185D;
1592,1595c2201,2205
<         int i = MathHelper.floor(d1 / 2048.0D);
<         int j = MathHelper.floor(d2 / 2048.0D);
<         d1 = d1 - (double)(i * 2048);
<         d2 = d2 - (double)(j * 2048);
---
>         f2 = f2 + this.mc.gameSettings.ofCloudsHeight * 128.0F;
>         int k1 = MathHelper.floor(d4 / 2048.0D);
>         int l1 = MathHelper.floor(d5 / 2048.0D);
>         d4 = d4 - (double)(k1 * 2048);
>         d5 = d5 - (double)(l1 * 2048);
1599c2209
<         Vec3d vec3d = this.theWorld.getCloudColour(partialTicks);
---
>         Vec3d vec3d = this.theWorld.getCloudColour(f251);
1602a2213
>         this.cloudRenderer.prepareToRender(true, this.cloudTickCounter, partialTicks, vec3d);
1614,1616c2225,2227
<         float f25 = f3 * 0.9F;
<         float f26 = f4 * 0.9F;
<         float f27 = f5 * 0.9F;
---
>         float f26 = f3 * 0.9F;
>         float f27 = f4 * 0.9F;
>         float f28 = f5 * 0.9F;
1624,1629c2235,2240
<         float f16 = (float)MathHelper.floor(d1) * 0.00390625F;
<         float f17 = (float)MathHelper.floor(d2) * 0.00390625F;
<         float f18 = (float)(d1 - (double)MathHelper.floor(d1));
<         float f19 = (float)(d2 - (double)MathHelper.floor(d2));
<         int k = 8;
<         int l = 4;
---
>         float f16 = (float)MathHelper.floor(d4) * 0.00390625F;
>         float f17 = (float)MathHelper.floor(d5) * 0.00390625F;
>         float f18 = (float)(d4 - (double)MathHelper.floor(d4));
>         float f19 = (float)(d5 - (double)MathHelper.floor(d5));
>         int i2 = 8;
>         int j2 = 4;
1633c2244
<         for (int i1 = 0; i1 < 2; ++i1)
---
>         for (int k2 = 0; k2 < 2; ++k2)
1635c2246
<             if (i1 == 0)
---
>             if (k2 == 0)
1656c2267,2274
<             for (int j1 = -3; j1 <= 4; ++j1)
---
>             this.cloudRenderer.renderGlList();
>         }
> 
>         if (this.cloudRenderer.shouldUpdateGlList())
>         {
>             this.cloudRenderer.startUpdateGlList();
> 
>             for (int j3 = -3; j3 <= 4; ++j3)
1658c2276
<                 for (int k1 = -3; k1 <= 4; ++k1)
---
>                 for (int l2 = -3; l2 <= 4; ++l2)
1661,1662c2279,2280
<                     float f21 = (float)(j1 * 8);
<                     float f22 = (float)(k1 * 8);
---
>                     float f21 = (float)(j3 * 8);
>                     float f22 = (float)(l2 * 8);
1682c2300
<                     if (j1 > -1)
---
>                     if (j3 > -1)
1684c2302
<                         for (int l1 = 0; l1 < 8; ++l1)
---
>                         for (int i3 = 0; i3 < 8; ++i3)
1686,1689c2304,2307
<                             bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
---
>                             bufferbuilder.pos((double)(f23 + (float)i3 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)i3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + (float)i3 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)i3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + (float)i3 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)i3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + (float)i3 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)i3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
1693c2311
<                     if (j1 <= 1)
---
>                     if (j3 <= 1)
1695c2313
<                         for (int i2 = 0; i2 < 8; ++i2)
---
>                         for (int k3 = 0; k3 < 8; ++k3)
1697,1700c2315,2318
<                             bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
---
>                             bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
1704c2322
<                     if (k1 > -1)
---
>                     if (l2 > -1)
1706c2324
<                         for (int j2 = 0; j2 < 8; ++j2)
---
>                         for (int l3 = 0; l3 < 8; ++l3)
1708,1711c2326,2329
<                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)j2 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)j2 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)j2 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)j2 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
---
>                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
1715c2333
<                     if (k1 <= 1)
---
>                     if (l2 <= 1)
1717c2335
<                         for (int k2 = 0; k2 < 8; ++k2)
---
>                         for (int i4 = 0; i4 < 8; ++i4)
1719,1722c2337,2340
<                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
<                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
---
>                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
>                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
1728a2347,2348
> 
>             this.cloudRenderer.endUpdateGlList();
1737a2358
>         finishTimeNano = (long)((double)finishTimeNano + 1.0E8D);
1740c2361
<         if (!this.chunksToUpdate.isEmpty())
---
>         if (this.chunksToUpdateForced.size() > 0)
1742c2363
<             Iterator<RenderChunk> iterator = this.chunksToUpdate.iterator();
---
>             Iterator iterator = this.chunksToUpdateForced.iterator();
1746,1747c2367
<                 RenderChunk renderchunk = iterator.next();
<                 boolean flag;
---
>                 RenderChunk renderchunk1 = (RenderChunk)iterator.next();
1749c2369
<                 if (renderchunk.isNeedsUpdateCustom())
---
>                 if (!this.renderDispatcher.updateChunkLater(renderchunk1))
1751c2371,2411
<                     flag = this.renderDispatcher.updateChunkNow(renderchunk);
---
>                     break;
>                 }
> 
>                 renderchunk1.clearNeedsUpdate();
>                 iterator.remove();
>                 this.chunksToUpdate.remove(renderchunk1);
>                 this.chunksToResortTransparency.remove(renderchunk1);
>             }
>         }
> 
>         if (this.chunksToResortTransparency.size() > 0)
>         {
>             Iterator iterator2 = this.chunksToResortTransparency.iterator();
> 
>             if (iterator2.hasNext())
>             {
>                 RenderChunk renderchunk3 = (RenderChunk)iterator2.next();
> 
>                 if (this.renderDispatcher.updateTransparencyLater(renderchunk3))
>                 {
>                     iterator2.remove();
>                 }
>             }
>         }
> 
>         int l1 = 0;
>         int i2 = Config.getUpdatesPerFrame();
>         int k1 = i2 * 2;
> 
>         if (!this.chunksToUpdate.isEmpty())
>         {
>             Iterator<RenderChunk> iterator1 = this.chunksToUpdate.iterator();
> 
>             while (iterator1.hasNext())
>             {
>                 RenderChunk renderchunk2 = iterator1.next();
>                 boolean flag1;
> 
>                 if (renderchunk2.isNeedsUpdateCustom())
>                 {
>                     flag1 = this.renderDispatcher.updateChunkNow(renderchunk2);
1755c2415
<                     flag = this.renderDispatcher.updateChunkLater(renderchunk);
---
>                     flag1 = this.renderDispatcher.updateChunkLater(renderchunk2);
1758c2418
<                 if (!flag)
---
>                 if (!flag1)
1763,1765c2423,2424
<                 renderchunk.clearNeedsUpdate();
<                 iterator.remove();
<                 long i = finishTimeNano - System.nanoTime();
---
>                 renderchunk2.clearNeedsUpdate();
>                 iterator1.remove();
1767c2426,2433
<                 if (i < 0L)
---
>                 if (renderchunk2.getCompiledChunk().isEmpty() && i2 < k1)
>                 {
>                     ++i2;
>                 }
> 
>                 ++l1;
> 
>                 if (l1 >= i2)
1780c2446
<         double d0 = (double)(this.mc.gameSettings.renderDistanceChunks * 16);
---
>         double d3 = (double)(this.mc.gameSettings.renderDistanceChunks * 16);
1782c2448
<         if (entityIn.posX >= worldborder.maxX() - d0 || entityIn.posX <= worldborder.minX() + d0 || entityIn.posZ >= worldborder.maxZ() - d0 || entityIn.posZ <= worldborder.minZ() + d0)
---
>         if (entityIn.posX >= worldborder.maxX() - d3 || entityIn.posX <= worldborder.minX() + d3 || entityIn.posZ >= worldborder.maxZ() - d3 || entityIn.posZ <= worldborder.minZ() + d3)
1784,1788c2450,2454
<             double d1 = 1.0D - worldborder.getClosestDistance(entityIn) / d0;
<             d1 = Math.pow(d1, 4.0D);
<             double d2 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
<             double d3 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
<             double d4 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
---
>             double d4 = 1.0D - worldborder.getClosestDistance(entityIn) / d3;
>             d4 = Math.pow(d4, 4.0D);
>             double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
>             double d6 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
>             double d7 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
1794,1798c2460,2464
<             int i = worldborder.getStatus().getID();
<             float f = (float)(i >> 16 & 255) / 255.0F;
<             float f1 = (float)(i >> 8 & 255) / 255.0F;
<             float f2 = (float)(i & 255) / 255.0F;
<             GlStateManager.color(f, f1, f2, (float)d1);
---
>             int k1 = worldborder.getStatus().getID();
>             float f = (float)(k1 >> 16 & 255) / 255.0F;
>             float f1 = (float)(k1 >> 8 & 255) / 255.0F;
>             float f2 = (float)(k1 & 255) / 255.0F;
>             GlStateManager.color(f, f1, f2, (float)d4);
1809,1811c2475,2477
<             bufferbuilder.setTranslation(-d2, -d3, -d4);
<             double d5 = Math.max((double)MathHelper.floor(d4 - d0), worldborder.minZ());
<             double d6 = Math.min((double)MathHelper.ceil(d4 + d0), worldborder.maxZ());
---
>             bufferbuilder.setTranslation(-d5, -d6, -d7);
>             double d8 = Math.max((double)MathHelper.floor(d7 - d3), worldborder.minZ());
>             double d9 = Math.min((double)MathHelper.ceil(d7 + d3), worldborder.maxZ());
1813c2479
<             if (d2 > worldborder.maxX() - d0)
---
>             if (d5 > worldborder.maxX() - d3)
1817c2483
<                 for (double d7 = d5; d7 < d6; f7 += 0.5F)
---
>                 for (double d10 = d8; d10 < d9; f7 += 0.5F)
1819,1825c2485,2491
<                     double d8 = Math.min(1.0D, d6 - d7);
<                     float f8 = (float)d8 * 0.5F;
<                     bufferbuilder.pos(worldborder.maxX(), 256.0D, d7).tex((double)(f3 + f7), (double)(f3 + 0.0F)).endVertex();
<                     bufferbuilder.pos(worldborder.maxX(), 256.0D, d7 + d8).tex((double)(f3 + f8 + f7), (double)(f3 + 0.0F)).endVertex();
<                     bufferbuilder.pos(worldborder.maxX(), 0.0D, d7 + d8).tex((double)(f3 + f8 + f7), (double)(f3 + 128.0F)).endVertex();
<                     bufferbuilder.pos(worldborder.maxX(), 0.0D, d7).tex((double)(f3 + f7), (double)(f3 + 128.0F)).endVertex();
<                     ++d7;
---
>                     double d11 = Math.min(1.0D, d9 - d10);
>                     float f8 = (float)d11 * 0.5F;
>                     bufferbuilder.pos(worldborder.maxX(), 256.0D, d10).tex((double)(f3 + f7), (double)(f3 + 0.0F)).endVertex();
>                     bufferbuilder.pos(worldborder.maxX(), 256.0D, d10 + d11).tex((double)(f3 + f8 + f7), (double)(f3 + 0.0F)).endVertex();
>                     bufferbuilder.pos(worldborder.maxX(), 0.0D, d10 + d11).tex((double)(f3 + f8 + f7), (double)(f3 + 128.0F)).endVertex();
>                     bufferbuilder.pos(worldborder.maxX(), 0.0D, d10).tex((double)(f3 + f7), (double)(f3 + 128.0F)).endVertex();
>                     ++d10;
1829c2495
<             if (d2 < worldborder.minX() + d0)
---
>             if (d5 < worldborder.minX() + d3)
1833c2499
<                 for (double d9 = d5; d9 < d6; f9 += 0.5F)
---
>                 for (double d12 = d8; d12 < d9; f9 += 0.5F)
1835,1841c2501,2507
<                     double d12 = Math.min(1.0D, d6 - d9);
<                     float f12 = (float)d12 * 0.5F;
<                     bufferbuilder.pos(worldborder.minX(), 256.0D, d9).tex((double)(f3 + f9), (double)(f3 + 0.0F)).endVertex();
<                     bufferbuilder.pos(worldborder.minX(), 256.0D, d9 + d12).tex((double)(f3 + f12 + f9), (double)(f3 + 0.0F)).endVertex();
<                     bufferbuilder.pos(worldborder.minX(), 0.0D, d9 + d12).tex((double)(f3 + f12 + f9), (double)(f3 + 128.0F)).endVertex();
<                     bufferbuilder.pos(worldborder.minX(), 0.0D, d9).tex((double)(f3 + f9), (double)(f3 + 128.0F)).endVertex();
<                     ++d9;
---
>                     double d15 = Math.min(1.0D, d9 - d12);
>                     float f12 = (float)d15 * 0.5F;
>                     bufferbuilder.pos(worldborder.minX(), 256.0D, d12).tex((double)(f3 + f9), (double)(f3 + 0.0F)).endVertex();
>                     bufferbuilder.pos(worldborder.minX(), 256.0D, d12 + d15).tex((double)(f3 + f12 + f9), (double)(f3 + 0.0F)).endVertex();
>                     bufferbuilder.pos(worldborder.minX(), 0.0D, d12 + d15).tex((double)(f3 + f12 + f9), (double)(f3 + 128.0F)).endVertex();
>                     bufferbuilder.pos(worldborder.minX(), 0.0D, d12).tex((double)(f3 + f9), (double)(f3 + 128.0F)).endVertex();
>                     ++d12;
1845,1846c2511,2512
<             d5 = Math.max((double)MathHelper.floor(d2 - d0), worldborder.minX());
<             d6 = Math.min((double)MathHelper.ceil(d2 + d0), worldborder.maxX());
---
>             d8 = Math.max((double)MathHelper.floor(d5 - d3), worldborder.minX());
>             d9 = Math.min((double)MathHelper.ceil(d5 + d3), worldborder.maxX());
1848c2514
<             if (d4 > worldborder.maxZ() - d0)
---
>             if (d7 > worldborder.maxZ() - d3)
1852c2518
<                 for (double d10 = d5; d10 < d6; f10 += 0.5F)
---
>                 for (double d13 = d8; d13 < d9; f10 += 0.5F)
1854,1860c2520,2526
<                     double d13 = Math.min(1.0D, d6 - d10);
<                     float f13 = (float)d13 * 0.5F;
<                     bufferbuilder.pos(d10, 256.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 0.0F)).endVertex();
<                     bufferbuilder.pos(d10 + d13, 256.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 0.0F)).endVertex();
<                     bufferbuilder.pos(d10 + d13, 0.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 128.0F)).endVertex();
<                     bufferbuilder.pos(d10, 0.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 128.0F)).endVertex();
<                     ++d10;
---
>                     double d16 = Math.min(1.0D, d9 - d13);
>                     float f13 = (float)d16 * 0.5F;
>                     bufferbuilder.pos(d13, 256.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 0.0F)).endVertex();
>                     bufferbuilder.pos(d13 + d16, 256.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 0.0F)).endVertex();
>                     bufferbuilder.pos(d13 + d16, 0.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 128.0F)).endVertex();
>                     bufferbuilder.pos(d13, 0.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 128.0F)).endVertex();
>                     ++d13;
1864c2530
<             if (d4 < worldborder.minZ() + d0)
---
>             if (d7 < worldborder.minZ() + d3)
1868c2534
<                 for (double d11 = d5; d11 < d6; f11 += 0.5F)
---
>                 for (double d14 = d8; d14 < d9; f11 += 0.5F)
1870,1876c2536,2542
<                     double d14 = Math.min(1.0D, d6 - d11);
<                     float f14 = (float)d14 * 0.5F;
<                     bufferbuilder.pos(d11, 256.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 0.0F)).endVertex();
<                     bufferbuilder.pos(d11 + d14, 256.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 0.0F)).endVertex();
<                     bufferbuilder.pos(d11 + d14, 0.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 128.0F)).endVertex();
<                     bufferbuilder.pos(d11, 0.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 128.0F)).endVertex();
<                     ++d11;
---
>                     double d17 = Math.min(1.0D, d9 - d14);
>                     float f14 = (float)d17 * 0.5F;
>                     bufferbuilder.pos(d14, 256.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 0.0F)).endVertex();
>                     bufferbuilder.pos(d14 + d17, 256.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 0.0F)).endVertex();
>                     bufferbuilder.pos(d14 + d17, 0.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 128.0F)).endVertex();
>                     bufferbuilder.pos(d14, 0.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 128.0F)).endVertex();
>                     ++d14;
1886a2553
>             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
1902a2570,2574
> 
>         if (Config.isShaders())
>         {
>             ShadersRender.beginBlockDamage();
>         }
1912a2585,2589
> 
>         if (Config.isShaders())
>         {
>             ShadersRender.endBlockDamage();
>         }
1917,1919c2594,2596
<         double d0 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
<         double d1 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
<         double d2 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
---
>         double d3 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
>         double d4 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
>         double d5 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
1926c2603
<             worldRendererIn.setTranslation(-d0, -d1, -d2);
---
>             worldRendererIn.setTranslation(-d3, -d4, -d5);
1934,1936c2611,2613
<                 double d3 = (double)blockpos.getX() - d0;
<                 double d4 = (double)blockpos.getY() - d1;
<                 double d5 = (double)blockpos.getZ() - d2;
---
>                 double d6 = (double)blockpos.getX() - d3;
>                 double d7 = (double)blockpos.getY() - d4;
>                 double d8 = (double)blockpos.getZ() - d5;
1937a2615
>                 boolean flag1;
1939c2617
<                 if (!(block instanceof BlockChest) && !(block instanceof BlockEnderChest) && !(block instanceof BlockSign) && !(block instanceof BlockSkull))
---
>                 if (Reflector.ForgeTileEntity_canRenderBreaking.exists())
1941c2619,2640
<                     if (d3 * d3 + d4 * d4 + d5 * d5 > 1024.0D)
---
>                     boolean flag2 = block instanceof BlockChest || block instanceof BlockEnderChest || block instanceof BlockSign || block instanceof BlockSkull;
> 
>                     if (!flag2)
>                     {
>                         TileEntity tileentity = this.theWorld.getTileEntity(blockpos);
> 
>                         if (tileentity != null)
>                         {
>                             flag2 = Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_canRenderBreaking);
>                         }
>                     }
> 
>                     flag1 = !flag2;
>                 }
>                 else
>                 {
>                     flag1 = !(block instanceof BlockChest) && !(block instanceof BlockEnderChest) && !(block instanceof BlockSign) && !(block instanceof BlockSkull);
>                 }
> 
>                 if (flag1)
>                 {
>                     if (d6 * d6 + d7 * d7 + d8 * d8 > 1024.0D)
1951,1952c2650,2651
<                             int i = destroyblockprogress.getPartialBlockDamage();
<                             TextureAtlasSprite textureatlassprite = this.destroyBlockIcons[i];
---
>                             int k1 = destroyblockprogress.getPartialBlockDamage();
>                             TextureAtlasSprite textureatlassprite = this.destroyBlockIcons[k1];
1976a2676,2681
> 
>             if (Config.isShaders())
>             {
>                 Shaders.disableTexture2D();
>             }
> 
1983,1986c2688,2694
<                 double d0 = player.lastTickPosX + (player.posX - player.lastTickPosX) * (double)partialTicks;
<                 double d1 = player.lastTickPosY + (player.posY - player.lastTickPosY) * (double)partialTicks;
<                 double d2 = player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * (double)partialTicks;
<                 drawSelectionBoundingBox(iblockstate.getSelectedBoundingBox(this.theWorld, blockpos).expandXyz(0.0020000000949949026D).offset(-d0, -d1, -d2), 0.0F, 0.0F, 0.0F, 0.4F);
---
>                 double d3 = player.lastTickPosX + (player.posX - player.lastTickPosX) * (double)partialTicks;
>                 double d4 = player.lastTickPosY + (player.posY - player.lastTickPosY) * (double)partialTicks;
>                 double d5 = player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * (double)partialTicks;
>                 
>                 int hsv = ColorUtils.getChromaColor();
>                 float[] rgba = ColorUtils.intToRGBAF(hsv);
>                 drawSelectionBoundingBox(iblockstate.getSelectedBoundingBox(this.theWorld, blockpos).expandXyz(0.0020000000949949026D).offset(-d3, -d4, -d5), rgba[0], rgba[1], rgba[2], 0.4F);
1990a2699,2704
> 
>             if (Config.isShaders())
>             {
>                 Shaders.enableTexture2D();
>             }
> 
2011d2724
<         buffer.pos(minX, minY, minZ).color(red, green, blue, 0.0F).endVertex();
2021,2022c2734,2735
<         buffer.pos(minX, maxY, minZ).color(red, green, blue, alpha).endVertex();
<         buffer.pos(minX, maxY, maxZ).color(red, green, blue, 0.0F).endVertex();
---
>         buffer.pos(minX, maxY, minZ).color(red, green, blue, 0.0F).endVertex();
>         buffer.pos(minX, maxY, maxZ).color(red, green, blue, alpha).endVertex();
2024,2025c2737,2738
<         buffer.pos(maxX, maxY, maxZ).color(red, green, blue, 0.0F).endVertex();
<         buffer.pos(maxX, minY, maxZ).color(red, green, blue, alpha).endVertex();
---
>         buffer.pos(maxX, minY, maxZ).color(red, green, blue, 0.0F).endVertex();
>         buffer.pos(maxX, maxY, maxZ).color(red, green, blue, alpha).endVertex();
2028d2740
<         buffer.pos(maxX, minY, minZ).color(red, green, blue, 0.0F).endVertex();
2086,2089c2798,2801
<         int i = pos.getX();
<         int j = pos.getY();
<         int k = pos.getZ();
<         this.markBlocksForUpdate(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1, (flags & 8) != 0);
---
>         int k1 = pos.getX();
>         int l1 = pos.getY();
>         int i2 = pos.getZ();
>         this.markBlocksForUpdate(k1 - 1, l1 - 1, i2 - 1, k1 + 1, l1 + 1, i2 + 1, (flags & 8) != 0);
2124,2126c2836,2838
<             ISound positionedsoundrecord = PositionedSoundRecord.getRecordSoundRecord(soundIn, (float)pos.getX(), (float)pos.getY(), (float)pos.getZ());
<             this.mapSoundPositions.put(pos, positionedsoundrecord);
<             this.mc.getSoundHandler().playSound(positionedsoundrecord);
---
>             ISound isound1 = PositionedSoundRecord.getRecordSoundRecord(soundIn, (float)pos.getX(), (float)pos.getY(), (float)pos.getZ());
>             this.mapSoundPositions.put(pos, isound1);
>             this.mc.getSoundHandler().playSound(isound1);
2195,2198c2907,2910
<             int i = this.func_190572_a(p_190571_3_);
<             double d0 = entity.posX - p_190571_4_;
<             double d1 = entity.posY - p_190571_6_;
<             double d2 = entity.posZ - p_190571_8_;
---
>             int k1 = this.func_190572_a(p_190571_3_);
>             double d3 = entity.posX - p_190571_4_;
>             double d4 = entity.posY - p_190571_6_;
>             double d5 = entity.posZ - p_190571_8_;
2200c2912,2916
<             if (p_190571_2_)
---
>             if (p_190571_1_ == EnumParticleTypes.EXPLOSION_HUGE.getParticleID() && !Config.isAnimatedExplosion())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.EXPLOSION_LARGE.getParticleID() && !Config.isAnimatedExplosion())
2202c2918
<                 return this.mc.effectRenderer.spawnEffectParticle(p_190571_1_, p_190571_4_, p_190571_6_, p_190571_8_, p_190571_10_, p_190571_12_, p_190571_14_, p_190571_16_);
---
>                 return null;
2204c2920,2980
<             else if (d0 * d0 + d1 * d1 + d2 * d2 > 1024.0D)
---
>             else if (p_190571_1_ == EnumParticleTypes.EXPLOSION_NORMAL.getParticleID() && !Config.isAnimatedExplosion())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.SUSPENDED.getParticleID() && !Config.isWaterParticles())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.SUSPENDED_DEPTH.getParticleID() && !Config.isVoidParticles())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.SMOKE_NORMAL.getParticleID() && !Config.isAnimatedSmoke())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.SMOKE_LARGE.getParticleID() && !Config.isAnimatedSmoke())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.SPELL_MOB.getParticleID() && !Config.isPotionParticles())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.SPELL_MOB_AMBIENT.getParticleID() && !Config.isPotionParticles())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.SPELL.getParticleID() && !Config.isPotionParticles())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.SPELL_INSTANT.getParticleID() && !Config.isPotionParticles())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.SPELL_WITCH.getParticleID() && !Config.isPotionParticles())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.PORTAL.getParticleID() && !Config.isAnimatedPortal())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.FLAME.getParticleID() && !Config.isAnimatedFlame())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.REDSTONE.getParticleID() && !Config.isAnimatedRedstone())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.DRIP_WATER.getParticleID() && !Config.isDrippingWaterLava())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.DRIP_LAVA.getParticleID() && !Config.isDrippingWaterLava())
>             {
>                 return null;
>             }
>             else if (p_190571_1_ == EnumParticleTypes.FIREWORKS_SPARK.getParticleID() && !Config.isFireworkParticles())
2210c2986,3038
<                 return i > 1 ? null : this.mc.effectRenderer.spawnEffectParticle(p_190571_1_, p_190571_4_, p_190571_6_, p_190571_8_, p_190571_10_, p_190571_12_, p_190571_14_, p_190571_16_);
---
>                 if (!p_190571_2_)
>                 {
>                     double d6 = 1024.0D;
> 
>                     if (p_190571_1_ == EnumParticleTypes.CRIT.getParticleID())
>                     {
>                         d6 = 38416.0D;
>                     }
> 
>                     if (d3 * d3 + d4 * d4 + d5 * d5 > d6)
>                     {
>                         return null;
>                     }
> 
>                     if (k1 > 1)
>                     {
>                         return null;
>                     }
>                 }
> 
>                 Particle particle = this.mc.effectRenderer.spawnEffectParticle(p_190571_1_, p_190571_4_, p_190571_6_, p_190571_8_, p_190571_10_, p_190571_12_, p_190571_14_, p_190571_16_);
> 
>                 if (p_190571_1_ == EnumParticleTypes.WATER_BUBBLE.getParticleID())
>                 {
>                     CustomColors.updateWaterFX(particle, this.theWorld, p_190571_4_, p_190571_6_, p_190571_8_, this.renderEnv);
>                 }
> 
>                 if (p_190571_1_ == EnumParticleTypes.WATER_SPLASH.getParticleID())
>                 {
>                     CustomColors.updateWaterFX(particle, this.theWorld, p_190571_4_, p_190571_6_, p_190571_8_, this.renderEnv);
>                 }
> 
>                 if (p_190571_1_ == EnumParticleTypes.WATER_DROP.getParticleID())
>                 {
>                     CustomColors.updateWaterFX(particle, this.theWorld, p_190571_4_, p_190571_6_, p_190571_8_, this.renderEnv);
>                 }
> 
>                 if (p_190571_1_ == EnumParticleTypes.TOWN_AURA.getParticleID())
>                 {
>                     CustomColors.updateMyceliumFX(particle);
>                 }
> 
>                 if (p_190571_1_ == EnumParticleTypes.PORTAL.getParticleID())
>                 {
>                     CustomColors.updatePortalFX(particle);
>                 }
> 
>                 if (p_190571_1_ == EnumParticleTypes.REDSTONE.getParticleID())
>                 {
>                     CustomColors.updateReddustFX(particle, this.theWorld, p_190571_4_, p_190571_6_, p_190571_8_);
>                 }
> 
>                 return particle;
2221c3049
<         int i = this.mc.gameSettings.particleSetting;
---
>         int k1 = this.mc.gameSettings.particleSetting;
2223c3051
<         if (p_190572_1_ && i == 2 && this.theWorld.rand.nextInt(10) == 0)
---
>         if (p_190572_1_ && k1 == 2 && this.theWorld.rand.nextInt(10) == 0)
2225c3053
<             i = 1;
---
>             k1 = 1;
2228c3056
<         if (i == 1 && this.theWorld.rand.nextInt(3) == 0)
---
>         if (k1 == 1 && this.theWorld.rand.nextInt(3) == 0)
2230c3058
<             i = 2;
---
>             k1 = 2;
2233c3061
<         return i;
---
>         return k1;
2241a3070,3075
>         RandomMobs.entityLoaded(entityIn, this.theWorld);
> 
>         if (Config.isDynamicLights())
>         {
>             DynamicLights.entityAdded(entityIn, this);
>         }
2249a3084,3087
>         if (Config.isDynamicLights())
>         {
>             DynamicLights.entityRemoved(entityIn, this);
>         }
2270,2282c3108,3120
<                     double d0 = (double)pos.getX() - entity.posX;
<                     double d1 = (double)pos.getY() - entity.posY;
<                     double d2 = (double)pos.getZ() - entity.posZ;
<                     double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
<                     double d4 = entity.posX;
<                     double d5 = entity.posY;
<                     double d6 = entity.posZ;
< 
<                     if (d3 > 0.0D)
<                     {
<                         d4 += d0 / d3 * 2.0D;
<                         d5 += d1 / d3 * 2.0D;
<                         d6 += d2 / d3 * 2.0D;
---
>                     double d3 = (double)pos.getX() - entity.posX;
>                     double d4 = (double)pos.getY() - entity.posY;
>                     double d5 = (double)pos.getZ() - entity.posZ;
>                     double d6 = Math.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
>                     double d7 = entity.posX;
>                     double d8 = entity.posY;
>                     double d9 = entity.posZ;
> 
>                     if (d6 > 0.0D)
>                     {
>                         d7 += d3 / d6 * 2.0D;
>                         d8 += d4 / d6 * 2.0D;
>                         d9 += d5 / d6 * 2.0D;
2287c3125
<                         this.theWorld.playSound(d4, d5, d6, SoundEvents.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
---
>                         this.theWorld.playSound(d7, d8, d9, SoundEvents.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
2291c3129
<                         this.theWorld.playSound(d4, d5, d6, SoundEvents.field_193782_bq, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
---
>                         this.theWorld.playSound(d7, d8, d9, SoundEvents.field_193782_bq, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
2295c3133
<                         this.theWorld.playSound(d4, d5, d6, SoundEvents.ENTITY_ENDERDRAGON_DEATH, SoundCategory.HOSTILE, 5.0F, 1.0F, false);
---
>                         this.theWorld.playSound(d7, d8, d9, SoundEvents.ENTITY_ENDERDRAGON_DEATH, SoundCategory.HOSTILE, 5.0F, 1.0F, false);
2462,2477c3300,3315
<                 int l = data % 3 - 1;
<                 int i = data / 3 % 3 - 1;
<                 double d8 = (double)blockPosIn.getX() + (double)l * 0.6D + 0.5D;
<                 double d10 = (double)blockPosIn.getY() + 0.5D;
<                 double d12 = (double)blockPosIn.getZ() + (double)i * 0.6D + 0.5D;
< 
<                 for (int j1 = 0; j1 < 10; ++j1)
<                 {
<                     double d13 = random.nextDouble() * 0.2D + 0.01D;
<                     double d16 = d8 + (double)l * 0.01D + (random.nextDouble() - 0.5D) * (double)i * 0.5D;
<                     double d19 = d10 + (random.nextDouble() - 0.5D) * 0.5D;
<                     double d22 = d12 + (double)i * 0.01D + (random.nextDouble() - 0.5D) * (double)l * 0.5D;
<                     double d24 = (double)l * d13 + random.nextGaussian() * 0.01D;
<                     double d26 = -0.03D + random.nextGaussian() * 0.01D;
<                     double d27 = (double)i * d13 + random.nextGaussian() * 0.01D;
<                     this.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d16, d19, d22, d24, d26, d27);
---
>                 int k1 = data % 3 - 1;
>                 int l1 = data / 3 % 3 - 1;
>                 double d3 = (double)blockPosIn.getX() + (double)k1 * 0.6D + 0.5D;
>                 double d4 = (double)blockPosIn.getY() + 0.5D;
>                 double d5 = (double)blockPosIn.getZ() + (double)l1 * 0.6D + 0.5D;
> 
>                 for (int k2 = 0; k2 < 10; ++k2)
>                 {
>                     double d18 = random.nextDouble() * 0.2D + 0.01D;
>                     double d19 = d3 + (double)k1 * 0.01D + (random.nextDouble() - 0.5D) * (double)l1 * 0.5D;
>                     double d20 = d4 + (random.nextDouble() - 0.5D) * 0.5D;
>                     double d21 = d5 + (double)l1 * 0.01D + (random.nextDouble() - 0.5D) * (double)k1 * 0.5D;
>                     double d22 = (double)k1 * d18 + random.nextGaussian() * 0.01D;
>                     double d23 = -0.03D + random.nextGaussian() * 0.01D;
>                     double d24 = (double)l1 * d18 + random.nextGaussian() * 0.01D;
>                     this.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d19, d20, d21, d22, d23, d24);
2487a3326,3331
> 
>                     if (Reflector.ForgeBlock_getSoundType.exists())
>                     {
>                         soundtype = (SoundType)Reflector.call(block, Reflector.ForgeBlock_getSoundType, Block.getStateById(data), this.theWorld, blockPosIn, null);
>                     }
> 
2498c3342
<                 double d9 = (double)blockPosIn.getZ();
---
>                 double d8 = (double)blockPosIn.getZ();
2500c3344
<                 for (int i1 = 0; i1 < 8; ++i1)
---
>                 for (int i2 = 0; i2 < 8; ++i2)
2502c3346
<                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d6, d7, d9, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.SPLASH_POTION));
---
>                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d6, d7, d8, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.SPLASH_POTION));
2510c3354
<                 for (int l1 = 0; l1 < 100; ++l1)
---
>                 for (int l2 = 0; l2 < 100; ++l2)
2512,2517c3356,3361
<                     double d15 = random.nextDouble() * 4.0D;
<                     double d18 = random.nextDouble() * Math.PI * 2.0D;
<                     double d21 = Math.cos(d18) * d15;
<                     double d23 = 0.01D + random.nextDouble() * 0.5D;
<                     double d25 = Math.sin(d18) * d15;
<                     Particle particle1 = this.spawnEntityFX(enumparticletypes.getParticleID(), enumparticletypes.getShouldIgnoreRange(), d6 + d21 * 0.1D, d7 + 0.3D, d9 + d25 * 0.1D, d21, d23, d25);
---
>                     double d10 = random.nextDouble() * 4.0D;
>                     double d12 = random.nextDouble() * Math.PI * 2.0D;
>                     double d14 = Math.cos(d12) * d10;
>                     double d27 = 0.01D + random.nextDouble() * 0.5D;
>                     double d29 = Math.sin(d12) * d10;
>                     Particle particle1 = this.spawnEntityFX(enumparticletypes.getParticleID(), enumparticletypes.getShouldIgnoreRange(), d6 + d14 * 0.1D, d7 + 0.3D, d8 + d29 * 0.1D, d14, d27, d29);
2523c3367
<                         particle1.multiplyVelocity((float)d15);
---
>                         particle1.multiplyVelocity((float)d10);
2531,2533c3375,3377
<                 double d0 = (double)blockPosIn.getX() + 0.5D;
<                 double d1 = (double)blockPosIn.getY();
<                 double d2 = (double)blockPosIn.getZ() + 0.5D;
---
>                 double d9 = (double)blockPosIn.getX() + 0.5D;
>                 double d11 = (double)blockPosIn.getY();
>                 double d13 = (double)blockPosIn.getZ() + 0.5D;
2535c3379
<                 for (int j = 0; j < 8; ++j)
---
>                 for (int j3 = 0; j3 < 8; ++j3)
2537c3381
<                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d0, d1, d2, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.ENDER_EYE));
---
>                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d9, d11, d13, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.ENDER_EYE));
2540c3384
<                 for (double d11 = 0.0D; d11 < (Math.PI * 2D); d11 += 0.15707963267948966D)
---
>                 for (double d25 = 0.0D; d25 < (Math.PI * 2D); d25 += 0.15707963267948966D)
2542,2543c3386,3387
<                     this.spawnParticle(EnumParticleTypes.PORTAL, d0 + Math.cos(d11) * 5.0D, d1 - 0.4D, d2 + Math.sin(d11) * 5.0D, Math.cos(d11) * -5.0D, 0.0D, Math.sin(d11) * -5.0D);
<                     this.spawnParticle(EnumParticleTypes.PORTAL, d0 + Math.cos(d11) * 5.0D, d1 - 0.4D, d2 + Math.sin(d11) * 5.0D, Math.cos(d11) * -7.0D, 0.0D, Math.sin(d11) * -7.0D);
---
>                     this.spawnParticle(EnumParticleTypes.PORTAL, d9 + Math.cos(d25) * 5.0D, d11 - 0.4D, d13 + Math.sin(d25) * 5.0D, Math.cos(d25) * -5.0D, 0.0D, Math.sin(d25) * -5.0D);
>                     this.spawnParticle(EnumParticleTypes.PORTAL, d9 + Math.cos(d25) * 5.0D, d11 - 0.4D, d13 + Math.sin(d25) * 5.0D, Math.cos(d25) * -7.0D, 0.0D, Math.sin(d25) * -7.0D);
2549c3393
<                 for (int k1 = 0; k1 < 20; ++k1)
---
>                 for (int i3 = 0; i3 < 20; ++i3)
2551,2555c3395,3399
<                     double d14 = (double)blockPosIn.getX() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
<                     double d17 = (double)blockPosIn.getY() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
<                     double d20 = (double)blockPosIn.getZ() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
<                     this.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d14, d17, d20, 0.0D, 0.0D, 0.0D, new int[0]);
<                     this.theWorld.spawnParticle(EnumParticleTypes.FLAME, d14, d17, d20, 0.0D, 0.0D, 0.0D, new int[0]);
---
>                     double d26 = (double)blockPosIn.getX() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
>                     double d28 = (double)blockPosIn.getY() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
>                     double d30 = (double)blockPosIn.getZ() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
>                     this.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d26, d28, d30, 0.0D, 0.0D, 0.0D, new int[0]);
>                     this.theWorld.spawnParticle(EnumParticleTypes.FLAME, d26, d28, d30, 0.0D, 0.0D, 0.0D, new int[0]);
2565c3409
<                 for (int k = 0; k < 200; ++k)
---
>                 for (int j2 = 0; j2 < 200; ++j2)
2569,2572c3413,3416
<                     double d3 = (double)(MathHelper.cos(f3) * f2);
<                     double d4 = 0.01D + random.nextDouble() * 0.5D;
<                     double d5 = (double)(MathHelper.sin(f3) * f2);
<                     Particle particle = this.spawnEntityFX(EnumParticleTypes.DRAGON_BREATH.getParticleID(), false, (double)blockPosIn.getX() + d3 * 0.1D, (double)blockPosIn.getY() + 0.3D, (double)blockPosIn.getZ() + d5 * 0.1D, d3, d4, d5);
---
>                     double d15 = (double)(MathHelper.cos(f3) * f2);
>                     double d16 = 0.01D + random.nextDouble() * 0.5D;
>                     double d17 = (double)(MathHelper.sin(f3) * f2);
>                     Particle particle = this.spawnEntityFX(EnumParticleTypes.DRAGON_BREATH.getParticleID(), false, (double)blockPosIn.getX() + d15 * 0.1D, (double)blockPosIn.getY() + 0.3D, (double)blockPosIn.getZ() + d17 * 0.1D, d15, d16, d17);
2623a3468,3534
>     public void resetClouds()
>     {
>         this.cloudRenderer.reset();
>     }
> 
>     public int getCountRenderers()
>     {
>         return this.viewFrustum.renderChunks.length;
>     }
> 
>     public int getCountActiveRenderers()
>     {
>         return this.renderInfos.size();
>     }
> 
>     public int getCountEntitiesRendered()
>     {
>         return this.countEntitiesRendered;
>     }
> 
>     public int getCountTileEntitiesRendered()
>     {
>         return this.countTileEntitiesRendered;
>     }
> 
>     public int getCountLoadedChunks()
>     {
>         if (this.theWorld == null)
>         {
>             return 0;
>         }
>         else
>         {
>             IChunkProvider ichunkprovider = this.theWorld.getChunkProvider();
> 
>             if (ichunkprovider == null)
>             {
>                 return 0;
>             }
>             else
>             {
>                 if (ichunkprovider != this.worldChunkProvider)
>                 {
>                     this.worldChunkProvider = ichunkprovider;
>                     this.worldChunkProviderMap = (Long2ObjectMap)Reflector.getFieldValue(ichunkprovider, Reflector.ChunkProviderClient_chunkMapping);
>                 }
> 
>                 return this.worldChunkProviderMap == null ? 0 : this.worldChunkProviderMap.size();
>             }
>         }
>     }
> 
>     public int getCountChunksToUpdate()
>     {
>         return this.chunksToUpdate.size();
>     }
> 
>     public RenderChunk getRenderChunk(BlockPos p_getRenderChunk_1_)
>     {
>         return this.viewFrustum.getRenderChunk(p_getRenderChunk_1_);
>     }
> 
>     public WorldClient getWorld()
>     {
>         return this.theWorld;
>     }
> 
2633c3544,3562
<     class ContainerLocalRenderInformation
---
>     private RenderGlobal.ContainerLocalRenderInformation allocateRenderInformation(RenderChunk p_allocateRenderInformation_1_, EnumFacing p_allocateRenderInformation_2_, int p_allocateRenderInformation_3_)
>     {
>         RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1;
> 
>         if (renderInfoCache.isEmpty())
>         {
>             renderglobal$containerlocalrenderinformation1 = new RenderGlobal.ContainerLocalRenderInformation(p_allocateRenderInformation_1_, p_allocateRenderInformation_2_, p_allocateRenderInformation_3_);
>         }
>         else
>         {
>             renderglobal$containerlocalrenderinformation1 = renderInfoCache.pollLast();
>             renderglobal$containerlocalrenderinformation1.initialize(p_allocateRenderInformation_1_, p_allocateRenderInformation_2_, p_allocateRenderInformation_3_);
>         }
> 
>         renderglobal$containerlocalrenderinformation1.cacheable = true;
>         return renderglobal$containerlocalrenderinformation1;
>     }
> 
>     private void freeRenderInformation(RenderGlobal.ContainerLocalRenderInformation p_freeRenderInformation_1_)
2635,2644c3564,3581
<         final RenderChunk renderChunk;
<         final EnumFacing facing;
<         byte setFacing;
<         final int counter;
< 
<         private ContainerLocalRenderInformation(RenderChunk renderChunkIn, EnumFacing facingIn, @Nullable int counterIn)
<         {
<             this.renderChunk = renderChunkIn;
<             this.facing = facingIn;
<             this.counter = counterIn;
---
>         if (p_freeRenderInformation_1_.cacheable)
>         {
>             renderInfoCache.add(p_freeRenderInformation_1_);
>         }
>     }
> 
>     public static class ContainerLocalRenderInformation
>     {
>         RenderChunk renderChunk;
>         EnumFacing facing;
>         int setFacing;
>         boolean cacheable = false;
> 
>         public ContainerLocalRenderInformation(RenderChunk p_i1_1_, EnumFacing p_i1_2_, int p_i1_3_)
>         {
>             this.renderChunk = p_i1_1_;
>             this.facing = p_i1_2_;
>             this.setFacing = p_i1_3_;
2649c3586
<             this.setFacing = (byte)(this.setFacing | p_189561_1_ | 1 << p_189561_2_.ordinal());
---
>             this.setFacing = this.setFacing | p_189561_1_ | 1 << p_189561_2_.ordinal();
2655a3593,3599
> 
>         private void initialize(RenderChunk p_initialize_1_, EnumFacing p_initialize_2_, int p_initialize_3_)
>         {
>             this.renderChunk = p_initialize_1_;
>             this.facing = p_initialize_2_;
>             this.setFacing = p_initialize_3_;
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/RenderItem.java src\modified/src/minecraft/net/minecraft/client/renderer/RenderItem.java
2a3
> import java.awt.Color;
4a6,8
> 
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
51a56
> import net.minecraft.util.BlockRenderLayer;
57a63,69
> import optifine.Config;
> import optifine.CustomColors;
> import optifine.CustomItems;
> import optifine.Reflector;
> import optifine.ReflectorForge;
> import shadersmod.client.Shaders;
> import shadersmod.client.ShadersRender;
70a83,85
>     private ResourceLocation modelLocation = null;
>     private boolean renderItemGui = false;
>     public ModelManager modelManager = null;
75c90,100
<         this.itemModelMesher = new ItemModelMesher(p_i46552_2_);
---
>         this.modelManager = p_i46552_2_;
> 
>         if (Reflector.ItemModelMesherForge_Constructor.exists())
>         {
>             this.itemModelMesher = (ItemModelMesher)Reflector.newInstance(Reflector.ItemModelMesherForge_Constructor, p_i46552_2_);
>         }
>         else
>         {
>             this.itemModelMesher = new ItemModelMesher(p_i46552_2_);
>         }
> 
110c135
<     private void func_191965_a(IBakedModel p_191965_1_, int p_191965_2_)
---
>     public void func_191965_a(IBakedModel p_191965_1_, int p_191965_2_)
118a144,151
>         boolean flag = Minecraft.getMinecraft().getTextureMapBlocks().isTextureBound();
>         boolean flag1 = Config.isMultiTexture() && flag;
> 
>         if (flag1)
>         {
>             bufferbuilder.setBlockLayer(BlockRenderLayer.SOLID);
>         }
> 
121c154
<         for (EnumFacing enumfacing : EnumFacing.values())
---
>         for (EnumFacing enumfacing : EnumFacing.VALUES)
127a161,166
> 
>         if (flag1)
>         {
>             bufferbuilder.setBlockLayer((BlockRenderLayer)null);
>             GlStateManager.bindCurrentTexture();
>         }
144a184,189
>                 if (Config.isCustomItems())
>                 {
>                     model = CustomItems.getCustomItemModel(stack, model, this.modelLocation, false);
>                     this.modelLocation = null;
>                 }
> 
147c192
<                 if (stack.hasEffect())
---
>                 if (stack.hasEffect() && (!Config.isCustomItems() || !CustomItems.renderCustomEffect(this, stack, model)))
159,184c204,252
<         GlStateManager.depthMask(false);
<         GlStateManager.depthFunc(514);
<         GlStateManager.disableLighting();
<         GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_COLOR, GlStateManager.DestFactor.ONE);
<         this.textureManager.bindTexture(RES_ITEM_GLINT);
<         GlStateManager.matrixMode(5890);
<         GlStateManager.pushMatrix();
<         GlStateManager.scale(8.0F, 8.0F, 8.0F);
<         float f = (float)(Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
<         GlStateManager.translate(f, 0.0F, 0.0F);
<         GlStateManager.rotate(-50.0F, 0.0F, 0.0F, 1.0F);
<         this.func_191965_a(p_191966_1_, -8372020);
<         GlStateManager.popMatrix();
<         GlStateManager.pushMatrix();
<         GlStateManager.scale(8.0F, 8.0F, 8.0F);
<         float f1 = (float)(Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
<         GlStateManager.translate(-f1, 0.0F, 0.0F);
<         GlStateManager.rotate(10.0F, 0.0F, 0.0F, 1.0F);
<         this.func_191965_a(p_191966_1_, -8372020);
<         GlStateManager.popMatrix();
<         GlStateManager.matrixMode(5888);
<         GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
<         GlStateManager.enableLighting();
<         GlStateManager.depthFunc(515);
<         GlStateManager.depthMask(true);
<         this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
---
>         if (!Config.isCustomItems() || CustomItems.isUseGlint())
>         {
>             if (!Config.isShaders() || !Shaders.isShadowPass)
>             {
>                 GlStateManager.depthMask(false);
>                 GlStateManager.depthFunc(514);
>                 GlStateManager.disableLighting();
>                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_COLOR, GlStateManager.DestFactor.ONE);
>                 this.textureManager.bindTexture(RES_ITEM_GLINT);
> 
>                 if (Config.isShaders() && !this.renderItemGui)
>                 {
>                     ShadersRender.renderEnchantedGlintBegin();
>                 }
>                 
>                 int rgbColor = ColorUtils.getChromaColor();
>                 //when your just lazy so you apply a bandaid to fix the issue
>                 rgbColor = new Color(rgbColor).darker().darker().getRGB();
> 
>                 GlStateManager.matrixMode(5890);
>                 GlStateManager.pushMatrix();
>                 GlStateManager.scale(8.0F, 8.0F, 8.0F);
>                 float f = (float)(Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
>                 GlStateManager.translate(f, 0.0F, 0.0F);
>                 GlStateManager.rotate(-50.0F, 0.0F, 0.0F, 1.0F);
>                 //this.func_191965_a(p_191966_1_, -8372020);
>                 this.func_191965_a(p_191966_1_, rgbColor);
>                 GlStateManager.popMatrix();
>                 GlStateManager.pushMatrix();
>                 GlStateManager.scale(8.0F, 8.0F, 8.0F);
>                 float f1 = (float)(Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
>                 GlStateManager.translate(-f1, 0.0F, 0.0F);
>                 GlStateManager.rotate(10.0F, 0.0F, 0.0F, 1.0F);
>                 //this.func_191965_a(p_191966_1_, -8372020);
>                 this.func_191965_a(p_191966_1_, rgbColor);
>                 GlStateManager.popMatrix();
>                 GlStateManager.matrixMode(5888);
>                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
>                 GlStateManager.enableLighting();
>                 GlStateManager.depthFunc(515);
>                 GlStateManager.depthMask(true);
>                 this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
> 
>                 if (Config.isShaders() && !this.renderItemGui)
>                 {
>                     ShadersRender.renderEnchantedGlintEnd();
>                 }
>             }
>         }
195,196c263,281
<         p_191969_1_.addVertexData(p_191969_2_.getVertexData());
<         p_191969_1_.putColor4(p_191969_3_);
---
>         if (p_191969_1_.isMultiTexture())
>         {
>             p_191969_1_.addVertexData(p_191969_2_.getVertexDataSingle());
>             p_191969_1_.putSprite(p_191969_2_.getSprite());
>         }
>         else
>         {
>             p_191969_1_.addVertexData(p_191969_2_.getVertexData());
>         }
> 
>         if (Reflector.ForgeHooksClient_putQuadColor.exists())
>         {
>             Reflector.call(Reflector.ForgeHooksClient_putQuadColor, p_191969_1_, p_191969_2_, p_191969_3_);
>         }
>         else
>         {
>             p_191969_1_.putColor4(p_191969_3_);
>         }
> 
213a299,303
>                 if (Config.isCustomColors())
>                 {
>                     k = CustomColors.getColorFromItemStack(p_191970_4_, bakedquad.getTintIndex(), k);
>                 }
> 
246c336,355
<         if (item != null && item.hasCustomProperties())
---
>         if (Config.isCustomItems())
>         {
>             if (item != null && item.hasCustomProperties())
>             {
>                 this.modelLocation = ibakedmodel.getOverrides().applyOverride(stack, worldIn, entitylivingbaseIn);
>             }
> 
>             IBakedModel ibakedmodel1 = CustomItems.getCustomItemModel(stack, ibakedmodel, this.modelLocation, true);
> 
>             if (ibakedmodel1 != ibakedmodel)
>             {
>                 return ibakedmodel1;
>             }
>         }
> 
>         if (Reflector.ForgeItemOverrideList_handleItemState.exists())
>         {
>             return (IBakedModel)Reflector.call(ibakedmodel.getOverrides(), Reflector.ForgeItemOverrideList_handleItemState, ibakedmodel, stack, worldIn, entitylivingbaseIn);
>         }
>         else if (item != null && item.hasCustomProperties())
278,279d386
<             ItemCameraTransforms itemcameratransforms = bakedmodel.getItemCameraTransforms();
<             ItemCameraTransforms.applyTransformSide(itemcameratransforms.getTransform(transform), leftHanded);
281c388,392
<             if (this.isThereOneNegativeScale(itemcameratransforms.getTransform(transform)))
---
>             if (Reflector.ForgeHooksClient_handleCameraTransforms.exists())
>             {
>                 bakedmodel = (IBakedModel)Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, bakedmodel, transform, leftHanded);
>             }
>             else
283c394,400
<                 GlStateManager.cullFace(GlStateManager.CullFace.FRONT);
---
>                 ItemCameraTransforms itemcameratransforms = bakedmodel.getItemCameraTransforms();
>                 ItemCameraTransforms.applyTransformSide(itemcameratransforms.getTransform(transform), leftHanded);
> 
>                 if (this.isThereOneNegativeScale(itemcameratransforms.getTransform(transform)))
>                 {
>                     GlStateManager.cullFace(GlStateManager.CullFace.FRONT);
>                 }
285a403
>             CustomItems.setRenderOffHand(leftHanded);
286a405
>             CustomItems.setRenderOffHand(false);
310a430
>         this.renderItemGui = true;
321c441,450
<         p_191962_4_.getItemCameraTransforms().applyTransform(ItemCameraTransforms.TransformType.GUI);
---
> 
>         if (Reflector.ForgeHooksClient_handleCameraTransforms.exists())
>         {
>             p_191962_4_ = (IBakedModel)Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, p_191962_4_, ItemCameraTransforms.TransformType.GUI, false);
>         }
>         else
>         {
>             p_191962_4_.getItemCameraTransforms().applyTransform(ItemCameraTransforms.TransformType.GUI);
>         }
> 
328a458
>         this.renderItemGui = false;
422a553
>                 GlStateManager.enableBlend();
425c556
<             if (stack.isItemDamaged())
---
>             if (ReflectorForge.isItemDamaged(stack))
438a570,596
> 
>                 if (Reflector.ForgeItem_getDurabilityForDisplay.exists() && Reflector.ForgeItem_getRGBDurabilityForDisplay.exists())
>                 {
>                     double d0 = Reflector.callDouble(stack.getItem(), Reflector.ForgeItem_getDurabilityForDisplay, stack);
>                     int k = Reflector.callInt(stack.getItem(), Reflector.ForgeItem_getRGBDurabilityForDisplay, stack);
>                     i = Math.round(13.0F - (float)d0 * 13.0F);
>                     j = k;
>                 }
> 
>                 if (Config.isCustomColors())
>                 {
>                     j = CustomColors.getDurabilityColor(f2, j);
>                 }
> 
>                 if (Reflector.ForgeItem_getDurabilityForDisplay.exists() && Reflector.ForgeItem_getRGBDurabilityForDisplay.exists())
>                 {
>                     double d1 = Reflector.callDouble(stack.getItem(), Reflector.ForgeItem_getDurabilityForDisplay, stack);
>                     int l = Reflector.callInt(stack.getItem(), Reflector.ForgeItem_getRGBDurabilityForDisplay, stack);
>                     i = Math.round(13.0F - (float)d1 * 13.0F);
>                     j = l;
>                 }
> 
>                 if (Config.isCustomColors())
>                 {
>                     j = CustomColors.getDurabilityColor(f2, j);
>                 }
> 
1111a1270,1274
> 
>         if (Reflector.ModelLoader_onRegisterItems.exists())
>         {
>             Reflector.call(Reflector.ModelLoader_onRegisterItems, this.itemModelMesher);
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/RenderList.java src\modified/src/minecraft/net/minecraft/client/renderer/RenderList.java
5a6
> import optifine.Config;
12a14,18
>             if (this.renderChunks.size() == 0)
>             {
>                 return;
>             }
> 
21a28,32
>             if (Config.isMultiTexture())
>             {
>                 GlStateManager.bindCurrentTexture();
>             }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/texture/AbstractTexture.java src\modified/src/minecraft/net/minecraft/client/renderer/texture/AbstractTexture.java
3a4,5
> import shadersmod.client.MultiTexID;
> import shadersmod.client.ShadersTex;
11a14
>     public MultiTexID multiTex;
30a34
>         GlStateManager.bindTexture(this.getGlTextureId());
58a63,64
>         ShadersTex.deleteTextures(this, this.glTextureId);
> 
64a71,75
> 
>     public MultiTexID getMultiTexID()
>     {
>         return ShadersTex.getMultiTexID(this);
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/texture/DynamicTexture.java src\modified/src/minecraft/net/minecraft/client/renderer/texture/DynamicTexture.java
5a6,7
> import optifine.Config;
> import shadersmod.client.ShadersTex;
15a18
>     private boolean shadersInitialized;
25a29
>         this.shadersInitialized = false;
28,29c32,42
<         this.dynamicTextureData = new int[textureWidth * textureHeight];
<         TextureUtil.allocateTexture(this.getGlTextureId(), textureWidth, textureHeight);
---
>         this.dynamicTextureData = new int[textureWidth * textureHeight * 3];
> 
>         if (Config.isShaders())
>         {
>             ShadersTex.initDynamicTexture(this.getGlTextureId(), textureWidth, textureHeight, this);
>             this.shadersInitialized = true;
>         }
>         else
>         {
>             TextureUtil.allocateTexture(this.getGlTextureId(), textureWidth, textureHeight);
>         }
38c51,64
<         TextureUtil.uploadTexture(this.getGlTextureId(), this.dynamicTextureData, this.width, this.height);
---
>         if (Config.isShaders())
>         {
>             if (!this.shadersInitialized)
>             {
>                 ShadersTex.initDynamicTexture(this.getGlTextureId(), this.width, this.height, this);
>                 this.shadersInitialized = true;
>             }
> 
>             ShadersTex.updateDynamicTexture(this.getGlTextureId(), this.dynamicTextureData, this.width, this.height, this);
>         }
>         else
>         {
>             TextureUtil.uploadTexture(this.getGlTextureId(), this.dynamicTextureData, this.width, this.height);
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/texture/ITextureObject.java src\modified/src/minecraft/net/minecraft/client/renderer/texture/ITextureObject.java
4a5
> import shadersmod.client.MultiTexID;
14a16,17
> 
>     MultiTexID getMultiTexID();
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/texture/SimpleTexture.java src\modified/src/minecraft/net/minecraft/client/renderer/texture/SimpleTexture.java
9a10,11
> import optifine.Config;
> 
12a15
> import shadersmod.client.ShadersTex;
48c51
<                 catch (RuntimeException runtimeexception)
---
>                 catch (RuntimeException runtimeexception1)
50c53
<                     LOG.warn("Failed reading metadata of: {}", this.textureLocation, runtimeexception);
---
>                     LOG.warn("Failed reading metadata of: {}", this.textureLocation, runtimeexception1);
54c57,64
<             TextureUtil.uploadTextureImageAllocate(this.getGlTextureId(), bufferedimage, flag, flag1);
---
>             if (Config.isShaders())
>             {
>                 ShadersTex.loadSimpleTexture(this.getGlTextureId(), bufferedimage, flag, flag1, resourceManager, this.textureLocation, this.getMultiTexID());
>             }
>             else
>             {
>                 TextureUtil.uploadTextureImageAllocate(this.getGlTextureId(), bufferedimage, flag, flag1);
>             }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/texture/Stitcher.java src\modified/src/minecraft/net/minecraft/client/renderer/texture/Stitcher.java
9a10
> import optifine.MathUtils;
57c58
<         Arrays.sort((Object[])astitcher$holder);
---
>         Arrays.sort(astitcher$holder);
63c64
<                 String s = String.format("Unable to fit: %s - size: %dx%d - Maybe try a lowerresolution resourcepack?", stitcher$holder.getAtlasSprite().getIconName(), stitcher$holder.getAtlasSprite().getIconWidth(), stitcher$holder.getAtlasSprite().getIconHeight());
---
>                 String s = String.format("Unable to fit: %s, size: %dx%d, atlas: %dx%d, atlasMax: %dx%d - Maybe try a lower resolution resourcepack?", stitcher$holder.getAtlasSprite().getIconName(), stitcher$holder.getAtlasSprite().getIconWidth(), stitcher$holder.getAtlasSprite().getIconHeight(), this.currentWidth, this.currentHeight, this.maxWidth, this.maxHeight);
141,142c142,143
<         boolean flag1 = i1 <= this.maxWidth;
<         boolean flag2 = j1 <= this.maxHeight;
---
>         boolean flag = i1 <= this.maxWidth;
>         boolean flag1 = j1 <= this.maxHeight;
144c145
<         if (!flag1 && !flag2)
---
>         if (!flag && !flag1)
150,152c151,152
<             boolean flag3 = flag1 && k != i1;
<             boolean flag4 = flag2 && l != j1;
<             boolean flag;
---
>             int k1 = MathUtils.roundDownToPowerOfTwo(this.currentHeight);
>             boolean flag2 = flag && i1 <= 2 * k1;
154c154
<             if (flag3 ^ flag4)
---
>             if (this.currentWidth == 0 && this.currentHeight == 0)
156,160c156
<                 flag = flag3;
<             }
<             else
<             {
<                 flag = flag1 && k <= l;
---
>                 flag2 = true;
165c161
<             if (flag)
---
>             if (flag2)
247c243
<             return "Holder{width=" + this.width + ", height=" + this.height + '}';
---
>             return "Holder{width=" + this.width + ", height=" + this.height + ", name=" + this.theTexture.getIconName() + '}';
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/texture/TextureAtlasSprite.java src\modified/src/minecraft/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
2a3
> import com.google.common.collect.ImmutableList;
5a7,8
> import java.util.ArrayList;
> import java.util.Collection;
7a11
> import java.util.function.Function;
8a13
> import net.minecraft.client.resources.IResourceManager;
15a21,23
> import optifine.Config;
> import optifine.TextureUtils;
> import shadersmod.client.Shaders;
33a42,60
>     private int indexInMap = -1;
>     public float baseU;
>     public float baseV;
>     public int sheetWidth;
>     public int sheetHeight;
>     public int glSpriteTextureId = -1;
>     public TextureAtlasSprite spriteSingle = null;
>     public boolean isSpriteSingle = false;
>     public int mipmapLevels = 0;
>     public TextureAtlasSprite spriteNormal = null;
>     public TextureAtlasSprite spriteSpecular = null;
>     public boolean isShadersSprite = false;
>     public boolean isDependencyParent = false;
> 
>     private TextureAtlasSprite(TextureAtlasSprite p_i2_1_)
>     {
>         this.iconName = p_i2_1_.iconName;
>         this.isSpriteSingle = true;
>     }
37a65,69
> 
>         if (Config.isMultiTexture())
>         {
>             this.spriteSingle = new TextureAtlasSprite(this);
>         }
55a88,94
>         this.baseU = Math.min(this.minU, this.maxU);
>         this.baseV = Math.min(this.minV, this.maxV);
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.initSprite(this.width, this.height, 0, 0, false);
>         }
68a108,112
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.initSprite(this.width, this.height, 0, 0, false);
>         }
178,180c222
<         ++this.tickCounter;
< 
<         if (this.tickCounter >= this.animationMetadata.getFrameTimeSingle(this.frameCounter))
---
>         if (this.animationMetadata != null)
182,186c224
<             int i = this.animationMetadata.getFrameIndex(this.frameCounter);
<             int j = this.animationMetadata.getFrameCount() == 0 ? this.framesTextureData.size() : this.animationMetadata.getFrameCount();
<             this.frameCounter = (this.frameCounter + 1) % j;
<             this.tickCounter = 0;
<             int k = this.animationMetadata.getFrameIndex(this.frameCounter);
---
>             ++this.tickCounter;
188c226
<             if (i != k && k >= 0 && k < this.framesTextureData.size())
---
>             if (this.tickCounter >= this.animationMetadata.getFrameTimeSingle(this.frameCounter))
190c228,243
<                 TextureUtil.uploadTextureMipmap(this.framesTextureData.get(k), this.width, this.height, this.originX, this.originY, false, false);
---
>                 int i = this.animationMetadata.getFrameIndex(this.frameCounter);
>                 int j = this.animationMetadata.getFrameCount() == 0 ? this.framesTextureData.size() : this.animationMetadata.getFrameCount();
>                 this.frameCounter = (this.frameCounter + 1) % j;
>                 this.tickCounter = 0;
>                 int k = this.animationMetadata.getFrameIndex(this.frameCounter);
>                 boolean flag = false;
>                 boolean flag1 = this.isSpriteSingle;
> 
>                 if (i != k && k >= 0 && k < this.framesTextureData.size())
>                 {
>                     TextureUtil.uploadTextureMipmap(this.framesTextureData.get(k), this.width, this.height, this.originX, this.originY, flag, flag1);
>                 }
>             }
>             else if (this.animationMetadata.isInterpolate())
>             {
>                 this.updateAnimationInterpolated();
192,195d244
<         }
<         else if (this.animationMetadata.isInterpolate())
<         {
<             this.updateAnimationInterpolated();
258a308,312
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.setIconWidth(this.width);
>         }
263a318,322
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.setIconHeight(this.height);
>         }
279a339,344
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.width = this.width;
>             this.spriteSingle.height = this.height;
>         }
284a350,355
> 
>         if (this.width != bufferedimage.getWidth())
>         {
>             bufferedimage = TextureUtils.scaleImage(bufferedimage, this.width);
>         }
> 
300c371
<                 Iterator lvt_7_1_ = animationmetadatasection.getFrameIndexSet().iterator();
---
>                 Iterator iterator = animationmetadatasection.getFrameIndexSet().iterator();
302c373
<                 while (lvt_7_1_.hasNext())
---
>                 while (iterator.hasNext())
304c375
<                     int j = ((Integer)lvt_7_1_.next()).intValue();
---
>                     int j = ((Integer)iterator.next()).intValue();
321c392
<                 for (int k = 0; k < i; ++k)
---
>                 for (int l = 0; l < i; ++l)
323,324c394,395
<                     this.framesTextureData.add(getFrameTextureData(aint, this.width, this.width, k));
<                     list.add(new AnimationFrame(k, -1));
---
>                     this.framesTextureData.add(getFrameTextureData(aint, this.width, this.width, l));
>                     list.add(new AnimationFrame(l, -1));
329a401,428
> 
>         if (!this.isShadersSprite)
>         {
>             if (Config.isShaders())
>             {
>                 this.loadShadersSprites();
>             }
> 
>             for (int k = 0; k < this.framesTextureData.size(); ++k)
>             {
>                 int[][] aint2 = this.framesTextureData.get(k);
> 
>                 if (aint2 != null && !this.iconName.startsWith("minecraft:blocks/leaves_"))
>                 {
>                     for (int i1 = 0; i1 < aint2.length; ++i1)
>                     {
>                         int[] aint1 = aint2[i1];
>                         this.fixTransparentColor(aint1);
>                     }
>                 }
>             }
> 
>             if (this.spriteSingle != null)
>             {
>                 IResource iresource = Config.getResourceManager().getResource(resource.getResourceLocation());
>                 this.spriteSingle.loadSpriteFrames(iresource, mipmaplevels);
>             }
>         }
375a475,479
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.generateMipmaps(level);
>         }
386a491,495
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.allocateFrameTextureData(index);
>         }
409a519,523
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.clearFramesTextureData();
>         }
417c531
<     public void setFramesTextureData(List<int[][]> newFramesTextureData)
---
>     public void setFramesTextureData(List<int[][]> arrayList)
419c533,538
<         this.framesTextureData = newFramesTextureData;
---
>         this.framesTextureData = arrayList;
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.setFramesTextureData(arrayList);
>         }
427a547,551
> 
>         if (this.spriteSingle != null)
>         {
>             this.spriteSingle.resetSprite();
>         }
433a558,728
> 
>     public boolean hasCustomLoader(IResourceManager p_hasCustomLoader_1_, ResourceLocation p_hasCustomLoader_2_)
>     {
>         return false;
>     }
> 
>     public boolean load(IResourceManager p_load_1_, ResourceLocation p_load_2_, Function<ResourceLocation, TextureAtlasSprite> p_load_3_)
>     {
>         return true;
>     }
> 
>     public Collection<ResourceLocation> getDependencies()
>     {
>         return ImmutableList.<ResourceLocation>of();
>     }
> 
>     public int getIndexInMap()
>     {
>         return this.indexInMap;
>     }
> 
>     public void setIndexInMap(int p_setIndexInMap_1_)
>     {
>         this.indexInMap = p_setIndexInMap_1_;
>     }
> 
>     private void fixTransparentColor(int[] p_fixTransparentColor_1_)
>     {
>         if (p_fixTransparentColor_1_ != null)
>         {
>             long i = 0L;
>             long j = 0L;
>             long k = 0L;
>             long l = 0L;
> 
>             for (int i1 = 0; i1 < p_fixTransparentColor_1_.length; ++i1)
>             {
>                 int j1 = p_fixTransparentColor_1_[i1];
>                 int k1 = j1 >> 24 & 255;
> 
>                 if (k1 >= 16)
>                 {
>                     int l1 = j1 >> 16 & 255;
>                     int i2 = j1 >> 8 & 255;
>                     int j2 = j1 & 255;
>                     i += (long)l1;
>                     j += (long)i2;
>                     k += (long)j2;
>                     ++l;
>                 }
>             }
> 
>             if (l > 0L)
>             {
>                 int l2 = (int)(i / l);
>                 int i3 = (int)(j / l);
>                 int j3 = (int)(k / l);
>                 int k3 = l2 << 16 | i3 << 8 | j3;
> 
>                 for (int l3 = 0; l3 < p_fixTransparentColor_1_.length; ++l3)
>                 {
>                     int i4 = p_fixTransparentColor_1_[l3];
>                     int k2 = i4 >> 24 & 255;
> 
>                     if (k2 <= 16)
>                     {
>                         p_fixTransparentColor_1_[l3] = k3;
>                     }
>                 }
>             }
>         }
>     }
> 
>     public double getSpriteU16(float p_getSpriteU16_1_)
>     {
>         float f = this.maxU - this.minU;
>         return (double)((p_getSpriteU16_1_ - this.minU) / f * 16.0F);
>     }
> 
>     public double getSpriteV16(float p_getSpriteV16_1_)
>     {
>         float f = this.maxV - this.minV;
>         return (double)((p_getSpriteV16_1_ - this.minV) / f * 16.0F);
>     }
> 
>     public void bindSpriteTexture()
>     {
>         if (this.glSpriteTextureId < 0)
>         {
>             this.glSpriteTextureId = TextureUtil.glGenTextures();
>             TextureUtil.allocateTextureImpl(this.glSpriteTextureId, this.mipmapLevels, this.width, this.height);
>             TextureUtils.applyAnisotropicLevel();
>         }
> 
>         TextureUtils.bindTexture(this.glSpriteTextureId);
>     }
> 
>     public void deleteSpriteTexture()
>     {
>         if (this.glSpriteTextureId >= 0)
>         {
>             TextureUtil.deleteTexture(this.glSpriteTextureId);
>             this.glSpriteTextureId = -1;
>         }
>     }
> 
>     public float toSingleU(float p_toSingleU_1_)
>     {
>         p_toSingleU_1_ = p_toSingleU_1_ - this.baseU;
>         float f = (float)this.sheetWidth / (float)this.width;
>         p_toSingleU_1_ = p_toSingleU_1_ * f;
>         return p_toSingleU_1_;
>     }
> 
>     public float toSingleV(float p_toSingleV_1_)
>     {
>         p_toSingleV_1_ = p_toSingleV_1_ - this.baseV;
>         float f = (float)this.sheetHeight / (float)this.height;
>         p_toSingleV_1_ = p_toSingleV_1_ * f;
>         return p_toSingleV_1_;
>     }
> 
>     public List<int[][]> getFramesTextureData()
>     {
>         List<int[][]> list = new ArrayList<int[][]>();
>         list.addAll(this.framesTextureData);
>         return list;
>     }
> 
>     public AnimationMetadataSection getAnimationMetadata()
>     {
>         return this.animationMetadata;
>     }
> 
>     public void setAnimationMetadata(AnimationMetadataSection p_setAnimationMetadata_1_)
>     {
>         this.animationMetadata = p_setAnimationMetadata_1_;
>     }
> 
>     private void loadShadersSprites()
>     {
>         if (Shaders.configNormalMap)
>         {
>             String s = this.iconName + "_n";
>             ResourceLocation resourcelocation = new ResourceLocation(s);
>             resourcelocation = Config.getTextureMap().completeResourceLocation(resourcelocation);
> 
>             if (Config.hasResource(resourcelocation))
>             {
>                 this.spriteNormal = new TextureAtlasSprite(s);
>                 this.spriteNormal.isShadersSprite = true;
>                 this.spriteNormal.copyFrom(this);
>                 Config.getTextureMap().generateMipmaps(Config.getResourceManager(), this.spriteNormal);
>             }
>         }
> 
>         if (Shaders.configSpecularMap)
>         {
>             String s1 = this.iconName + "_s";
>             ResourceLocation resourcelocation1 = new ResourceLocation(s1);
>             resourcelocation1 = Config.getTextureMap().completeResourceLocation(resourcelocation1);
> 
>             if (Config.hasResource(resourcelocation1))
>             {
>                 this.spriteSpecular = new TextureAtlasSprite(s1);
>                 this.spriteSpecular.isShadersSprite = true;
>                 this.spriteSpecular.copyFrom(this);
>                 Config.getTextureMap().generateMipmaps(Config.getResourceManager(), this.spriteSpecular);
>             }
>         }
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/texture/TextureManager.java src\modified/src/minecraft/net/minecraft/client/renderer/texture/TextureManager.java
16a17,20
> import optifine.Config;
> import optifine.CustomGuis;
> import optifine.RandomMobs;
> 
18a23
> import shadersmod.client.ShadersTex;
35a41,50
>         if (Config.isRandomMobs())
>         {
>             resource = RandomMobs.getTextureLocation(resource);
>         }
> 
>         if (Config.isCustomGuis())
>         {
>             resource = CustomGuis.getTextureLocation(resource);
>         }
> 
44c59,66
<         TextureUtil.bindTexture(itextureobject.getGlTextureId());
---
>         if (Config.isShaders())
>         {
>             ShadersTex.bindTexture(itextureobject);
>         }
>         else
>         {
>             TextureUtil.bindTexture(itextureobject.getGlTextureId());
>         }
105a128,132
>         if (name.equals("logo"))
>         {
>             texture = Config.getMojangLogoTexture(texture);
>         }
> 
136a164
>             this.mapTextureObjects.remove(textureLocation);
143c171,173
<         Iterator<Entry<ResourceLocation, ITextureObject>> iterator = this.mapTextureObjects.entrySet().iterator();
---
>         Config.dbg("*** Reloading textures ***");
>         Config.log("Resource packs: " + Config.getResourcePackNames());
>         Iterator iterator = this.mapTextureObjects.keySet().iterator();
147,148c177,178
<             Entry<ResourceLocation, ITextureObject> entry = (Entry)iterator.next();
<             ITextureObject itextureobject = entry.getValue();
---
>             ResourceLocation resourcelocation = (ResourceLocation)iterator.next();
>             String s = resourcelocation.getResourcePath();
150c180
<             if (itextureobject == TextureUtil.MISSING_TEXTURE)
---
>             if (s.startsWith("mcpatcher/") || s.startsWith("optifine/"))
151a182,189
>                 ITextureObject itextureobject = this.mapTextureObjects.get(resourcelocation);
> 
>                 if (itextureobject instanceof AbstractTexture)
>                 {
>                     AbstractTexture abstracttexture = (AbstractTexture)itextureobject;
>                     abstracttexture.deleteGlTexture();
>                 }
> 
153a192,204
>         }
> 
>         Iterator<Entry<ResourceLocation, ITextureObject>> iterator1 = this.mapTextureObjects.entrySet().iterator();
> 
>         while (iterator1.hasNext())
>         {
>             Entry<ResourceLocation, ITextureObject> entry = (Entry)iterator1.next();
>             ITextureObject itextureobject1 = entry.getValue();
> 
>             if (itextureobject1 == TextureUtil.MISSING_TEXTURE)
>             {
>                 iterator1.remove();
>             }
156c207,221
<                 this.loadTexture(entry.getKey(), itextureobject);
---
>                 this.loadTexture(entry.getKey(), itextureobject1);
>             }
>         }
>     }
> 
>     public void reloadBannerTextures()
>     {
>         for (Entry<ResourceLocation, ITextureObject> entry : this.mapTextureObjects.entrySet())
>         {
>             ResourceLocation resourcelocation = entry.getKey();
>             ITextureObject itextureobject = entry.getValue();
> 
>             if (itextureobject instanceof LayeredColorMaskTexture)
>             {
>                 this.loadTexture(resourcelocation, itextureobject);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/texture/TextureMap.java src\modified/src/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
4a5,6
> import java.awt.Dimension;
> import java.awt.image.BufferedImage;
6a9,12
> import java.io.InputStream;
> import java.util.ArrayList;
> import java.util.HashMap;
> import java.util.Iterator;
8a15,16
> import java.util.Set;
> import java.util.TreeSet;
9a18
> import java.util.function.Function;
11c20
< import net.minecraft.client.Minecraft;
---
> import net.minecraft.client.renderer.GlStateManager;
20a30,38
> import optifine.BetterGrass;
> import optifine.Config;
> import optifine.ConnectedTextures;
> import optifine.CustomItems;
> import optifine.Reflector;
> import optifine.ReflectorForge;
> import optifine.SpriteDependencies;
> import optifine.TextureUtils;
> 
23a42
> import shadersmod.client.ShadersTex;
36a56,64
>     private TextureAtlasSprite[] iconGrid;
>     private int iconGridSize;
>     private int iconGridCountX;
>     private int iconGridCountY;
>     private double iconGridSizeU;
>     private double iconGridSizeV;
>     private int counterIndexInMap;
>     public int atlasWidth;
>     public int atlasHeight;
42a71,75
>     public TextureMap(String p_i3_1_, boolean p_i3_2_)
>     {
>         this(p_i3_1_, (ITextureMapPopulator)null, p_i3_2_);
>     }
> 
44a78,91
>         this(basePathIn, iconCreatorIn, false);
>     }
> 
>     public TextureMap(String p_i4_1_, ITextureMapPopulator p_i4_2_, boolean p_i4_3_)
>     {
>         this.iconGrid = null;
>         this.iconGridSize = -1;
>         this.iconGridCountX = -1;
>         this.iconGridCountY = -1;
>         this.iconGridSizeU = -1.0D;
>         this.iconGridSizeV = -1.0D;
>         this.counterIndexInMap = 0;
>         this.atlasWidth = 0;
>         this.atlasHeight = 0;
49,50c96,97
<         this.basePath = basePathIn;
<         this.iconCreator = iconCreatorIn;
---
>         this.basePath = p_i4_1_;
>         this.iconCreator = p_i4_2_;
55,57c102,105
<         int[] aint = TextureUtil.MISSING_TEXTURE_DATA;
<         this.missingImage.setIconWidth(16);
<         this.missingImage.setIconHeight(16);
---
>         int i = this.getMinSpriteSize();
>         int[] aint = this.getMissingImageData(i);
>         this.missingImage.setIconWidth(i);
>         this.missingImage.setIconHeight(i);
60c108,109
<         this.missingImage.setFramesTextureData(Lists.<int[][]>newArrayList(aint1));
---
>         this.missingImage.setFramesTextureData(Lists.newArrayList(new int[][][] {aint1}));
>         this.missingImage.setIndexInMap(this.counterIndexInMap++);
64a114,115
>         ShadersTex.resManager = resourceManager;
> 
73a125,126
>         this.counterIndexInMap = 0;
>         Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPre, this);
74a128,134
> 
>         if (this.mipmapLevels >= 4)
>         {
>             this.mipmapLevels = this.detectMaxMipmapLevel(this.mapRegisteredSprites, resourceManager);
>             Config.log("Mipmap levels: " + this.mipmapLevels);
>         }
> 
82,83c142,157
<         int i = Minecraft.getGLMaximumTextureSize();
<         Stitcher stitcher = new Stitcher(i, i, 0, this.mipmapLevels);
---
>         ShadersTex.resManager = resourceManager;
>         Config.dbg("Multitexture: " + Config.isMultiTexture());
> 
>         if (Config.isMultiTexture())
>         {
>             for (TextureAtlasSprite textureatlassprite : this.mapUploadedSprites.values())
>             {
>                 textureatlassprite.deleteSpriteTexture();
>             }
>         }
> 
>         ConnectedTextures.updateIcons(this);
>         CustomItems.updateIcons(this);
>         BetterGrass.updateIcons(this);
>         int k1 = TextureUtils.getGLMaximumTextureSize();
>         Stitcher stitcher = new Stitcher(k1, k1, 0, this.mipmapLevels);
86c160,162
<         int j = Integer.MAX_VALUE;
---
>         int i = Integer.MAX_VALUE;
>         int j = this.getMinSpriteSize();
>         this.iconGridSize = j;
87a164
>         List<TextureAtlasSprite> list = new ArrayList<TextureAtlasSprite>(this.mapRegisteredSprites.values());
89c166
<         for (Entry<String, TextureAtlasSprite> entry : this.mapRegisteredSprites.entrySet())
---
>         for (int l = 0; l < list.size(); ++l)
91,92c168,169
<             TextureAtlasSprite textureatlassprite = entry.getValue();
<             ResourceLocation resourcelocation = this.getResourceLocation(textureatlassprite);
---
>             TextureAtlasSprite textureatlassprite1 = SpriteDependencies.resolveDependencies(list, l, this);
>             ResourceLocation resourcelocation = this.getResourceLocation(textureatlassprite1);
95c172
<             try
---
>             if (textureatlassprite1.getIndexInMap() < 0)
97,100c174
<                 PngSizeInfo pngsizeinfo = PngSizeInfo.makeFromResource(resourceManager.getResource(resourcelocation));
<                 iresource = resourceManager.getResource(resourcelocation);
<                 boolean flag = iresource.getMetadata("animation") != null;
<                 textureatlassprite.loadSprite(pngsizeinfo, flag);
---
>                 textureatlassprite1.setIndexInMap(this.counterIndexInMap++);
102c176,177
<             catch (RuntimeException runtimeexception)
---
> 
>             if (textureatlassprite1.hasCustomLoader(resourceManager, resourcelocation))
104,107c179
<                 LOGGER.error("Unable to parse metadata from {}", resourcelocation, runtimeexception);
<                 continue;
<             }
<             catch (IOException ioexception)
---
>                 if (textureatlassprite1.load(resourceManager, resourcelocation, (p_lambda$loadTextureAtlas$0_1_) ->
109,110c181,187
<                 LOGGER.error("Using missing texture, unable to load {}", resourcelocation, ioexception);
<                 continue;
---
>                 return this.mapRegisteredSprites.get(p_lambda$loadTextureAtlas$0_1_.toString());
>                 }))
>                 {
>                     Config.dbg("Custom loader (skipped): " + textureatlassprite1);
>                     continue;
>                 }
>                 Config.dbg("Custom loader: " + textureatlassprite1);
112c189
<             finally
---
>             else
114c191,222
<                 IOUtils.closeQuietly((Closeable)iresource);
---
>                 try
>                 {
>                     PngSizeInfo pngsizeinfo = PngSizeInfo.makeFromResource(resourceManager.getResource(resourcelocation));
> 
>                     if (Config.isShaders())
>                     {
>                         iresource = ShadersTex.loadResource(resourceManager, resourcelocation);
>                     }
>                     else
>                     {
>                         iresource = resourceManager.getResource(resourcelocation);
>                     }
> 
>                     boolean flag = iresource.getMetadata("animation") != null;
>                     textureatlassprite1.loadSprite(pngsizeinfo, flag);
>                 }
>                 catch (RuntimeException runtimeexception)
>                 {
>                     LOGGER.error("Unable to parse metadata from {}", resourcelocation, runtimeexception);
>                     ReflectorForge.FMLClientHandler_trackBrokenTexture(resourcelocation, runtimeexception.getMessage());
>                     continue;
>                 }
>                 catch (IOException ioexception)
>                 {
>                     LOGGER.error("Using missing texture, unable to load " + resourcelocation + ", " + ioexception.getClass().getName());
>                     ReflectorForge.FMLClientHandler_trackMissingTexture(resourcelocation);
>                     continue;
>                 }
>                 finally
>                 {
>                     IOUtils.closeQuietly((Closeable)iresource);
>                 }
117,118c225,226
<             j = Math.min(j, Math.min(textureatlassprite.getIconWidth(), textureatlassprite.getIconHeight()));
<             int j1 = Math.min(Integer.lowestOneBit(textureatlassprite.getIconWidth()), Integer.lowestOneBit(textureatlassprite.getIconHeight()));
---
>             int k2 = textureatlassprite1.getIconWidth();
>             int i3 = textureatlassprite1.getIconHeight();
120c228
<             if (j1 < k)
---
>             if (k2 >= 1 && i3 >= 1)
122,124c230,232
<                 LOGGER.warn("Texture {} with size {}x{} limits mip level from {} to {}", resourcelocation, Integer.valueOf(textureatlassprite.getIconWidth()), Integer.valueOf(textureatlassprite.getIconHeight()), Integer.valueOf(MathHelper.log2(k)), Integer.valueOf(MathHelper.log2(j1)));
<                 k = j1;
<             }
---
>                 if (k2 < j || this.mipmapLevels > 0)
>                 {
>                     int i1 = this.mipmapLevels > 0 ? TextureUtils.scaleToPowerOfTwo(k2, j) : TextureUtils.scaleMinTo(k2, j);
126c234,268
<             stitcher.addSprite(textureatlassprite);
---
>                     if (i1 != k2)
>                     {
>                         if (!TextureUtils.isPowerOfTwo(k2))
>                         {
>                             Config.log("Scaled non power of 2: " + textureatlassprite1.getIconName() + ", " + k2 + " -> " + i1);
>                         }
>                         else
>                         {
>                             Config.log("Scaled too small texture: " + textureatlassprite1.getIconName() + ", " + k2 + " -> " + i1);
>                         }
> 
>                         int j1 = i3 * i1 / k2;
>                         textureatlassprite1.setIconWidth(i1);
>                         textureatlassprite1.setIconHeight(j1);
>                     }
>                 }
> 
>                 i = Math.min(i, Math.min(textureatlassprite1.getIconWidth(), textureatlassprite1.getIconHeight()));
>                 int j3 = Math.min(Integer.lowestOneBit(textureatlassprite1.getIconWidth()), Integer.lowestOneBit(textureatlassprite1.getIconHeight()));
> 
>                 if (j3 < k)
>                 {
>                     LOGGER.warn("Texture {} with size {}x{} limits mip level from {} to {}", resourcelocation, Integer.valueOf(textureatlassprite1.getIconWidth()), Integer.valueOf(textureatlassprite1.getIconHeight()), Integer.valueOf(MathHelper.log2(k)), Integer.valueOf(MathHelper.log2(j3)));
>                     k = j3;
>                 }
> 
>                 if (this.generateMipmaps(resourceManager, textureatlassprite1))
>                 {
>                     stitcher.addSprite(textureatlassprite1);
>                 }
>             }
>             else
>             {
>                 Config.warn("Invalid sprite size: " + textureatlassprite1);
>             }
129,130c271,277
<         int l = Math.min(j, k);
<         int i1 = MathHelper.log2(l);
---
>         int l1 = Math.min(i, k);
>         int i2 = MathHelper.log2(l1);
> 
>         if (i2 < 0)
>         {
>             i2 = 0;
>         }
132c279
<         if (i1 < this.mipmapLevels)
---
>         if (i2 < this.mipmapLevels)
134,135c281,282
<             LOGGER.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", this.basePath, Integer.valueOf(this.mipmapLevels), Integer.valueOf(i1), Integer.valueOf(l));
<             this.mipmapLevels = i1;
---
>             LOGGER.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", this.basePath, Integer.valueOf(this.mipmapLevels), Integer.valueOf(i2), Integer.valueOf(l1));
>             this.mipmapLevels = i2;
151c298,307
<         TextureUtil.allocateTextureImpl(this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
---
> 
>         if (Config.isShaders())
>         {
>             ShadersTex.allocateTextureMap(this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight(), stitcher, this);
>         }
>         else
>         {
>             TextureUtil.allocateTextureImpl(this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
>         }
> 
154c310
<         for (TextureAtlasSprite textureatlassprite1 : stitcher.getStichSlots())
---
>         for (TextureAtlasSprite textureatlassprite2 : stitcher.getStichSlots())
156c312
<             if (textureatlassprite1 == this.missingImage || this.generateMipmaps(resourceManager, textureatlassprite1))
---
>             if (Config.isShaders())
158,160c314,315
<                 String s = textureatlassprite1.getIconName();
<                 map.remove(s);
<                 this.mapUploadedSprites.put(s, textureatlassprite1);
---
>                 ShadersTex.setIconName(ShadersTex.setSprite(textureatlassprite2).getIconName());
>             }
162c317,323
<                 try
---
>             String s = textureatlassprite2.getIconName();
>             map.remove(s);
>             this.mapUploadedSprites.put(s, textureatlassprite2);
> 
>             try
>             {
>                 if (Config.isShaders())
164c325
<                     TextureUtil.uploadTextureMipmap(textureatlassprite1.getFrameTextureData(0), textureatlassprite1.getIconWidth(), textureatlassprite1.getIconHeight(), textureatlassprite1.getOriginX(), textureatlassprite1.getOriginY(), false, false);
---
>                     ShadersTex.uploadTexSubForLoadAtlas(textureatlassprite2.getFrameTextureData(0), textureatlassprite2.getIconWidth(), textureatlassprite2.getIconHeight(), textureatlassprite2.getOriginX(), textureatlassprite2.getOriginY(), false, false);
166c327
<                 catch (Throwable throwable)
---
>                 else
168,172c329
<                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Stitching texture atlas");
<                     CrashReportCategory crashreportcategory = crashreport.makeCategory("Texture being stitched together");
<                     crashreportcategory.addCrashSection("Atlas path", this.basePath);
<                     crashreportcategory.addCrashSection("Sprite", textureatlassprite1);
<                     throw new ReportedException(crashreport);
---
>                     TextureUtil.uploadTextureMipmap(textureatlassprite2.getFrameTextureData(0), textureatlassprite2.getIconWidth(), textureatlassprite2.getIconHeight(), textureatlassprite2.getOriginX(), textureatlassprite2.getOriginY(), false, false);
173a331,345
>             }
>             catch (Throwable throwable)
>             {
>                 CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Stitching texture atlas");
>                 CrashReportCategory crashreportcategory = crashreport.makeCategory("Texture being stitched together");
>                 crashreportcategory.addCrashSection("Atlas path", this.basePath);
>                 crashreportcategory.addCrashSection("Sprite", textureatlassprite2);
>                 throw new ReportedException(crashreport);
>             }
> 
>             if (textureatlassprite2.hasAnimationMetadata())
>             {
>                 this.listAnimatedSprites.add(textureatlassprite2);
>             }
>         }
175c347,364
<                 if (textureatlassprite1.hasAnimationMetadata())
---
>         for (TextureAtlasSprite textureatlassprite3 : map.values())
>         {
>             textureatlassprite3.copyFrom(this.missingImage);
>         }
> 
>         if (Config.isMultiTexture())
>         {
>             int j2 = stitcher.getCurrentWidth();
>             int l2 = stitcher.getCurrentHeight();
> 
>             for (TextureAtlasSprite textureatlassprite4 : stitcher.getStichSlots())
>             {
>                 textureatlassprite4.sheetWidth = j2;
>                 textureatlassprite4.sheetHeight = l2;
>                 textureatlassprite4.mipmapLevels = this.mipmapLevels;
>                 TextureAtlasSprite textureatlassprite5 = textureatlassprite4.spriteSingle;
> 
>                 if (textureatlassprite5 != null)
177c366,392
<                     this.listAnimatedSprites.add(textureatlassprite1);
---
>                     if (textureatlassprite5.getIconWidth() <= 0)
>                     {
>                         textureatlassprite5.setIconWidth(textureatlassprite4.getIconWidth());
>                         textureatlassprite5.setIconHeight(textureatlassprite4.getIconHeight());
>                         textureatlassprite5.initSprite(textureatlassprite4.getIconWidth(), textureatlassprite4.getIconHeight(), 0, 0, false);
>                         textureatlassprite5.clearFramesTextureData();
>                         List<int[][]> list1 = textureatlassprite4.getFramesTextureData();
>                         textureatlassprite5.setFramesTextureData(list1);
>                         textureatlassprite5.setAnimationMetadata(textureatlassprite4.getAnimationMetadata());
>                     }
> 
>                     textureatlassprite5.sheetWidth = j2;
>                     textureatlassprite5.sheetHeight = l2;
>                     textureatlassprite5.mipmapLevels = this.mipmapLevels;
>                     textureatlassprite4.bindSpriteTexture();
>                     boolean flag2 = false;
>                     boolean flag1 = true;
> 
>                     try
>                     {
>                         TextureUtil.uploadTextureMipmap(textureatlassprite5.getFrameTextureData(0), textureatlassprite5.getIconWidth(), textureatlassprite5.getIconHeight(), textureatlassprite5.getOriginX(), textureatlassprite5.getOriginY(), flag2, flag1);
>                     }
>                     catch (Exception exception)
>                     {
>                         Config.dbg("Error uploading sprite single: " + textureatlassprite5 + ", parent: " + textureatlassprite4);
>                         exception.printStackTrace();
>                     }
179a395,396
> 
>             Config.getMinecraft().getTextureManager().bindTexture(LOCATION_BLOCKS_TEXTURE);
182c399,402
<         for (TextureAtlasSprite textureatlassprite2 : map.values())
---
>         Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPost, this);
>         this.updateIconGrid(stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
> 
>         if (Config.equals(System.getProperty("saveTextureMap"), "true"))
184c404,405
<             textureatlassprite2.copyFrom(this.missingImage);
---
>             Config.dbg("Exporting texture map: " + this.basePath);
>             TextureUtils.saveGlTexture("debug/" + this.basePath.replaceAll("/", "_"), this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
188c409
<     private boolean generateMipmaps(IResourceManager resourceManager, final TextureAtlasSprite texture)
---
>     public boolean generateMipmaps(IResourceManager resourceManager, final TextureAtlasSprite texture)
190,194c411,412
<         ResourceLocation resourcelocation = this.getResourceLocation(texture);
<         IResource iresource = null;
<         label62:
<         {
<             boolean flag;
---
>         ResourceLocation resourcelocation1 = this.getResourceLocation(texture);
>         IResource iresource1 = null;
196,213c414,420
<             try
<             {
<                 iresource = resourceManager.getResource(resourcelocation);
<                 texture.loadSpriteFrames(iresource, this.mipmapLevels + 1);
<                 break label62;
<             }
<             catch (RuntimeException runtimeexception)
<             {
<                 LOGGER.error("Unable to parse metadata from {}", resourcelocation, runtimeexception);
<                 flag = false;
<             }
<             catch (IOException ioexception)
<             {
<                 LOGGER.error("Using missing texture, unable to load {}", resourcelocation, ioexception);
<                 flag = false;
<                 return flag;
<             }
<             finally
---
>         if (texture.hasCustomLoader(resourceManager, resourcelocation1))
>         {
>             TextureUtils.generateCustomMipmaps(texture, this.mipmapLevels);
>         }
>         else
>         {
>             label60:
215,216c422
<                 IOUtils.closeQuietly((Closeable)iresource);
<             }
---
>                 boolean flag4;
218c424,448
<             return flag;
---
>                 try
>                 {
>                     iresource1 = resourceManager.getResource(resourcelocation1);
>                     texture.loadSpriteFrames(iresource1, this.mipmapLevels + 1);
>                     break label60;
>                 }
>                 catch (RuntimeException runtimeexception1)
>                 {
>                     LOGGER.error("Unable to parse metadata from {}", resourcelocation1, runtimeexception1);
>                     flag4 = false;
>                 }
>                 catch (IOException ioexception1)
>                 {
>                     LOGGER.error("Using missing texture, unable to load {}", resourcelocation1, ioexception1);
>                     flag4 = false;
>                     boolean crashreportcategory = flag4;
>                     return crashreportcategory;
>                 }
>                 finally
>                 {
>                     IOUtils.closeQuietly((Closeable)iresource1);
>                 }
> 
>                 return flag4;
>             }
226c456
<         catch (Throwable throwable)
---
>         catch (Throwable throwable1)
228,230c458,460
<             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Applying mipmap");
<             CrashReportCategory crashreportcategory = crashreport.makeCategory("Sprite being mipmapped");
<             crashreportcategory.setDetail("Sprite name", new ICrashReportDetail<String>()
---
>             CrashReport crashreport1 = CrashReport.makeCrashReport(throwable1, "Applying mipmap");
>             CrashReportCategory crashreportcategory1 = crashreport1.makeCategory("Sprite being mipmapped");
>             crashreportcategory1.setDetail("Sprite name", new ICrashReportDetail<String>()
237c467
<             crashreportcategory.setDetail("Sprite size", new ICrashReportDetail<String>()
---
>             crashreportcategory1.setDetail("Sprite size", new ICrashReportDetail<String>()
244c474
<             crashreportcategory.setDetail("Sprite frames", new ICrashReportDetail<String>()
---
>             crashreportcategory1.setDetail("Sprite frames", new ICrashReportDetail<String>()
251,252c481,482
<             crashreportcategory.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
<             throw new ReportedException(crashreport);
---
>             crashreportcategory1.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
>             throw new ReportedException(crashreport1);
256c486
<     private ResourceLocation getResourceLocation(TextureAtlasSprite p_184396_1_)
---
>     public ResourceLocation getResourceLocation(TextureAtlasSprite p_184396_1_)
258,259c488,494
<         ResourceLocation resourcelocation = new ResourceLocation(p_184396_1_.getIconName());
<         return new ResourceLocation(resourcelocation.getResourceDomain(), String.format("%s/%s%s", this.basePath, resourcelocation.getResourcePath(), ".png"));
---
>         ResourceLocation resourcelocation1 = new ResourceLocation(p_184396_1_.getIconName());
>         return this.completeResourceLocation(resourcelocation1);
>     }
> 
>     public ResourceLocation completeResourceLocation(ResourceLocation p_completeResourceLocation_1_)
>     {
>         return this.isAbsoluteLocation(p_completeResourceLocation_1_) ? new ResourceLocation(p_completeResourceLocation_1_.getResourceDomain(), p_completeResourceLocation_1_.getResourcePath() + ".png") : new ResourceLocation(p_completeResourceLocation_1_.getResourceDomain(), String.format("%s/%s%s", this.basePath, p_completeResourceLocation_1_.getResourcePath(), ".png"));
264c499
<         TextureAtlasSprite textureatlassprite = this.mapUploadedSprites.get(iconName);
---
>         TextureAtlasSprite textureatlassprite6 = this.mapUploadedSprites.get(iconName);
266c501
<         if (textureatlassprite == null)
---
>         if (textureatlassprite6 == null)
268c503
<             textureatlassprite = this.missingImage;
---
>             textureatlassprite6 = this.missingImage;
271c506
<         return textureatlassprite;
---
>         return textureatlassprite6;
275a511,517
>         if (Config.isShaders())
>         {
>             ShadersTex.updatingTex = this.getMultiTexID();
>         }
> 
>         boolean flag3 = false;
>         boolean flag4 = false;
278c520,606
<         for (TextureAtlasSprite textureatlassprite : this.listAnimatedSprites)
---
>         for (TextureAtlasSprite textureatlassprite6 : this.listAnimatedSprites)
>         {
>             if (this.isTerrainAnimationActive(textureatlassprite6))
>             {
>                 textureatlassprite6.updateAnimation();
> 
>                 if (textureatlassprite6.spriteNormal != null)
>                 {
>                     flag3 = true;
>                 }
> 
>                 if (textureatlassprite6.spriteSpecular != null)
>                 {
>                     flag4 = true;
>                 }
>             }
>         }
> 
>         if (Config.isMultiTexture())
>         {
>             for (TextureAtlasSprite textureatlassprite8 : this.listAnimatedSprites)
>             {
>                 if (this.isTerrainAnimationActive(textureatlassprite8))
>                 {
>                     TextureAtlasSprite textureatlassprite7 = textureatlassprite8.spriteSingle;
> 
>                     if (textureatlassprite7 != null)
>                     {
>                         if (textureatlassprite8 == TextureUtils.iconClock || textureatlassprite8 == TextureUtils.iconCompass)
>                         {
>                             textureatlassprite7.frameCounter = textureatlassprite8.frameCounter;
>                         }
> 
>                         textureatlassprite8.bindSpriteTexture();
>                         textureatlassprite7.updateAnimation();
>                     }
>                 }
>             }
> 
>             TextureUtil.bindTexture(this.getGlTextureId());
>         }
> 
>         if (Config.isShaders())
>         {
>             if (flag3)
>             {
>                 TextureUtil.bindTexture(this.getMultiTexID().norm);
> 
>                 for (TextureAtlasSprite textureatlassprite9 : this.listAnimatedSprites)
>                 {
>                     if (textureatlassprite9.spriteNormal != null && this.isTerrainAnimationActive(textureatlassprite9))
>                     {
>                         if (textureatlassprite9 == TextureUtils.iconClock || textureatlassprite9 == TextureUtils.iconCompass)
>                         {
>                             textureatlassprite9.spriteNormal.frameCounter = textureatlassprite9.frameCounter;
>                         }
> 
>                         textureatlassprite9.spriteNormal.updateAnimation();
>                     }
>                 }
>             }
> 
>             if (flag4)
>             {
>                 TextureUtil.bindTexture(this.getMultiTexID().spec);
> 
>                 for (TextureAtlasSprite textureatlassprite10 : this.listAnimatedSprites)
>                 {
>                     if (textureatlassprite10.spriteSpecular != null && this.isTerrainAnimationActive(textureatlassprite10))
>                     {
>                         if (textureatlassprite10 == TextureUtils.iconClock || textureatlassprite10 == TextureUtils.iconCompass)
>                         {
>                             textureatlassprite10.spriteNormal.frameCounter = textureatlassprite10.frameCounter;
>                         }
> 
>                         textureatlassprite10.spriteSpecular.updateAnimation();
>                     }
>                 }
>             }
> 
>             if (flag3 || flag4)
>             {
>                 TextureUtil.bindTexture(this.getGlTextureId());
>             }
>         }
> 
>         if (Config.isShaders())
280c608
<             textureatlassprite.updateAnimation();
---
>             ShadersTex.updatingTex = null;
292c620
<             TextureAtlasSprite textureatlassprite = this.mapRegisteredSprites.get(location);
---
>             TextureAtlasSprite textureatlassprite6 = this.mapRegisteredSprites.get(location.toString());
294c622
<             if (textureatlassprite == null)
---
>             if (textureatlassprite6 == null)
296,297c624,630
<                 textureatlassprite = TextureAtlasSprite.makeAtlasSprite(location);
<                 this.mapRegisteredSprites.put(location.toString(), textureatlassprite);
---
>                 textureatlassprite6 = TextureAtlasSprite.makeAtlasSprite(location);
>                 this.mapRegisteredSprites.put(location.toString(), textureatlassprite6);
> 
>                 if (textureatlassprite6.getIndexInMap() < 0)
>                 {
>                     textureatlassprite6.setIndexInMap(this.counterIndexInMap++);
>                 }
300c633
<             return textureatlassprite;
---
>             return textureatlassprite6;
317a651,956
> 
>     @Nullable
>     public TextureAtlasSprite getTextureExtry(String p_getTextureExtry_1_)
>     {
>         return this.mapRegisteredSprites.get(p_getTextureExtry_1_);
>     }
> 
>     public boolean setTextureEntry(TextureAtlasSprite p_setTextureEntry_1_)
>     {
>         String s1 = p_setTextureEntry_1_.getIconName();
> 
>         if (!this.mapRegisteredSprites.containsKey(s1))
>         {
>             this.mapRegisteredSprites.put(s1, p_setTextureEntry_1_);
> 
>             if (p_setTextureEntry_1_.getIndexInMap() < 0)
>             {
>                 p_setTextureEntry_1_.setIndexInMap(this.counterIndexInMap++);
>             }
> 
>             return true;
>         }
>         else
>         {
>             return false;
>         }
>     }
> 
>     public String getBasePath()
>     {
>         return this.basePath;
>     }
> 
>     public int getMipmapLevels()
>     {
>         return this.mipmapLevels;
>     }
> 
>     private boolean isAbsoluteLocation(ResourceLocation p_isAbsoluteLocation_1_)
>     {
>         String s1 = p_isAbsoluteLocation_1_.getResourcePath();
>         return this.isAbsoluteLocationPath(s1);
>     }
> 
>     private boolean isAbsoluteLocationPath(String p_isAbsoluteLocationPath_1_)
>     {
>         String s1 = p_isAbsoluteLocationPath_1_.toLowerCase();
>         return s1.startsWith("mcpatcher/") || s1.startsWith("optifine/");
>     }
> 
>     public TextureAtlasSprite getSpriteSafe(String p_getSpriteSafe_1_)
>     {
>         ResourceLocation resourcelocation1 = new ResourceLocation(p_getSpriteSafe_1_);
>         return this.mapRegisteredSprites.get(resourcelocation1.toString());
>     }
> 
>     public TextureAtlasSprite getRegisteredSprite(ResourceLocation p_getRegisteredSprite_1_)
>     {
>         return this.mapRegisteredSprites.get(p_getRegisteredSprite_1_.toString());
>     }
> 
>     private boolean isTerrainAnimationActive(TextureAtlasSprite p_isTerrainAnimationActive_1_)
>     {
>         if (p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterFlow)
>         {
>             if (p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaFlow)
>             {
>                 if (p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer0 && p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer1)
>                 {
>                     if (p_isTerrainAnimationActive_1_ == TextureUtils.iconPortal)
>                     {
>                         return Config.isAnimatedPortal();
>                     }
>                     else
>                     {
>                         return p_isTerrainAnimationActive_1_ != TextureUtils.iconClock && p_isTerrainAnimationActive_1_ != TextureUtils.iconCompass ? Config.isAnimatedTerrain() : true;
>                     }
>                 }
>                 else
>                 {
>                     return Config.isAnimatedFire();
>                 }
>             }
>             else
>             {
>                 return Config.isAnimatedLava();
>             }
>         }
>         else
>         {
>             return Config.isAnimatedWater();
>         }
>     }
> 
>     public int getCountRegisteredSprites()
>     {
>         return this.counterIndexInMap;
>     }
> 
>     private int detectMaxMipmapLevel(Map p_detectMaxMipmapLevel_1_, IResourceManager p_detectMaxMipmapLevel_2_)
>     {
>         int k3 = this.detectMinimumSpriteSize(p_detectMaxMipmapLevel_1_, p_detectMaxMipmapLevel_2_, 20);
> 
>         if (k3 < 16)
>         {
>             k3 = 16;
>         }
> 
>         k3 = MathHelper.smallestEncompassingPowerOfTwo(k3);
> 
>         if (k3 > 16)
>         {
>             Config.log("Sprite size: " + k3);
>         }
> 
>         int l3 = MathHelper.log2(k3);
> 
>         if (l3 < 4)
>         {
>             l3 = 4;
>         }
> 
>         return l3;
>     }
> 
>     private int detectMinimumSpriteSize(Map p_detectMinimumSpriteSize_1_, IResourceManager p_detectMinimumSpriteSize_2_, int p_detectMinimumSpriteSize_3_)
>     {
>         Map map1 = new HashMap();
> 
>         for (Object entry : p_detectMinimumSpriteSize_1_.entrySet())
>         {
>             TextureAtlasSprite textureatlassprite6 = (TextureAtlasSprite)((Entry) entry).getValue();
>             ResourceLocation resourcelocation1 = new ResourceLocation(textureatlassprite6.getIconName());
>             ResourceLocation resourcelocation2 = this.completeResourceLocation(resourcelocation1);
> 
>             if (!textureatlassprite6.hasCustomLoader(p_detectMinimumSpriteSize_2_, resourcelocation1))
>             {
>                 try
>                 {
>                     IResource iresource1 = p_detectMinimumSpriteSize_2_.getResource(resourcelocation2);
> 
>                     if (iresource1 != null)
>                     {
>                         InputStream inputstream = iresource1.getInputStream();
> 
>                         if (inputstream != null)
>                         {
>                             Dimension dimension = TextureUtils.getImageSize(inputstream, "png");
> 
>                             if (dimension != null)
>                             {
>                                 int k3 = dimension.width;
>                                 int l3 = MathHelper.smallestEncompassingPowerOfTwo(k3);
> 
>                                 if (!map1.containsKey(Integer.valueOf(l3)))
>                                 {
>                                     map1.put(Integer.valueOf(l3), Integer.valueOf(1));
>                                 }
>                                 else
>                                 {
>                                     int i4 = ((Integer)map1.get(Integer.valueOf(l3))).intValue();
>                                     map1.put(Integer.valueOf(l3), Integer.valueOf(i4 + 1));
>                                 }
>                             }
>                         }
>                     }
>                 }
>                 catch (Exception var17)
>                 {
>                     ;
>                 }
>             }
>         }
> 
>         int j4 = 0;
>         Set set = map1.keySet();
>         Set set1 = new TreeSet(set);
>         int j5;
> 
>         for (Iterator iterator = set1.iterator(); iterator.hasNext(); j4 += j5)
>         {
>             int l4 = ((Integer)iterator.next()).intValue();
>             j5 = ((Integer)map1.get(Integer.valueOf(l4))).intValue();
>         }
> 
>         int k4 = 16;
>         int i5 = 0;
>         j5 = j4 * p_detectMinimumSpriteSize_3_ / 100;
>         Iterator iterator1 = set1.iterator();
> 
>         while (iterator1.hasNext())
>         {
>             int k5 = ((Integer)iterator1.next()).intValue();
>             int l5 = ((Integer)map1.get(Integer.valueOf(k5))).intValue();
>             i5 += l5;
> 
>             if (k5 > k4)
>             {
>                 k4 = k5;
>             }
> 
>             if (i5 > j5)
>             {
>                 return k4;
>             }
>         }
> 
>         return k4;
>     }
> 
>     private int getMinSpriteSize()
>     {
>         int k3 = 1 << this.mipmapLevels;
> 
>         if (k3 < 8)
>         {
>             k3 = 8;
>         }
> 
>         return k3;
>     }
> 
>     private int[] getMissingImageData(int p_getMissingImageData_1_)
>     {
>         BufferedImage bufferedimage = new BufferedImage(16, 16, 2);
>         bufferedimage.setRGB(0, 0, 16, 16, TextureUtil.MISSING_TEXTURE_DATA, 0, 16);
>         BufferedImage bufferedimage1 = TextureUtils.scaleToPowerOfTwo(bufferedimage, p_getMissingImageData_1_);
>         int[] aint = new int[p_getMissingImageData_1_ * p_getMissingImageData_1_];
>         bufferedimage1.getRGB(0, 0, p_getMissingImageData_1_, p_getMissingImageData_1_, aint, 0, p_getMissingImageData_1_);
>         return aint;
>     }
> 
>     public boolean isTextureBound()
>     {
>         int k3 = GlStateManager.getBoundTexture();
>         int l3 = this.getGlTextureId();
>         return k3 == l3;
>     }
> 
>     private void updateIconGrid(int p_updateIconGrid_1_, int p_updateIconGrid_2_)
>     {
>         this.iconGridCountX = -1;
>         this.iconGridCountY = -1;
>         this.iconGrid = null;
> 
>         if (this.iconGridSize > 0)
>         {
>             this.iconGridCountX = p_updateIconGrid_1_ / this.iconGridSize;
>             this.iconGridCountY = p_updateIconGrid_2_ / this.iconGridSize;
>             this.iconGrid = new TextureAtlasSprite[this.iconGridCountX * this.iconGridCountY];
>             this.iconGridSizeU = 1.0D / (double)this.iconGridCountX;
>             this.iconGridSizeV = 1.0D / (double)this.iconGridCountY;
> 
>             for (TextureAtlasSprite textureatlassprite6 : this.mapUploadedSprites.values())
>             {
>                 double d0 = 0.5D / (double)p_updateIconGrid_1_;
>                 double d1 = 0.5D / (double)p_updateIconGrid_2_;
>                 double d2 = (double)Math.min(textureatlassprite6.getMinU(), textureatlassprite6.getMaxU()) + d0;
>                 double d3 = (double)Math.min(textureatlassprite6.getMinV(), textureatlassprite6.getMaxV()) + d1;
>                 double d4 = (double)Math.max(textureatlassprite6.getMinU(), textureatlassprite6.getMaxU()) - d0;
>                 double d5 = (double)Math.max(textureatlassprite6.getMinV(), textureatlassprite6.getMaxV()) - d1;
>                 int k3 = (int)(d2 / this.iconGridSizeU);
>                 int l3 = (int)(d3 / this.iconGridSizeV);
>                 int i4 = (int)(d4 / this.iconGridSizeU);
>                 int j4 = (int)(d5 / this.iconGridSizeV);
> 
>                 for (int k4 = k3; k4 <= i4; ++k4)
>                 {
>                     if (k4 >= 0 && k4 < this.iconGridCountX)
>                     {
>                         for (int l4 = l3; l4 <= j4; ++l4)
>                         {
>                             if (l4 >= 0 && l4 < this.iconGridCountX)
>                             {
>                                 int i5 = l4 * this.iconGridCountX + k4;
>                                 this.iconGrid[i5] = textureatlassprite6;
>                             }
>                             else
>                             {
>                                 Config.warn("Invalid grid V: " + l4 + ", icon: " + textureatlassprite6.getIconName());
>                             }
>                         }
>                     }
>                     else
>                     {
>                         Config.warn("Invalid grid U: " + k4 + ", icon: " + textureatlassprite6.getIconName());
>                     }
>                 }
>             }
>         }
>     }
> 
>     public TextureAtlasSprite getIconByUV(double p_getIconByUV_1_, double p_getIconByUV_3_)
>     {
>         if (this.iconGrid == null)
>         {
>             return null;
>         }
>         else
>         {
>             int k3 = (int)(p_getIconByUV_1_ / this.iconGridSizeU);
>             int l3 = (int)(p_getIconByUV_3_ / this.iconGridSizeV);
>             int i4 = l3 * this.iconGridCountX + k3;
>             return i4 >= 0 && i4 <= this.iconGrid.length ? this.iconGrid[i4] : null;
>         }
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/texture/TextureUtil.java src\modified/src/minecraft/net/minecraft/client/renderer/texture/TextureUtil.java
14a15,18
> import optifine.Config;
> import optifine.Mipmaps;
> import optifine.Reflector;
> 
105,150c109
<         if (p_147943_4_)
<         {
<             MIPMAP_BUFFER[0] = p_147943_0_;
<             MIPMAP_BUFFER[1] = p_147943_1_;
<             MIPMAP_BUFFER[2] = p_147943_2_;
<             MIPMAP_BUFFER[3] = p_147943_3_;
<             float f = 0.0F;
<             float f1 = 0.0F;
<             float f2 = 0.0F;
<             float f3 = 0.0F;
< 
<             for (int i1 = 0; i1 < 4; ++i1)
<             {
<                 if (MIPMAP_BUFFER[i1] >> 24 != 0)
<                 {
<                     f += getColorGamma(MIPMAP_BUFFER[i1] >> 24);
<                     f1 += getColorGamma(MIPMAP_BUFFER[i1] >> 16);
<                     f2 += getColorGamma(MIPMAP_BUFFER[i1] >> 8);
<                     f3 += getColorGamma(MIPMAP_BUFFER[i1] >> 0);
<                 }
<             }
< 
<             f = f / 4.0F;
<             f1 = f1 / 4.0F;
<             f2 = f2 / 4.0F;
<             f3 = f3 / 4.0F;
<             int i2 = (int)(Math.pow((double)f, 0.45454545454545453D) * 255.0D);
<             int j1 = (int)(Math.pow((double)f1, 0.45454545454545453D) * 255.0D);
<             int k1 = (int)(Math.pow((double)f2, 0.45454545454545453D) * 255.0D);
<             int l1 = (int)(Math.pow((double)f3, 0.45454545454545453D) * 255.0D);
< 
<             if (i2 < 96)
<             {
<                 i2 = 0;
<             }
< 
<             return i2 << 24 | j1 << 16 | k1 << 8 | l1;
<         }
<         else
<         {
<             int i = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 24);
<             int j = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 16);
<             int k = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 8);
<             int l = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 0);
<             return i << 24 | j << 16 | k << 8 | l;
<         }
---
>         return Mipmaps.alphaBlend(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_);
177c136
<         int l;
---
>         int j;
179c138
<         for (int j = 0; j < p_147947_2_ * p_147947_3_; j += p_147947_2_ * l)
---
>         for (int k = 0; k < p_147947_2_ * p_147947_3_; k += p_147947_2_ * j)
181,185c140,144
<             int k = j / p_147947_2_;
<             l = Math.min(i, p_147947_3_ - k);
<             int i1 = p_147947_2_ * l;
<             copyToBufferPos(p_147947_1_, j, i1);
<             GlStateManager.glTexSubImage2D(3553, p_147947_0_, p_147947_4_, p_147947_5_ + k, p_147947_2_, l, 32993, 33639, DATA_BUFFER);
---
>             int l = k / p_147947_2_;
>             j = Math.min(i, p_147947_3_ - l);
>             int i1 = p_147947_2_ * j;
>             copyToBufferPos(p_147947_1_, k, i1);
>             GlStateManager.glTexSubImage2D(3553, p_147947_0_, p_147947_4_, p_147947_5_ + l, p_147947_2_, j, 32993, 33639, DATA_BUFFER);
202,203c161,172
<         deleteTexture(glTextureId);
<         bindTexture(glTextureId);
---
>         Object object = TextureUtil.class;
> 
>         if (Reflector.SplashScreen.exists())
>         {
>             object = Reflector.SplashScreen.getTargetClass();
>         }
> 
>         synchronized (object)
>         {
>             deleteTexture(glTextureId);
>             bindTexture(glTextureId);
>         }
246c215
<     private static void setTextureClamped(boolean p_110997_0_)
---
>     public static void setTextureClamped(boolean p_110997_0_)
250,251c219,220
<             GlStateManager.glTexParameteri(3553, 10242, 10496);
<             GlStateManager.glTexParameteri(3553, 10243, 10496);
---
>             GlStateManager.glTexParameteri(3553, 10242, 33071);
>             GlStateManager.glTexParameteri(3553, 10243, 33071);
265c234
<     private static void setTextureBlurMipmap(boolean p_147954_0_, boolean p_147954_1_)
---
>     public static void setTextureBlurMipmap(boolean p_147954_0_, boolean p_147954_1_)
274c243,244
<             GlStateManager.glTexParameteri(3553, 10241, p_147954_1_ ? 9986 : 9728);
---
>             int i = Config.getMipmapType();
>             GlStateManager.glTexParameteri(3553, 10241, p_147954_1_ ? i : 9728);
306c276
<         int[] aint1;
---
>         Object i;
312,316c282,293
<             int i = bufferedimage.getWidth();
<             int j = bufferedimage.getHeight();
<             int[] aint = new int[i * j];
<             bufferedimage.getRGB(0, 0, i, j, aint, 0, i);
<             aint1 = aint;
---
> 
>             if (bufferedimage != null)
>             {
>                 int j = bufferedimage.getWidth();
>                 int i1 = bufferedimage.getHeight();
>                 int[] aint1 = new int[j * i1];
>                 bufferedimage.getRGB(0, 0, j, i1, aint1, 0, j);
>                 int[] aint = aint1;
>                 return aint;
>             }
> 
>             i = null;
323c300
<         return aint1;
---
>         return (int[])i;
328,330c305
<         BufferedImage bufferedimage;
< 
<         try
---
>         if (imageStream == null)
332c307
<             bufferedimage = ImageIO.read(imageStream);
---
>             return null;
334c309
<         finally
---
>         else
336,337c311
<             IOUtils.closeQuietly(imageStream);
<         }
---
>             BufferedImage bufferedimage;
339c313,323
<         return bufferedimage;
---
>             try
>             {
>                 bufferedimage = ImageIO.read(imageStream);
>             }
>             finally
>             {
>                 IOUtils.closeQuietly(imageStream);
>             }
> 
>             return bufferedimage;
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/ThreadDownloadImageData.java src\modified/src/minecraft/net/minecraft/client/renderer/ThreadDownloadImageData.java
3a4
> import java.io.ByteArrayInputStream;
6a8
> import java.net.Proxy;
7a10
> import java.net.Proxy.Type;
15a19,24
> import optifine.CapeImageBuffer;
> import optifine.Config;
> import optifine.HttpPipeline;
> import optifine.HttpRequest;
> import optifine.HttpResponse;
> 
33a43,44
>     public Boolean imageFound = null;
>     public boolean pipeline = false;
45c56
<         if (!this.textureUploaded)
---
>         if (!this.textureUploaded && this.bufferedImage != null)
47,52c58
<             if (this.bufferedImage != null)
<             {
<                 if (this.textureLocation != null)
<                 {
<                     this.deleteGlTexture();
<                 }
---
>             this.textureUploaded = true;
54,55c60,62
<                 TextureUtil.uploadTextureImage(super.getGlTextureId(), this.bufferedImage);
<                 this.textureUploaded = true;
---
>             if (this.textureLocation != null)
>             {
>                 this.deleteGlTexture();
56a64,65
> 
>             TextureUtil.uploadTextureImage(super.getGlTextureId(), this.bufferedImage);
73a83,84
> 
>         this.imageFound = this.bufferedImage != null;
96a108,109
> 
>                     this.loadingFinished();
120c133
<                 try
---
>                 if (ThreadDownloadImageData.this.shouldPipeline())
122,127c135,139
<                     httpurlconnection = (HttpURLConnection)(new URL(ThreadDownloadImageData.this.imageUrl)).openConnection(Minecraft.getMinecraft().getProxy());
<                     httpurlconnection.setDoInput(true);
<                     httpurlconnection.setDoOutput(false);
<                     httpurlconnection.connect();
< 
<                     if (httpurlconnection.getResponseCode() / 100 == 2)
---
>                     ThreadDownloadImageData.this.loadPipelined();
>                 }
>                 else
>                 {
>                     try
128a141,155
>                         httpurlconnection = (HttpURLConnection)(new URL(ThreadDownloadImageData.this.imageUrl)).openConnection(Minecraft.getMinecraft().getProxy());
>                         httpurlconnection.setDoInput(true);
>                         httpurlconnection.setDoOutput(false);
>                         httpurlconnection.connect();
> 
>                         if (httpurlconnection.getResponseCode() / 100 != 2)
>                         {
>                             if (httpurlconnection.getErrorStream() != null)
>                             {
>                                 Config.readAll(httpurlconnection.getErrorStream());
>                             }
> 
>                             return;
>                         }
> 
146a174,177
>                     }
>                     catch (Exception exception1)
>                     {
>                         ThreadDownloadImageData.LOGGER.error("Couldn't download http texture: " + exception1.getMessage());
149,157c180
<                 }
<                 catch (Exception exception)
<                 {
<                     ThreadDownloadImageData.LOGGER.error("Couldn't download http texture", (Throwable)exception);
<                     return;
<                 }
<                 finally
<                 {
<                     if (httpurlconnection != null)
---
>                     finally
159c182,187
<                         httpurlconnection.disconnect();
---
>                         if (httpurlconnection != null)
>                         {
>                             httpurlconnection.disconnect();
>                         }
> 
>                         ThreadDownloadImageData.this.loadingFinished();
166a195,270
> 
>     private boolean shouldPipeline()
>     {
>         if (!this.pipeline)
>         {
>             return false;
>         }
>         else
>         {
>             Proxy proxy = Minecraft.getMinecraft().getProxy();
> 
>             if (proxy.type() != Type.DIRECT && proxy.type() != Type.SOCKS)
>             {
>                 return false;
>             }
>             else
>             {
>                 return this.imageUrl.startsWith("http://");
>             }
>         }
>     }
> 
>     private void loadPipelined()
>     {
>         try
>         {
>             HttpRequest httprequest = HttpPipeline.makeRequest(this.imageUrl, Minecraft.getMinecraft().getProxy());
>             HttpResponse httpresponse = HttpPipeline.executeRequest(httprequest);
> 
>             if (httpresponse.getStatus() / 100 != 2)
>             {
>                 return;
>             }
> 
>             byte[] abyte = httpresponse.getBody();
>             ByteArrayInputStream bytearrayinputstream = new ByteArrayInputStream(abyte);
>             BufferedImage bufferedimage;
> 
>             if (this.cacheFile != null)
>             {
>                 FileUtils.copyInputStreamToFile(bytearrayinputstream, this.cacheFile);
>                 bufferedimage = ImageIO.read(this.cacheFile);
>             }
>             else
>             {
>                 bufferedimage = TextureUtil.readBufferedImage(bytearrayinputstream);
>             }
> 
>             if (this.imageBuffer != null)
>             {
>                 bufferedimage = this.imageBuffer.parseUserSkin(bufferedimage);
>             }
> 
>             this.setBufferedImage(bufferedimage);
>         }
>         catch (Exception exception)
>         {
>             LOGGER.error("Couldn't download http texture: " + exception.getClass().getName() + ": " + exception.getMessage());
>             return;
>         }
>         finally
>         {
>             this.loadingFinished();
>         }
>     }
> 
>     private void loadingFinished()
>     {
>         this.imageFound = this.bufferedImage != null;
> 
>         if (this.imageBuffer instanceof CapeImageBuffer)
>         {
>             CapeImageBuffer capeimagebuffer = (CapeImageBuffer)this.imageBuffer;
>             capeimagebuffer.cleanup();
>         }
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityBeaconRenderer.java src\modified/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityBeaconRenderer.java
10a11,12
> import optifine.Config;
> import shadersmod.client.Shaders;
23,26c25
<         GlStateManager.alphaFunc(516, 0.1F);
<         this.bindTexture(TEXTURE_BEACON_BEAM);
< 
<         if (p_188206_9_ > 0.0D)
---
>         if (p_188206_9_ > 0.0D && p_188206_11_.size() > 0)
28,29c27,33
<             GlStateManager.disableFog();
<             int i = 0;
---
>             if (Config.isShaders())
>             {
>                 Shaders.beginBeacon();
>             }
> 
>             GlStateManager.alphaFunc(516, 0.1F);
>             this.bindTexture(TEXTURE_BEACON_BEAM);
31c35
<             for (int j = 0; j < p_188206_11_.size(); ++j)
---
>             if (p_188206_9_ > 0.0D)
33,35c37,47
<                 TileEntityBeacon.BeamSegment tileentitybeacon$beamsegment = p_188206_11_.get(j);
<                 renderBeamSegment(p_188206_1_, p_188206_3_, p_188206_5_, p_188206_7_, p_188206_9_, p_188206_12_, i, tileentitybeacon$beamsegment.getHeight(), tileentitybeacon$beamsegment.getColors());
<                 i += tileentitybeacon$beamsegment.getHeight();
---
>                 GlStateManager.disableFog();
>                 int i = 0;
> 
>                 for (int j = 0; j < p_188206_11_.size(); ++j)
>                 {
>                     TileEntityBeacon.BeamSegment tileentitybeacon$beamsegment = p_188206_11_.get(j);
>                     renderBeamSegment(p_188206_1_, p_188206_3_, p_188206_5_, p_188206_7_, p_188206_9_, p_188206_12_, i, tileentitybeacon$beamsegment.getHeight(), tileentitybeacon$beamsegment.getColors());
>                     i += tileentitybeacon$beamsegment.getHeight();
>                 }
> 
>                 GlStateManager.enableFog();
38c50,53
<             GlStateManager.enableFog();
---
>             if (Config.isShaders())
>             {
>                 Shaders.endBeacon();
>             }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityEndPortalRenderer.java src\modified/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityEndPortalRenderer.java
13a14,15
> import optifine.Config;
> import shadersmod.client.ShadersRender;
26,35c28
<         GlStateManager.disableLighting();
<         RANDOM.setSeed(31100L);
<         GlStateManager.getFloat(2982, MODELVIEW);
<         GlStateManager.getFloat(2983, PROJECTION);
<         double d0 = p_192841_2_ * p_192841_2_ + p_192841_4_ * p_192841_4_ + p_192841_6_ * p_192841_6_;
<         int i = this.func_191286_a(d0);
<         float f = this.func_191287_c();
<         boolean flag = false;
< 
<         for (int j = 0; j < i; ++j)
---
>         if (!Config.isShaders() || !ShadersRender.renderEndPortal(p_192841_1_, p_192841_2_, p_192841_4_, p_192841_6_, p_192841_8_, p_192841_9_, this.func_191287_c()))
37,41c30,143
<             GlStateManager.pushMatrix();
<             float f1 = 2.0F / (float)(18 - j);
< 
<             if (j == 0)
<             {
---
>             GlStateManager.disableLighting();
>             RANDOM.setSeed(31100L);
>             GlStateManager.getFloat(2982, MODELVIEW);
>             GlStateManager.getFloat(2983, PROJECTION);
>             double d0 = p_192841_2_ * p_192841_2_ + p_192841_4_ * p_192841_4_ + p_192841_6_ * p_192841_6_;
>             int i = this.func_191286_a(d0);
>             float f = this.func_191287_c();
>             boolean flag = false;
> 
>             for (int j = 0; j < i; ++j)
>             {
>                 GlStateManager.pushMatrix();
>                 float f1 = 2.0F / (float)(18 - j);
> 
>                 if (j == 0)
>                 {
>                     this.bindTexture(END_SKY_TEXTURE);
>                     f1 = 0.15F;
>                     GlStateManager.enableBlend();
>                     GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
>                 }
> 
>                 if (j >= 1)
>                 {
>                     this.bindTexture(END_PORTAL_TEXTURE);
>                     flag = true;
>                     Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
>                 }
> 
>                 if (j == 1)
>                 {
>                     GlStateManager.enableBlend();
>                     GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
>                 }
> 
>                 GlStateManager.texGen(GlStateManager.TexGen.S, 9216);
>                 GlStateManager.texGen(GlStateManager.TexGen.T, 9216);
>                 GlStateManager.texGen(GlStateManager.TexGen.R, 9216);
>                 GlStateManager.texGen(GlStateManager.TexGen.S, 9474, this.getBuffer(1.0F, 0.0F, 0.0F, 0.0F));
>                 GlStateManager.texGen(GlStateManager.TexGen.T, 9474, this.getBuffer(0.0F, 1.0F, 0.0F, 0.0F));
>                 GlStateManager.texGen(GlStateManager.TexGen.R, 9474, this.getBuffer(0.0F, 0.0F, 1.0F, 0.0F));
>                 GlStateManager.enableTexGenCoord(GlStateManager.TexGen.S);
>                 GlStateManager.enableTexGenCoord(GlStateManager.TexGen.T);
>                 GlStateManager.enableTexGenCoord(GlStateManager.TexGen.R);
>                 GlStateManager.popMatrix();
>                 GlStateManager.matrixMode(5890);
>                 GlStateManager.pushMatrix();
>                 GlStateManager.loadIdentity();
>                 GlStateManager.translate(0.5F, 0.5F, 0.0F);
>                 GlStateManager.scale(0.5F, 0.5F, 1.0F);
>                 float f2 = (float)(j + 1);
>                 GlStateManager.translate(17.0F / f2, (2.0F + f2 / 1.5F) * ((float)Minecraft.getSystemTime() % 800000.0F / 800000.0F), 0.0F);
>                 GlStateManager.rotate((f2 * f2 * 4321.0F + f2 * 9.0F) * 2.0F, 0.0F, 0.0F, 1.0F);
>                 GlStateManager.scale(4.5F - f2 / 4.0F, 4.5F - f2 / 4.0F, 1.0F);
>                 GlStateManager.multMatrix(PROJECTION);
>                 GlStateManager.multMatrix(MODELVIEW);
>                 Tessellator tessellator = Tessellator.getInstance();
>                 BufferBuilder bufferbuilder = tessellator.getBuffer();
>                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
>                 float f3 = (RANDOM.nextFloat() * 0.5F + 0.1F) * f1;
>                 float f4 = (RANDOM.nextFloat() * 0.5F + 0.4F) * f1;
>                 float f5 = (RANDOM.nextFloat() * 0.5F + 0.5F) * f1;
> 
>                 if (p_192841_1_.shouldRenderFace(EnumFacing.SOUTH))
>                 {
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                 }
> 
>                 if (p_192841_1_.shouldRenderFace(EnumFacing.NORTH))
>                 {
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                 }
> 
>                 if (p_192841_1_.shouldRenderFace(EnumFacing.EAST))
>                 {
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                 }
> 
>                 if (p_192841_1_.shouldRenderFace(EnumFacing.WEST))
>                 {
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                 }
> 
>                 if (p_192841_1_.shouldRenderFace(EnumFacing.DOWN))
>                 {
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                 }
> 
>                 if (p_192841_1_.shouldRenderFace(EnumFacing.UP))
>                 {
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + (double)f, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + (double)f, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + (double)f, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + (double)f, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
>                 }
> 
>                 tessellator.draw();
>                 GlStateManager.popMatrix();
>                 GlStateManager.matrixMode(5888);
43,52d144
<                 f1 = 0.15F;
<                 GlStateManager.enableBlend();
<                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
<             }
< 
<             if (j >= 1)
<             {
<                 this.bindTexture(END_PORTAL_TEXTURE);
<                 flag = true;
<                 Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
55,103c147,151
<             if (j == 1)
<             {
<                 GlStateManager.enableBlend();
<                 GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
<             }
< 
<             GlStateManager.texGen(GlStateManager.TexGen.S, 9216);
<             GlStateManager.texGen(GlStateManager.TexGen.T, 9216);
<             GlStateManager.texGen(GlStateManager.TexGen.R, 9216);
<             GlStateManager.texGen(GlStateManager.TexGen.S, 9474, this.getBuffer(1.0F, 0.0F, 0.0F, 0.0F));
<             GlStateManager.texGen(GlStateManager.TexGen.T, 9474, this.getBuffer(0.0F, 1.0F, 0.0F, 0.0F));
<             GlStateManager.texGen(GlStateManager.TexGen.R, 9474, this.getBuffer(0.0F, 0.0F, 1.0F, 0.0F));
<             GlStateManager.enableTexGenCoord(GlStateManager.TexGen.S);
<             GlStateManager.enableTexGenCoord(GlStateManager.TexGen.T);
<             GlStateManager.enableTexGenCoord(GlStateManager.TexGen.R);
<             GlStateManager.popMatrix();
<             GlStateManager.matrixMode(5890);
<             GlStateManager.pushMatrix();
<             GlStateManager.loadIdentity();
<             GlStateManager.translate(0.5F, 0.5F, 0.0F);
<             GlStateManager.scale(0.5F, 0.5F, 1.0F);
<             float f2 = (float)(j + 1);
<             GlStateManager.translate(17.0F / f2, (2.0F + f2 / 1.5F) * ((float)Minecraft.getSystemTime() % 800000.0F / 800000.0F), 0.0F);
<             GlStateManager.rotate((f2 * f2 * 4321.0F + f2 * 9.0F) * 2.0F, 0.0F, 0.0F, 1.0F);
<             GlStateManager.scale(4.5F - f2 / 4.0F, 4.5F - f2 / 4.0F, 1.0F);
<             GlStateManager.multMatrix(PROJECTION);
<             GlStateManager.multMatrix(MODELVIEW);
<             Tessellator tessellator = Tessellator.getInstance();
<             BufferBuilder bufferbuilder = tessellator.getBuffer();
<             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
<             float f3 = (RANDOM.nextFloat() * 0.5F + 0.1F) * f1;
<             float f4 = (RANDOM.nextFloat() * 0.5F + 0.4F) * f1;
<             float f5 = (RANDOM.nextFloat() * 0.5F + 0.5F) * f1;
< 
<             if (p_192841_1_.shouldRenderFace(EnumFacing.SOUTH))
<             {
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<             }
< 
<             if (p_192841_1_.shouldRenderFace(EnumFacing.NORTH))
<             {
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<             }
---
>             GlStateManager.disableBlend();
>             GlStateManager.disableTexGenCoord(GlStateManager.TexGen.S);
>             GlStateManager.disableTexGenCoord(GlStateManager.TexGen.T);
>             GlStateManager.disableTexGenCoord(GlStateManager.TexGen.R);
>             GlStateManager.enableLighting();
105c153
<             if (p_192841_1_.shouldRenderFace(EnumFacing.EAST))
---
>             if (flag)
107,110c155
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
---
>                 Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
112,151d156
< 
<             if (p_192841_1_.shouldRenderFace(EnumFacing.WEST))
<             {
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<             }
< 
<             if (p_192841_1_.shouldRenderFace(EnumFacing.DOWN))
<             {
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<             }
< 
<             if (p_192841_1_.shouldRenderFace(EnumFacing.UP))
<             {
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + (double)f, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + (double)f, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + (double)f, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + (double)f, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
<             }
< 
<             tessellator.draw();
<             GlStateManager.popMatrix();
<             GlStateManager.matrixMode(5888);
<             this.bindTexture(END_SKY_TEXTURE);
<         }
< 
<         GlStateManager.disableBlend();
<         GlStateManager.disableTexGenCoord(GlStateManager.TexGen.S);
<         GlStateManager.disableTexGenCoord(GlStateManager.TexGen.T);
<         GlStateManager.disableTexGenCoord(GlStateManager.TexGen.R);
<         GlStateManager.enableLighting();
< 
<         if (flag)
<         {
<             Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
Only in src\modified/src/minecraft/net/minecraft/client/renderer/tileentity: TileEntityRen#
Only in src\modified/src/minecraft/net/minecraft/client/renderer/tileentity: TileEntityRen~
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.java src\modified/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.java
5a6
> import net.minecraft.client.Minecraft;
10a12
> import net.minecraft.client.renderer.Tessellator;
11a14,15
> import net.minecraft.client.renderer.texture.TextureMap;
> import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
33a38
> import optifine.Reflector;
37c42
<     private final Map < Class <? extends TileEntity > , TileEntitySpecialRenderer <? extends TileEntity >> mapSpecialRenderers = Maps. < Class <? extends TileEntity > , TileEntitySpecialRenderer <? extends TileEntity >> newHashMap();
---
>     public final Map<Class, TileEntitySpecialRenderer> mapSpecialRenderers = Maps.newHashMap();
39c44
<     private FontRenderer fontRenderer;
---
>     public FontRenderer fontRenderer;
57a63,65
>     public TileEntity tileEntityRendered;
>     private Tessellator batchBuffer = new Tessellator(2097152);
>     private boolean drawingBatch = false;
88c96
<             tileentityspecialrenderer = this.getSpecialRendererByClass((Class <? extends TileEntity >)teClass.getSuperclass());
---
>             tileentityspecialrenderer = this.getSpecialRendererByClass((Class<? extends TileEntity>) teClass.getSuperclass());
124,128c132,147
<             int i = this.worldObj.getCombinedLight(tileentityIn.getPos(), 0);
<             int j = i % 65536;
<             int k = i / 65536;
<             OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j, (float)k);
<             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
---
>             boolean flag = true;
> 
>             if (Reflector.ForgeTileEntity_hasFastRenderer.exists())
>             {
>                 flag = !this.drawingBatch || !Reflector.callBoolean(tileentityIn, Reflector.ForgeTileEntity_hasFastRenderer);
>             }
> 
>             if (flag)
>             {
>                 int i = this.worldObj.getCombinedLight(tileentityIn.getPos(), 0);
>                 int j = i % 65536;
>                 int k = i / 65536;
>                 OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j, (float)k);
>                 GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
>             }
> 
155c174,185
<                 tileentityspecialrenderer.func_192841_a(p_192854_1_, p_192854_2_, p_192854_4_, p_192854_6_, p_192854_8_, p_192854_9_, p_192854_10_);
---
>                 this.tileEntityRendered = p_192854_1_;
> 
>                 if (this.drawingBatch && Reflector.callBoolean(p_192854_1_, Reflector.ForgeTileEntity_hasFastRenderer))
>                 {
>                     tileentityspecialrenderer.renderTileEntityFast(p_192854_1_, p_192854_2_, p_192854_4_, p_192854_6_, p_192854_8_, p_192854_9_, p_192854_10_, this.batchBuffer.getBuffer());
>                 }
>                 else
>                 {
>                     tileentityspecialrenderer.func_192841_a(p_192854_1_, p_192854_2_, p_192854_4_, p_192854_6_, p_192854_8_, p_192854_9_, p_192854_10_);
>                 }
> 
>                 this.tileEntityRendered = null;
180a211,243
> 
>     public void preDrawBatch()
>     {
>         this.batchBuffer.getBuffer().begin(7, DefaultVertexFormats.BLOCK);
>         this.drawingBatch = true;
>     }
> 
>     public void drawBatch(int p_drawBatch_1_)
>     {
>         this.renderEngine.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
>         RenderHelper.disableStandardItemLighting();
>         GlStateManager.blendFunc(770, 771);
>         GlStateManager.enableBlend();
>         GlStateManager.disableCull();
> 
>         if (Minecraft.isAmbientOcclusionEnabled())
>         {
>             GlStateManager.shadeModel(7425);
>         }
>         else
>         {
>             GlStateManager.shadeModel(7424);
>         }
> 
>         if (p_drawBatch_1_ > 0)
>         {
>             this.batchBuffer.getBuffer().sortVertexData(0.0F, 0.0F, 0.0F);
>         }
> 
>         this.batchBuffer.draw();
>         RenderHelper.enableStandardItemLighting();
>         this.drawingBatch = false;
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntitySignRenderer.java src\modified/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntitySignRenderer.java
3a4,6
> 
> import org.golde.lttclientmeme.chroma.ColorUtils;
> 
12a16,17
> import optifine.Config;
> import optifine.CustomColors;
86a92,97
> //        if (Config.isCustomColors())
> //        {
> //            i = CustomColors.getSignTextColor(i);
> //        }
> 
>         GlStateManager.disableLighting();
96d106
< 
100c110,111
<                         fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5, 0);
---
>                         //fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5, i);
>                         ColorUtils.drawChromaString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5);
104c115,116
<                         fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5, 0);
---
>                     	ColorUtils.drawChromaString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5);
>                         //fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5, i);
108a121
>         GlStateManager.enableLighting();
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntitySpecialRenderer.java src\modified/src/minecraft/net/minecraft/client/renderer/tileentity/TileEntitySpecialRenderer.java
3a4
> import net.minecraft.client.renderer.BufferBuilder;
12a14
> import net.optifine.entity.model.IEntityRenderer;
14c16
< public abstract class TileEntitySpecialRenderer<T extends TileEntity>
---
> public abstract class TileEntitySpecialRenderer<T extends TileEntity> implements IEntityRenderer
17a20,21
>     private Class tileEntityClass = null;
>     private ResourceLocation locationTextureCustom = null;
93a98,121
> 
>     public void renderTileEntityFast(T p_renderTileEntityFast_1_, double p_renderTileEntityFast_2_, double p_renderTileEntityFast_4_, double p_renderTileEntityFast_6_, float p_renderTileEntityFast_8_, int p_renderTileEntityFast_9_, float p_renderTileEntityFast_10_, BufferBuilder p_renderTileEntityFast_11_)
>     {
>     }
> 
>     public Class getEntityClass()
>     {
>         return this.tileEntityClass;
>     }
> 
>     public void setEntityClass(Class p_setEntityClass_1_)
>     {
>         this.tileEntityClass = p_setEntityClass_1_;
>     }
> 
>     public ResourceLocation getLocationTextureCustom()
>     {
>         return this.locationTextureCustom;
>     }
> 
>     public void setLocationTextureCustom(ResourceLocation p_setLocationTextureCustom_1_)
>     {
>         this.locationTextureCustom = p_setLocationTextureCustom_1_;
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/VboRenderList.java src\modified/src/minecraft/net/minecraft/client/renderer/VboRenderList.java
5a6,7
> import optifine.Config;
> import shadersmod.client.ShadersRender;
33,38c35,47
<         GlStateManager.glVertexPointer(3, 5126, 28, 0);
<         GlStateManager.glColorPointer(4, 5121, 28, 12);
<         GlStateManager.glTexCoordPointer(2, 5126, 28, 16);
<         OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
<         GlStateManager.glTexCoordPointer(2, 5122, 28, 24);
<         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
---
>         if (Config.isShaders())
>         {
>             ShadersRender.setupArrayPointersVbo();
>         }
>         else
>         {
>             GlStateManager.glVertexPointer(3, 5126, 28, 0);
>             GlStateManager.glColorPointer(4, 5121, 28, 12);
>             GlStateManager.glTexCoordPointer(2, 5126, 28, 16);
>             OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
>             GlStateManager.glTexCoordPointer(2, 5122, 28, 24);
>             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/vertex/DefaultVertexFormats.java src\modified/src/minecraft/net/minecraft/client/renderer/vertex/DefaultVertexFormats.java
2a3,6
> import optifine.Config;
> import optifine.Reflector;
> import shadersmod.client.SVertexFormat;
> 
5,6c9,12
<     public static final VertexFormat BLOCK = new VertexFormat();
<     public static final VertexFormat ITEM = new VertexFormat();
---
>     public static VertexFormat BLOCK = new VertexFormat();
>     public static VertexFormat ITEM = new VertexFormat();
>     private static final VertexFormat BLOCK_VANILLA = BLOCK;
>     private static final VertexFormat ITEM_VANILLA = ITEM;
23a30,55
>     public static void updateVertexFormats()
>     {
>         if (Config.isShaders())
>         {
>             BLOCK = SVertexFormat.makeDefVertexFormatBlock();
>             ITEM = SVertexFormat.makeDefVertexFormatItem();
>         }
>         else
>         {
>             BLOCK = BLOCK_VANILLA;
>             ITEM = ITEM_VANILLA;
>         }
> 
>         if (Reflector.Attributes_DEFAULT_BAKED_FORMAT.exists())
>         {
>             VertexFormat vertexformat = ITEM;
>             VertexFormat vertexformat1 = (VertexFormat)Reflector.getFieldValue(Reflector.Attributes_DEFAULT_BAKED_FORMAT);
>             vertexformat1.clear();
> 
>             for (int i = 0; i < vertexformat.getElementCount(); ++i)
>             {
>                 vertexformat1.addElement(vertexformat.getElement(i));
>             }
>         }
>     }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/ViewFrustum.java src\modified/src/minecraft/net/minecraft/client/renderer/ViewFrustum.java
145c145
<     protected RenderChunk getRenderChunk(BlockPos pos)
---
>     public RenderChunk getRenderChunk(BlockPos pos)
147,149c147,149
<         int i = MathHelper.intFloorDiv(pos.getX(), 16);
<         int j = MathHelper.intFloorDiv(pos.getY(), 16);
<         int k = MathHelper.intFloorDiv(pos.getZ(), 16);
---
>         int i = pos.getX() >> 4;
>         int j = pos.getY() >> 4;
>         int k = pos.getZ() >> 4;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/renderer/WorldVertexBufferUploader.java src\modified/src/minecraft/net/minecraft/client/renderer/WorldVertexBufferUploader.java
6a7,9
> import optifine.Config;
> import optifine.Reflector;
> import shadersmod.client.SVertexBuilder;
10c13,14
<     public void draw(BufferBuilder vertexBufferIn)
---
>     @SuppressWarnings("incomplete-switch")
> 	public void draw(BufferBuilder vertexBufferIn)
17a22,23
>             boolean flag = Reflector.ForgeVertexFormatElementEnumUseage_preDraw.exists();
>             boolean flag1 = Reflector.ForgeVertexFormatElementEnumUseage_postDraw.exists();
23,25d28
<                 int k = vertexformatelement.getType().getGlConstant();
<                 int l = vertexformatelement.getIndex();
<                 bytebuffer.position(vertexformat.getOffset(j));
27c30
<                 switch (vertexformatelement$enumusage)
---
>                 if (flag)
29,48c32,62
<                     case POSITION:
<                         GlStateManager.glVertexPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
<                         GlStateManager.glEnableClientState(32884);
<                         break;
< 
<                     case UV:
<                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + l);
<                         GlStateManager.glTexCoordPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
<                         GlStateManager.glEnableClientState(32888);
<                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
<                         break;
< 
<                     case COLOR:
<                         GlStateManager.glColorPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
<                         GlStateManager.glEnableClientState(32886);
<                         break;
< 
<                     case NORMAL:
<                         GlStateManager.glNormalPointer(k, i, bytebuffer);
<                         GlStateManager.glEnableClientState(32885);
---
>                     Reflector.callVoid(vertexformatelement$enumusage, Reflector.ForgeVertexFormatElementEnumUseage_preDraw, vertexformat, j, i, bytebuffer);
>                 }
>                 else
>                 {
>                     int k = vertexformatelement.getType().getGlConstant();
>                     int l = vertexformatelement.getIndex();
>                     bytebuffer.position(vertexformat.getOffset(j));
> 
>                     switch (vertexformatelement$enumusage)
>                     {
>                         case POSITION:
>                             GlStateManager.glVertexPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
>                             GlStateManager.glEnableClientState(32884);
>                             break;
> 
>                         case UV:
>                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + l);
>                             GlStateManager.glTexCoordPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
>                             GlStateManager.glEnableClientState(32888);
>                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
>                             break;
> 
>                         case COLOR:
>                             GlStateManager.glColorPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
>                             GlStateManager.glEnableClientState(32886);
>                             break;
> 
>                         case NORMAL:
>                             GlStateManager.glNormalPointer(k, i, bytebuffer);
>                             GlStateManager.glEnableClientState(32885);
>                     }
52,53c66,79
<             GlStateManager.glDrawArrays(vertexBufferIn.getDrawMode(), 0, vertexBufferIn.getVertexCount());
<             int i1 = 0;
---
>             if (vertexBufferIn.isMultiTexture())
>             {
>                 vertexBufferIn.drawMultiTexture();
>             }
>             else if (Config.isShaders())
>             {
>                 SVertexBuilder.drawArrays(vertexBufferIn.getDrawMode(), 0, vertexBufferIn.getVertexCount(), vertexBufferIn);
>             }
>             else
>             {
>                 GlStateManager.glDrawArrays(vertexBufferIn.getDrawMode(), 0, vertexBufferIn.getVertexCount());
>             }
> 
>             int j1 = 0;
55c81
<             for (int j1 = list.size(); i1 < j1; ++i1)
---
>             for (int k1 = list.size(); j1 < k1; ++j1)
57c83
<                 VertexFormatElement vertexformatelement1 = list.get(i1);
---
>                 VertexFormatElement vertexformatelement1 = list.get(j1);
59d84
<                 int k1 = vertexformatelement1.getIndex();
61c86,90
<                 switch (vertexformatelement$enumusage1)
---
>                 if (flag1)
>                 {
>                     Reflector.callVoid(vertexformatelement$enumusage1, Reflector.ForgeVertexFormatElementEnumUseage_postDraw, vertexformat, j1, i, bytebuffer);
>                 }
>                 else
63,76c92
<                     case POSITION:
<                         GlStateManager.glDisableClientState(32884);
<                         break;
< 
<                     case UV:
<                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + k1);
<                         GlStateManager.glDisableClientState(32888);
<                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
<                         break;
< 
<                     case COLOR:
<                         GlStateManager.glDisableClientState(32886);
<                         GlStateManager.resetColor();
<                         break;
---
>                     int i1 = vertexformatelement1.getIndex();
78,79c94,113
<                     case NORMAL:
<                         GlStateManager.glDisableClientState(32885);
---
>                     switch (vertexformatelement$enumusage1)
>                     {
>                         case POSITION:
>                             GlStateManager.glDisableClientState(32884);
>                             break;
> 
>                         case UV:
>                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + i1);
>                             GlStateManager.glDisableClientState(32888);
>                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
>                             break;
> 
>                         case COLOR:
>                             GlStateManager.glDisableClientState(32886);
>                             GlStateManager.resetColor();
>                             break;
> 
>                         case NORMAL:
>                             GlStateManager.glDisableClientState(32885);
>                     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/resources/AbstractResourcePack.java src\modified/src/minecraft/net/minecraft/client/resources/AbstractResourcePack.java
25c25
<     protected final File resourcePackFile;
---
>     public final File resourcePackFile;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/resources/DefaultResourcePack.java src\modified/src/minecraft/net/minecraft/client/resources/DefaultResourcePack.java
16a17,18
> import net.minecraft.util.Util;
> import optifine.ReflectorForge;
21a24
>     private static final boolean ON_WINDOWS = Util.getOSType() == Util.EnumOS.WINDOWS;
30c33
<         InputStream inputstream = this.getResourceStream(location);
---
>         InputStream inputstream = this.getInputStreamAssets(location);
38c41
<             InputStream inputstream1 = this.getInputStreamAssets(location);
---
>             InputStream inputstream1 = this.getResourceStream(location);
61a65
>         InputStream inputstream = ReflectorForge.getOptiFineResourceStream(s);
63c67
<         try
---
>         if (inputstream != null)
65,66c69
<             URL url = DefaultResourcePack.class.getResource(s);
<             return url != null && FolderResourcePack.func_191384_a(new File(url.getFile()), s) ? DefaultResourcePack.class.getResourceAsStream(s) : null;
---
>             return inputstream;
68c71
<         catch (IOException var4)
---
>         else
70c73,81
<             return DefaultResourcePack.class.getResourceAsStream(s);
---
>             try
>             {
>                 URL url = DefaultResourcePack.class.getResource(s);
>                 return url != null && this.validatePath(new File(url.getFile()), s) ? DefaultResourcePack.class.getResourceAsStream(s) : null;
>             }
>             catch (IOException var5)
>             {
>                 return DefaultResourcePack.class.getResourceAsStream(s);
>             }
94c105
<             return (T)null;
---
>             return (T)(null);
96c107
<         catch (FileNotFoundException var5)
---
>         catch (FileNotFoundException var51)
98c109
<             return (T)null;
---
>             return (T)(null);
110a122,140
> 
>     private boolean validatePath(File p_validatePath_1_, String p_validatePath_2_) throws IOException
>     {
>         String s = p_validatePath_1_.getPath();
> 
>         if (s.startsWith("file:"))
>         {
>             if (ON_WINDOWS)
>             {
>                 s = s.replace("\\", "/");
>             }
> 
>             return s.endsWith(p_validatePath_2_);
>         }
>         else
>         {
>             return FolderResourcePack.func_191384_a(p_validatePath_1_, p_validatePath_2_);
>         }
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/resources/I18n.java src\modified/src/minecraft/net/minecraft/client/resources/I18n.java
2a3,4
> import java.util.Map;
> 
23a26,30
> 
>     public static Map getLocaleProperties()
>     {
>         return i18nLocale.properties;
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/resources/ResourcePackRepository.java src\modified/src/minecraft/net/minecraft/client/resources/ResourcePackRepository.java
67c67
<     private final List<ResourcePackRepository.Entry> repositoryEntries = Lists.<ResourcePackRepository.Entry>newArrayList();
---
>     public final List<ResourcePackRepository.Entry> repositoryEntries = Lists.<ResourcePackRepository.Entry>newArrayList();
105c105
<         map.put("X-Minecraft-Version", "1.12");
---
>         map.put("X-Minecraft-Version", "1.12.2");
183c183
<                 catch (Exception var6)
---
>                 catch (Exception var61)
257,258c257,259
<                     ListenableFuture listenablefuture1 = this.setResourcePackInstance(file1);
<                     return listenablefuture1;
---
>                     ListenableFuture listenablefuture2 = this.setResourcePackInstance(file1);
>                     ListenableFuture listenablefuture3 = listenablefuture2;
>                     return listenablefuture3;
300c301,302
<             return listenablefuture;
---
>             ListenableFuture listenablefuture1 = listenablefuture;
>             return listenablefuture1;
328c330
<         catch (IOException ioexception)
---
>         catch (IOException ioexception1)
330c332
<             LOGGER.warn("File {} couldn't be hashed.", p_190113_2_, ioexception);
---
>             LOGGER.warn("File {} couldn't be hashed.", p_190113_2_, ioexception1);
372c374
<         catch (IllegalArgumentException illegalargumentexception)
---
>         catch (IllegalArgumentException illegalargumentexception1)
374c376
<             LOGGER.error("Error while deleting old server resource pack : {}", (Object)illegalargumentexception.getMessage());
---
>             LOGGER.error("Error while deleting old server resource pack : {}", (Object)illegalargumentexception1.getMessage());
452,461c454
<             try
<             {
<                 bufferedimage = this.reResourcePack.getPackImage();
<             }
<             catch (IOException var5)
<             {
<                 ;
<             }
< 
<             if (bufferedimage == null)
---
>             if (this.locationTexturePackIcon == null)
465c458
<                     bufferedimage = TextureUtil.readBufferedImage(Minecraft.getMinecraft().getResourceManager().getResource(ResourcePackRepository.field_191400_f).getInputStream());
---
>                     bufferedimage = this.reResourcePack.getPackImage();
467c460
<                 catch (IOException ioexception)
---
>                 catch (IOException var5)
469c462,474
<                     throw new Error("Couldn't bind resource pack icon", ioexception);
---
>                     ;
>                 }
> 
>                 if (bufferedimage == null)
>                 {
>                     try
>                     {
>                         bufferedimage = TextureUtil.readBufferedImage(Minecraft.getMinecraft().getResourceManager().getResource(ResourcePackRepository.field_191400_f).getInputStream());
>                     }
>                     catch (IOException ioexception)
>                     {
>                         throw new Error("Couldn't bind resource pack icon", ioexception);
>                     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/client/settings/GameSettings.java src\modified/src/minecraft/net/minecraft/client/settings/GameSettings.java
8a9
> import java.io.BufferedReader;
11a13
> import java.io.InputStreamReader;
17a20
> import java.util.Arrays;
23a27
> import net.minecraft.client.gui.GuiScreen;
24a29
> import net.minecraft.client.renderer.OpenGlHelper;
37a43,53
> import optifine.ClearWater;
> import optifine.Config;
> import optifine.CustomColors;
> import optifine.CustomGuis;
> import optifine.CustomSky;
> import optifine.DynamicLights;
> import optifine.Lang;
> import optifine.NaturalTextures;
> import optifine.RandomMobs;
> import optifine.Reflector;
> 
44a61,62
> import org.lwjgl.opengl.DisplayMode;
> import shadersmod.client.Shaders;
185a204,285
>     public int ofFogType = 1;
>     public float ofFogStart = 0.8F;
>     public int ofMipmapType = 0;
>     public boolean ofOcclusionFancy = false;
>     public boolean ofSmoothFps = false;
>     public boolean ofSmoothWorld = Config.isSingleProcessor();
>     public boolean ofLazyChunkLoading = Config.isSingleProcessor();
>     public float ofAoLevel = 1.0F;
>     public int ofAaLevel = 0;
>     public int ofAfLevel = 1;
>     public int ofClouds = 0;
>     public float ofCloudsHeight = 0.0F;
>     public int ofTrees = 0;
>     public int ofRain = 0;
>     public int ofDroppedItems = 0;
>     public int ofBetterGrass = 3;
>     public int ofAutoSaveTicks = 4000;
>     public boolean ofLagometer = false;
>     public boolean ofProfiler = false;
>     public boolean ofShowFps = false;
>     public boolean ofWeather = true;
>     public boolean ofSky = true;
>     public boolean ofStars = true;
>     public boolean ofSunMoon = true;
>     public int ofVignette = 0;
>     public int ofChunkUpdates = 1;
>     public boolean ofChunkUpdatesDynamic = false;
>     public int ofTime = 0;
>     public boolean ofClearWater = false;
>     public boolean ofBetterSnow = false;
>     public String ofFullscreenMode = "Default";
>     public boolean ofSwampColors = true;
>     public boolean ofRandomMobs = true;
>     public boolean ofSmoothBiomes = true;
>     public boolean ofCustomFonts = true;
>     public boolean ofCustomColors = true;
>     public boolean ofCustomSky = true;
>     public boolean ofShowCapes = true;
>     public int ofConnectedTextures = 2;
>     public boolean ofCustomItems = true;
>     public boolean ofNaturalTextures = false;
>     public boolean ofFastMath = false;
>     public boolean ofFastRender = false;
>     public int ofTranslucentBlocks = 0;
>     public boolean ofDynamicFov = true;
>     public boolean ofAlternateBlocks = true;
>     public int ofDynamicLights = 3;
>     public boolean ofCustomEntityModels = true;
>     public boolean ofCustomGuis = true;
>     public int ofScreenshotSize = 1;
>     public int ofAnimatedWater = 0;
>     public int ofAnimatedLava = 0;
>     public boolean ofAnimatedFire = true;
>     public boolean ofAnimatedPortal = true;
>     public boolean ofAnimatedRedstone = true;
>     public boolean ofAnimatedExplosion = true;
>     public boolean ofAnimatedFlame = true;
>     public boolean ofAnimatedSmoke = true;
>     public boolean ofVoidParticles = true;
>     public boolean ofWaterParticles = true;
>     public boolean ofRainSplash = true;
>     public boolean ofPortalParticles = true;
>     public boolean ofPotionParticles = true;
>     public boolean ofFireworkParticles = true;
>     public boolean ofDrippingWaterLava = true;
>     public boolean ofAnimatedTerrain = true;
>     public boolean ofAnimatedTextures = true;
>     public static final int DEFAULT = 0;
>     public static final int FAST = 1;
>     public static final int FANCY = 2;
>     public static final int OFF = 3;
>     public static final int SMART = 4;
>     public static final int ANIM_ON = 0;
>     public static final int ANIM_GENERATED = 1;
>     public static final int ANIM_OFF = 2;
>     public static final String DEFAULT_STR = "Default";
>     private static final int[] OF_TREES_VALUES = new int[] {0, 1, 4, 2};
>     private static final int[] OF_DYNAMIC_LIGHTS = new int[] {3, 1, 2};
>     private static final String[] KEYS_DYNAMIC_LIGHTS = new String[] {"options.off", "options.graphics.fast", "options.graphics.fancy"};
>     public KeyBinding ofKeyBindZoom;
>     private File optionsFileOF;
>     private boolean needsResourceRefresh = false;
188a289
>         this.setForgeKeybindProperties();
206a308,313
>         this.optionsFileOF = new File(optionsFileIn, "optionsof.txt");
>         this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
>         this.ofKeyBindZoom = new KeyBinding("of.key.zoom", 46, "key.categories.misc");
>         this.keyBindings = (KeyBinding[])ArrayUtils.add(this.keyBindings, this.ofKeyBindZoom);
>         GameSettings.Options.RENDER_DISTANCE.setValueMax(32.0F);
>         this.renderDistanceChunks = 8;
207a315
>         Config.initGameSettings(this);
211a320
>         this.setForgeKeybindProperties();
277a387,388
>         this.setOptionFloatValueOF(settingsOption, value);
> 
295a407,415
>             this.enableVsync = false;
> 
>             if (this.limitFramerate <= 0)
>             {
>                 this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
>                 this.enableVsync = true;
>             }
> 
>             this.updateVSync();
353a474,475
>         this.setOptionValueOF(settingsOption, value);
> 
371c493,518
<             this.guiScale = this.guiScale + value & 3;
---
>             this.guiScale += value;
> 
>             if (GuiScreen.isShiftKeyDown())
>             {
>                 this.guiScale = 0;
>             }
> 
>             DisplayMode displaymode = Config.getLargestDisplayMode();
>             int i = displaymode.getWidth() / 320;
>             int j = displaymode.getHeight() / 240;
>             int k = Math.min(i, j);
> 
>             if (this.guiScale < 0)
>             {
>                 this.guiScale = k - 1;
>             }
> 
>             if (this.mc.isUnicode() && this.guiScale % 2 != 0)
>             {
>                 this.guiScale += value;
>             }
> 
>             if (this.guiScale < 0 || this.guiScale >= k)
>             {
>                 this.guiScale = 0;
>             }
401a549,554
>             if (!this.anaglyph && Config.isShaders())
>             {
>                 Config.showGuiMessage(Lang.get("of.message.an.shaders1"), Lang.get("of.message.an.shaders2"));
>                 return;
>             }
> 
408a562
>             this.updateRenderClouds();
519c673,679
<         if (settingOption == GameSettings.Options.FOV)
---
>         float f = this.getOptionFloatValueOF(settingOption);
> 
>         if (f != Float.MAX_VALUE)
>         {
>             return f;
>         }
>         else if (settingOption == GameSettings.Options.FOV)
654c814
<         String s = I18n.format(settingOption.getEnumString()) + ": ";
---
>         String s = this.getKeyBindingOF(settingOption);
656c816,820
<         if (settingOption.getEnumFloat())
---
>         if (s != null)
>         {
>             return s;
>         }
>         else
658,659c822
<             float f1 = this.getOptionFloatValue(settingOption);
<             float f = settingOption.normalizeValue(f1);
---
>             String s1 = I18n.format(settingOption.getEnumString()) + ": ";
661c824
<             if (settingOption == GameSettings.Options.SENSITIVITY)
---
>             if (settingOption.getEnumFloat())
663c826,829
<                 if (f == 0.0F)
---
>                 float f1 = this.getOptionFloatValue(settingOption);
>                 float f = settingOption.normalizeValue(f1);
> 
>                 if (settingOption == GameSettings.Options.SENSITIVITY)
665c831,838
<                     return s + I18n.format("options.sensitivity.min");
---
>                     if (f == 0.0F)
>                     {
>                         return s1 + I18n.format("options.sensitivity.min");
>                     }
>                     else
>                     {
>                         return f == 1.0F ? s1 + I18n.format("options.sensitivity.max") : s1 + (int)(f * 200.0F) + "%";
>                     }
667c840
<                 else
---
>                 else if (settingOption == GameSettings.Options.FOV)
669c842,849
<                     return f == 1.0F ? s + I18n.format("options.sensitivity.max") : s + (int)(f * 200.0F) + "%";
---
>                     if (f1 == 70.0F)
>                     {
>                         return s1 + I18n.format("options.fov.min");
>                     }
>                     else
>                     {
>                         return f1 == 110.0F ? s1 + I18n.format("options.fov.max") : s1 + (int)f1;
>                     }
671,674c851
<             }
<             else if (settingOption == GameSettings.Options.FOV)
<             {
<                 if (f1 == 70.0F)
---
>                 else if (settingOption == GameSettings.Options.FRAMERATE_LIMIT)
676c853
<                     return s + I18n.format("options.fov.min");
---
>                     return f1 == settingOption.valueMax ? s1 + I18n.format("options.framerateLimit.max") : s1 + I18n.format("options.framerate", (int)f1);
678c855
<                 else
---
>                 else if (settingOption == GameSettings.Options.RENDER_CLOUDS)
680c857
<                     return f1 == 110.0F ? s + I18n.format("options.fov.max") : s + (int)f1;
---
>                     return f1 == settingOption.valueMin ? s1 + I18n.format("options.cloudHeight.min") : s1 + ((int)f1 + 128);
682,693c859,894
<             }
<             else if (settingOption == GameSettings.Options.FRAMERATE_LIMIT)
<             {
<                 return f1 == settingOption.valueMax ? s + I18n.format("options.framerateLimit.max") : s + I18n.format("options.framerate", (int)f1);
<             }
<             else if (settingOption == GameSettings.Options.RENDER_CLOUDS)
<             {
<                 return f1 == settingOption.valueMin ? s + I18n.format("options.cloudHeight.min") : s + ((int)f1 + 128);
<             }
<             else if (settingOption == GameSettings.Options.GAMMA)
<             {
<                 if (f == 0.0F)
---
>                 else if (settingOption == GameSettings.Options.GAMMA)
>                 {
>                     if (f == 0.0F)
>                     {
>                         return s1 + I18n.format("options.gamma.min");
>                     }
>                     else
>                     {
>                         return f == 1.0F ? s1 + I18n.format("options.gamma.max") : s1 + "+" + (int)(f * 100.0F) + "%";
>                     }
>                 }
>                 else if (settingOption == GameSettings.Options.SATURATION)
>                 {
>                     return s1 + (int)(f * 400.0F) + "%";
>                 }
>                 else if (settingOption == GameSettings.Options.CHAT_OPACITY)
>                 {
>                     return s1 + (int)(f * 90.0F + 10.0F) + "%";
>                 }
>                 else if (settingOption == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED)
>                 {
>                     return s1 + GuiNewChat.calculateChatboxHeight(f) + "px";
>                 }
>                 else if (settingOption == GameSettings.Options.CHAT_HEIGHT_FOCUSED)
>                 {
>                     return s1 + GuiNewChat.calculateChatboxHeight(f) + "px";
>                 }
>                 else if (settingOption == GameSettings.Options.CHAT_WIDTH)
>                 {
>                     return s1 + GuiNewChat.calculateChatboxWidth(f) + "px";
>                 }
>                 else if (settingOption == GameSettings.Options.RENDER_DISTANCE)
>                 {
>                     return s1 + I18n.format("options.chunks", (int)f1);
>                 }
>                 else if (settingOption == GameSettings.Options.MIPMAP_LEVELS)
695c896
<                     return s + I18n.format("options.gamma.min");
---
>                     return f1 == 0.0F ? s1 + I18n.format("options.off") : s1 + (int)f1;
699c900
<                     return f == 1.0F ? s + I18n.format("options.gamma.max") : s + "+" + (int)(f * 100.0F) + "%";
---
>                     return f == 0.0F ? s1 + I18n.format("options.off") : s1 + (int)(f * 100.0F) + "%";
702c903
<             else if (settingOption == GameSettings.Options.SATURATION)
---
>             else if (settingOption.getEnumBoolean())
704c905,906
<                 return s + (int)(f * 400.0F) + "%";
---
>                 boolean flag = this.getOptionOrdinalValue(settingOption);
>                 return flag ? s1 + I18n.format("options.on") : s1 + I18n.format("options.off");
706c908
<             else if (settingOption == GameSettings.Options.CHAT_OPACITY)
---
>             else if (settingOption == GameSettings.Options.MAIN_HAND)
708c910
<                 return s + (int)(f * 90.0F + 10.0F) + "%";
---
>                 return s1 + this.mainHand;
710c912
<             else if (settingOption == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED)
---
>             else if (settingOption == GameSettings.Options.GUI_SCALE)
712c914
<                 return s + GuiNewChat.calculateChatboxHeight(f) + "px";
---
>                 return this.guiScale >= GUISCALES.length ? s1 + this.guiScale + "x" : s1 + getTranslation(GUISCALES, this.guiScale);
714c916
<             else if (settingOption == GameSettings.Options.CHAT_HEIGHT_FOCUSED)
---
>             else if (settingOption == GameSettings.Options.CHAT_VISIBILITY)
716c918
<                 return s + GuiNewChat.calculateChatboxHeight(f) + "px";
---
>                 return s1 + I18n.format(this.chatVisibility.getResourceKey());
718c920
<             else if (settingOption == GameSettings.Options.CHAT_WIDTH)
---
>             else if (settingOption == GameSettings.Options.PARTICLES)
720c922
<                 return s + GuiNewChat.calculateChatboxWidth(f) + "px";
---
>                 return s1 + getTranslation(PARTICLES, this.particleSetting);
722c924
<             else if (settingOption == GameSettings.Options.RENDER_DISTANCE)
---
>             else if (settingOption == GameSettings.Options.AMBIENT_OCCLUSION)
724c926
<                 return s + I18n.format("options.chunks", (int)f1);
---
>                 return s1 + getTranslation(AMBIENT_OCCLUSIONS, this.ambientOcclusion);
726c928
<             else if (settingOption == GameSettings.Options.MIPMAP_LEVELS)
---
>             else if (settingOption == GameSettings.Options.RENDER_CLOUDS)
728c930
<                 return f1 == 0.0F ? s + I18n.format("options.off") : s + (int)f1;
---
>                 return s1 + getTranslation(CLOUDS_TYPES, this.clouds);
730c932
<             else
---
>             else if (settingOption == GameSettings.Options.GRAPHICS)
732c934,942
<                 return f == 0.0F ? s + I18n.format("options.off") : s + (int)(f * 100.0F) + "%";
---
>                 if (this.fancyGraphics)
>                 {
>                     return s1 + I18n.format("options.graphics.fancy");
>                 }
>                 else
>                 {
>                     String s2 = "options.graphics.fast";
>                     return s1 + I18n.format("options.graphics.fast");
>                 }
734,766c944
<         }
<         else if (settingOption.getEnumBoolean())
<         {
<             boolean flag = this.getOptionOrdinalValue(settingOption);
<             return flag ? s + I18n.format("options.on") : s + I18n.format("options.off");
<         }
<         else if (settingOption == GameSettings.Options.MAIN_HAND)
<         {
<             return s + this.mainHand;
<         }
<         else if (settingOption == GameSettings.Options.GUI_SCALE)
<         {
<             return s + getTranslation(GUISCALES, this.guiScale);
<         }
<         else if (settingOption == GameSettings.Options.CHAT_VISIBILITY)
<         {
<             return s + I18n.format(this.chatVisibility.getResourceKey());
<         }
<         else if (settingOption == GameSettings.Options.PARTICLES)
<         {
<             return s + getTranslation(PARTICLES, this.particleSetting);
<         }
<         else if (settingOption == GameSettings.Options.AMBIENT_OCCLUSION)
<         {
<             return s + getTranslation(AMBIENT_OCCLUSIONS, this.ambientOcclusion);
<         }
<         else if (settingOption == GameSettings.Options.RENDER_CLOUDS)
<         {
<             return s + getTranslation(CLOUDS_TYPES, this.clouds);
<         }
<         else if (settingOption == GameSettings.Options.GRAPHICS)
<         {
<             if (this.fancyGraphics)
---
>             else if (settingOption == GameSettings.Options.ATTACK_INDICATOR)
768c946,950
<                 return s + I18n.format("options.graphics.fancy");
---
>                 return s1 + getTranslation(ATTACK_INDICATORS, this.attackIndicator);
>             }
>             else if (settingOption == GameSettings.Options.NARRATOR)
>             {
>                 return NarratorChatListener.field_193643_a.func_193640_a() ? s1 + getTranslation(field_193632_b, this.field_192571_R) : s1 + I18n.format("options.narrator.notavailable");
772,773c954
<                 String s1 = "options.graphics.fast";
<                 return s + I18n.format("options.graphics.fast");
---
>                 return s1;
776,787d956
<         else if (settingOption == GameSettings.Options.ATTACK_INDICATOR)
<         {
<             return s + getTranslation(ATTACK_INDICATORS, this.attackIndicator);
<         }
<         else if (settingOption == GameSettings.Options.NARRATOR)
<         {
<             return NarratorChatListener.field_193643_a.func_193640_a() ? s + getTranslation(field_193632_b, this.field_192571_R) : s + I18n.format("options.narrator.notavailable");
<         }
<         else
<         {
<             return s;
<         }
803c972
<             List<String> list = IOUtils.readLines(new FileInputStream(this.optionsFile));
---
>             List<String> list = IOUtils.readLines(new FileInputStream(this.optionsFile), StandardCharsets.UTF_8);
813c982
<                 catch (Exception var10)
---
>                 catch (Exception var12)
879a1049,1058
> 
>                         if (this.enableVsync)
>                         {
>                             this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
>                         }
> 
>                         if (this.limitFramerate <= 0)
>                         {
>                             this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
>                         }
894a1074
>                         this.updateRenderClouds();
1017a1198,1204
> 
>                         if (this.enableVsync)
>                         {
>                             this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
>                         }
> 
>                         this.updateVSync();
1139c1326,1343
<                             keybinding.setKeyCode(Integer.parseInt(s2));
---
>                             if (Reflector.KeyModifier_valueFromString.exists())
>                             {
>                                 if (s2.indexOf(58) != -1)
>                                 {
>                                     String[] astring = s2.split(":");
>                                     Object object = Reflector.call(Reflector.KeyModifier_valueFromString, astring[1]);
>                                     Reflector.call(keybinding, Reflector.ForgeKeyBinding_setKeyModifierAndCode, object, Integer.parseInt(astring[0]));
>                                 }
>                                 else
>                                 {
>                                     Object object1 = Reflector.getFieldValue(Reflector.KeyModifier_NONE);
>                                     Reflector.call(keybinding, Reflector.ForgeKeyBinding_setKeyModifierAndCode, object1, Integer.parseInt(s2));
>                                 }
>                             }
>                             else
>                             {
>                                 keybinding.setKeyCode(Integer.parseInt(s2));
>                             }
1159c1363
<                 catch (Exception var11)
---
>                 catch (Exception exception1)
1161a1366
>                     exception1.printStackTrace();
1167c1372
<         catch (Exception exception)
---
>         catch (Exception exception1)
1169c1374
<             LOGGER.error("Failed to load options", (Throwable)exception);
---
>             LOGGER.error("Failed to load options", (Throwable)exception1);
1170a1376,1377
> 
>         this.loadOfOptions();
1208a1416,1425
>         if (Reflector.FMLClientHandler.exists())
>         {
>             Object object = Reflector.call(Reflector.FMLClientHandler_instance);
> 
>             if (object != null && Reflector.callBoolean(object, Reflector.FMLClientHandler_isLoading))
>             {
>                 return;
>             }
>         }
> 
1214c1431
<             printwriter.println("version:1139");
---
>             printwriter.println("version:1343");
1285c1502,1512
<                 printwriter.println("key_" + keybinding.getKeyDescription() + ":" + keybinding.getKeyCode());
---
>                 if (Reflector.ForgeKeyBinding_getKeyModifier.exists())
>                 {
>                     String s = "key_" + keybinding.getKeyDescription() + ":" + keybinding.getKeyCode();
>                     Object object1 = Reflector.call(keybinding, Reflector.ForgeKeyBinding_getKeyModifier);
>                     Object object2 = Reflector.getFieldValue(Reflector.KeyModifier_NONE);
>                     printwriter.println(object1 != object2 ? s + ":" + object1 : s);
>                 }
>                 else
>                 {
>                     printwriter.println("key_" + keybinding.getKeyDescription() + ":" + keybinding.getKeyCode());
>                 }
1306a1534
>         this.saveOfOptions();
1387a1616,3462
>     private void setOptionFloatValueOF(GameSettings.Options p_setOptionFloatValueOF_1_, float p_setOptionFloatValueOF_2_)
>     {
>         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.CLOUD_HEIGHT)
>         {
>             this.ofCloudsHeight = p_setOptionFloatValueOF_2_;
>             this.mc.renderGlobal.resetClouds();
>         }
> 
>         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AO_LEVEL)
>         {
>             this.ofAoLevel = p_setOptionFloatValueOF_2_;
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AA_LEVEL)
>         {
>             int i = (int)p_setOptionFloatValueOF_2_;
> 
>             if (i > 0 && Config.isShaders())
>             {
>                 Config.showGuiMessage(Lang.get("of.message.aa.shaders1"), Lang.get("of.message.aa.shaders2"));
>                 return;
>             }
> 
>             int[] aint = new int[] {0, 2, 4, 6, 8, 12, 16};
>             this.ofAaLevel = 0;
> 
>             for (int j = 0; j < aint.length; ++j)
>             {
>                 if (i >= aint[j])
>                 {
>                     this.ofAaLevel = aint[j];
>                 }
>             }
> 
>             this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
>         }
> 
>         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AF_LEVEL)
>         {
>             int k = (int)p_setOptionFloatValueOF_2_;
> 
>             if (k > 1 && Config.isShaders())
>             {
>                 Config.showGuiMessage(Lang.get("of.message.af.shaders1"), Lang.get("of.message.af.shaders2"));
>                 return;
>             }
> 
>             for (this.ofAfLevel = 1; this.ofAfLevel * 2 <= k; this.ofAfLevel *= 2)
>             {
>                 ;
>             }
> 
>             this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
>             this.mc.refreshResources();
>         }
> 
>         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.MIPMAP_TYPE)
>         {
>             int l = (int)p_setOptionFloatValueOF_2_;
>             this.ofMipmapType = Config.limit(l, 0, 3);
>             this.mc.refreshResources();
>         }
> 
>         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
>         {
>             int i1 = (int)p_setOptionFloatValueOF_2_ - 1;
>             String[] astring = Config.getDisplayModeNames();
> 
>             if (i1 < 0 || i1 >= astring.length)
>             {
>                 this.ofFullscreenMode = "Default";
>                 return;
>             }
> 
>             this.ofFullscreenMode = astring[i1];
>         }
>     }
> 
>     private float getOptionFloatValueOF(GameSettings.Options p_getOptionFloatValueOF_1_)
>     {
>         if (p_getOptionFloatValueOF_1_ == GameSettings.Options.CLOUD_HEIGHT)
>         {
>             return this.ofCloudsHeight;
>         }
>         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.AO_LEVEL)
>         {
>             return this.ofAoLevel;
>         }
>         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.AA_LEVEL)
>         {
>             return (float)this.ofAaLevel;
>         }
>         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.AF_LEVEL)
>         {
>             return (float)this.ofAfLevel;
>         }
>         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.MIPMAP_TYPE)
>         {
>             return (float)this.ofMipmapType;
>         }
>         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.FRAMERATE_LIMIT)
>         {
>             return (float)this.limitFramerate == GameSettings.Options.FRAMERATE_LIMIT.getValueMax() && this.enableVsync ? 0.0F : (float)this.limitFramerate;
>         }
>         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
>         {
>             if (this.ofFullscreenMode.equals("Default"))
>             {
>                 return 0.0F;
>             }
>             else
>             {
>                 List list = Arrays.asList(Config.getDisplayModeNames());
>                 int i = list.indexOf(this.ofFullscreenMode);
>                 return i < 0 ? 0.0F : (float)(i + 1);
>             }
>         }
>         else
>         {
>             return Float.MAX_VALUE;
>         }
>     }
> 
>     private void setOptionValueOF(GameSettings.Options p_setOptionValueOF_1_, int p_setOptionValueOF_2_)
>     {
>         if (p_setOptionValueOF_1_ == GameSettings.Options.FOG_FANCY)
>         {
>             switch (this.ofFogType)
>             {
>                 case 1:
>                     this.ofFogType = 2;
> 
>                     if (!Config.isFancyFogAvailable())
>                     {
>                         this.ofFogType = 3;
>                     }
> 
>                     break;
> 
>                 case 2:
>                     this.ofFogType = 3;
>                     break;
> 
>                 case 3:
>                     this.ofFogType = 1;
>                     break;
> 
>                 default:
>                     this.ofFogType = 1;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.FOG_START)
>         {
>             this.ofFogStart += 0.2F;
> 
>             if (this.ofFogStart > 0.81F)
>             {
>                 this.ofFogStart = 0.2F;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_FPS)
>         {
>             this.ofSmoothFps = !this.ofSmoothFps;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_WORLD)
>         {
>             this.ofSmoothWorld = !this.ofSmoothWorld;
>             Config.updateThreadPriorities();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CLOUDS)
>         {
>             ++this.ofClouds;
> 
>             if (this.ofClouds > 3)
>             {
>                 this.ofClouds = 0;
>             }
> 
>             this.updateRenderClouds();
>             this.mc.renderGlobal.resetClouds();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.TREES)
>         {
>             this.ofTrees = nextValue(this.ofTrees, OF_TREES_VALUES);
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.DROPPED_ITEMS)
>         {
>             ++this.ofDroppedItems;
> 
>             if (this.ofDroppedItems > 2)
>             {
>                 this.ofDroppedItems = 0;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.RAIN)
>         {
>             ++this.ofRain;
> 
>             if (this.ofRain > 3)
>             {
>                 this.ofRain = 0;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_WATER)
>         {
>             ++this.ofAnimatedWater;
> 
>             if (this.ofAnimatedWater == 1)
>             {
>                 ++this.ofAnimatedWater;
>             }
> 
>             if (this.ofAnimatedWater > 2)
>             {
>                 this.ofAnimatedWater = 0;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_LAVA)
>         {
>             ++this.ofAnimatedLava;
> 
>             if (this.ofAnimatedLava == 1)
>             {
>                 ++this.ofAnimatedLava;
>             }
> 
>             if (this.ofAnimatedLava > 2)
>             {
>                 this.ofAnimatedLava = 0;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_FIRE)
>         {
>             this.ofAnimatedFire = !this.ofAnimatedFire;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_PORTAL)
>         {
>             this.ofAnimatedPortal = !this.ofAnimatedPortal;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_REDSTONE)
>         {
>             this.ofAnimatedRedstone = !this.ofAnimatedRedstone;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_EXPLOSION)
>         {
>             this.ofAnimatedExplosion = !this.ofAnimatedExplosion;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_FLAME)
>         {
>             this.ofAnimatedFlame = !this.ofAnimatedFlame;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_SMOKE)
>         {
>             this.ofAnimatedSmoke = !this.ofAnimatedSmoke;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.VOID_PARTICLES)
>         {
>             this.ofVoidParticles = !this.ofVoidParticles;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.WATER_PARTICLES)
>         {
>             this.ofWaterParticles = !this.ofWaterParticles;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.PORTAL_PARTICLES)
>         {
>             this.ofPortalParticles = !this.ofPortalParticles;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.POTION_PARTICLES)
>         {
>             this.ofPotionParticles = !this.ofPotionParticles;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.FIREWORK_PARTICLES)
>         {
>             this.ofFireworkParticles = !this.ofFireworkParticles;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.DRIPPING_WATER_LAVA)
>         {
>             this.ofDrippingWaterLava = !this.ofDrippingWaterLava;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_TERRAIN)
>         {
>             this.ofAnimatedTerrain = !this.ofAnimatedTerrain;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_TEXTURES)
>         {
>             this.ofAnimatedTextures = !this.ofAnimatedTextures;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.RAIN_SPLASH)
>         {
>             this.ofRainSplash = !this.ofRainSplash;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.LAGOMETER)
>         {
>             this.ofLagometer = !this.ofLagometer;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.SHOW_FPS)
>         {
>             this.ofShowFps = !this.ofShowFps;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.AUTOSAVE_TICKS)
>         {
>             this.ofAutoSaveTicks *= 10;
> 
>             if (this.ofAutoSaveTicks > 40000)
>             {
>                 this.ofAutoSaveTicks = 40;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.BETTER_GRASS)
>         {
>             ++this.ofBetterGrass;
> 
>             if (this.ofBetterGrass > 3)
>             {
>                 this.ofBetterGrass = 1;
>             }
> 
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CONNECTED_TEXTURES)
>         {
>             ++this.ofConnectedTextures;
> 
>             if (this.ofConnectedTextures > 3)
>             {
>                 this.ofConnectedTextures = 1;
>             }
> 
>             if (this.ofConnectedTextures == 2)
>             {
>                 this.mc.renderGlobal.loadRenderers();
>             }
>             else
>             {
>                 this.mc.refreshResources();
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.WEATHER)
>         {
>             this.ofWeather = !this.ofWeather;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.SKY)
>         {
>             this.ofSky = !this.ofSky;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.STARS)
>         {
>             this.ofStars = !this.ofStars;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.SUN_MOON)
>         {
>             this.ofSunMoon = !this.ofSunMoon;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.VIGNETTE)
>         {
>             ++this.ofVignette;
> 
>             if (this.ofVignette > 2)
>             {
>                 this.ofVignette = 0;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CHUNK_UPDATES)
>         {
>             ++this.ofChunkUpdates;
> 
>             if (this.ofChunkUpdates > 5)
>             {
>                 this.ofChunkUpdates = 1;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CHUNK_UPDATES_DYNAMIC)
>         {
>             this.ofChunkUpdatesDynamic = !this.ofChunkUpdatesDynamic;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.TIME)
>         {
>             ++this.ofTime;
> 
>             if (this.ofTime > 2)
>             {
>                 this.ofTime = 0;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CLEAR_WATER)
>         {
>             this.ofClearWater = !this.ofClearWater;
>             this.updateWaterOpacity();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.PROFILER)
>         {
>             this.ofProfiler = !this.ofProfiler;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.BETTER_SNOW)
>         {
>             this.ofBetterSnow = !this.ofBetterSnow;
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.SWAMP_COLORS)
>         {
>             this.ofSwampColors = !this.ofSwampColors;
>             CustomColors.updateUseDefaultGrassFoliageColors();
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.RANDOM_MOBS)
>         {
>             this.ofRandomMobs = !this.ofRandomMobs;
>             RandomMobs.resetTextures();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_BIOMES)
>         {
>             this.ofSmoothBiomes = !this.ofSmoothBiomes;
>             CustomColors.updateUseDefaultGrassFoliageColors();
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_FONTS)
>         {
>             this.ofCustomFonts = !this.ofCustomFonts;
>             this.mc.fontRendererObj.onResourceManagerReload(Config.getResourceManager());
>             this.mc.standardGalacticFontRenderer.onResourceManagerReload(Config.getResourceManager());
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_COLORS)
>         {
>             this.ofCustomColors = !this.ofCustomColors;
>             CustomColors.update();
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_ITEMS)
>         {
>             this.ofCustomItems = !this.ofCustomItems;
>             this.mc.refreshResources();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_SKY)
>         {
>             this.ofCustomSky = !this.ofCustomSky;
>             CustomSky.update();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.SHOW_CAPES)
>         {
>             this.ofShowCapes = !this.ofShowCapes;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.NATURAL_TEXTURES)
>         {
>             this.ofNaturalTextures = !this.ofNaturalTextures;
>             NaturalTextures.update();
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_MATH)
>         {
>             this.ofFastMath = !this.ofFastMath;
>             MathHelper.fastMath = this.ofFastMath;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_RENDER)
>         {
>             if (!this.ofFastRender && Config.isShaders())
>             {
>                 Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
>                 return;
>             }
> 
>             this.ofFastRender = !this.ofFastRender;
> 
>             if (this.ofFastRender)
>             {
>                 this.mc.entityRenderer.stopUseShader();
>             }
> 
>             Config.updateFramebufferSize();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.TRANSLUCENT_BLOCKS)
>         {
>             if (this.ofTranslucentBlocks == 0)
>             {
>                 this.ofTranslucentBlocks = 1;
>             }
>             else if (this.ofTranslucentBlocks == 1)
>             {
>                 this.ofTranslucentBlocks = 2;
>             }
>             else if (this.ofTranslucentBlocks == 2)
>             {
>                 this.ofTranslucentBlocks = 0;
>             }
>             else
>             {
>                 this.ofTranslucentBlocks = 0;
>             }
> 
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.LAZY_CHUNK_LOADING)
>         {
>             this.ofLazyChunkLoading = !this.ofLazyChunkLoading;
>             Config.updateAvailableProcessors();
> 
>             if (!Config.isSingleProcessor())
>             {
>                 this.ofLazyChunkLoading = false;
>             }
> 
>             this.mc.renderGlobal.loadRenderers();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_FOV)
>         {
>             this.ofDynamicFov = !this.ofDynamicFov;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ALTERNATE_BLOCKS)
>         {
>             this.ofAlternateBlocks = !this.ofAlternateBlocks;
>             this.mc.refreshResources();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_LIGHTS)
>         {
>             this.ofDynamicLights = nextValue(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
>             DynamicLights.removeLights(this.mc.renderGlobal);
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.SCREENSHOT_SIZE)
>         {
>             ++this.ofScreenshotSize;
> 
>             if (this.ofScreenshotSize > 4)
>             {
>                 this.ofScreenshotSize = 1;
>             }
> 
>             if (!OpenGlHelper.isFramebufferEnabled())
>             {
>                 this.ofScreenshotSize = 1;
>             }
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_ENTITY_MODELS)
>         {
>             this.ofCustomEntityModels = !this.ofCustomEntityModels;
>             this.mc.refreshResources();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_GUIS)
>         {
>             this.ofCustomGuis = !this.ofCustomGuis;
>             CustomGuis.update();
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.HELD_ITEM_TOOLTIPS)
>         {
>             this.heldItemTooltips = !this.heldItemTooltips;
>         }
> 
>         if (p_setOptionValueOF_1_ == GameSettings.Options.ADVANCED_TOOLTIPS)
>         {
>             this.advancedItemTooltips = !this.advancedItemTooltips;
>         }
>     }
> 
>     private String getKeyBindingOF(GameSettings.Options p_getKeyBindingOF_1_)
>     {
>         String s = I18n.format(p_getKeyBindingOF_1_.getEnumString()) + ": ";
> 
> //        if (s == null)
> //        {
> //            s = p_getKeyBindingOF_1_.getEnumString();
> //        }
> 
>         if (p_getKeyBindingOF_1_ == GameSettings.Options.RENDER_DISTANCE)
>         {
>             int l = (int)this.getOptionFloatValue(p_getKeyBindingOF_1_);
>             String s1 = I18n.format("of.options.renderDistance.tiny");
>             int i = 2;
> 
>             if (l >= 4)
>             {
>                 s1 = I18n.format("of.options.renderDistance.short");
>                 i = 4;
>             }
> 
>             if (l >= 8)
>             {
>                 s1 = I18n.format("of.options.renderDistance.normal");
>                 i = 8;
>             }
> 
>             if (l >= 16)
>             {
>                 s1 = I18n.format("of.options.renderDistance.far");
>                 i = 16;
>             }
> 
>             if (l >= 32)
>             {
>                 s1 = Lang.get("of.options.renderDistance.extreme");
>                 i = 32;
>             }
> 
>             int j = this.renderDistanceChunks - i;
>             String s2 = s1;
> 
>             if (j > 0)
>             {
>                 s2 = s1 + "+";
>             }
> 
>             return s + l + " " + s2 + "";
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FOG_FANCY)
>         {
>             switch (this.ofFogType)
>             {
>                 case 1:
>                     return s + Lang.getFast();
> 
>                 case 2:
>                     return s + Lang.getFancy();
> 
>                 case 3:
>                     return s + Lang.getOff();
> 
>                 default:
>                     return s + Lang.getOff();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FOG_START)
>         {
>             return s + this.ofFogStart;
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.MIPMAP_TYPE)
>         {
>             switch (this.ofMipmapType)
>             {
>                 case 0:
>                     return s + Lang.get("of.options.mipmap.nearest");
> 
>                 case 1:
>                     return s + Lang.get("of.options.mipmap.linear");
> 
>                 case 2:
>                     return s + Lang.get("of.options.mipmap.bilinear");
> 
>                 case 3:
>                     return s + Lang.get("of.options.mipmap.trilinear");
> 
>                 default:
>                     return s + "of.options.mipmap.nearest";
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_FPS)
>         {
>             return this.ofSmoothFps ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_WORLD)
>         {
>             return this.ofSmoothWorld ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CLOUDS)
>         {
>             switch (this.ofClouds)
>             {
>                 case 1:
>                     return s + Lang.getFast();
> 
>                 case 2:
>                     return s + Lang.getFancy();
> 
>                 case 3:
>                     return s + Lang.getOff();
> 
>                 default:
>                     return s + Lang.getDefault();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.TREES)
>         {
>             switch (this.ofTrees)
>             {
>                 case 1:
>                     return s + Lang.getFast();
> 
>                 case 2:
>                     return s + Lang.getFancy();
> 
>                 case 3:
>                 default:
>                     return s + Lang.getDefault();
> 
>                 case 4:
>                     return s + Lang.get("of.general.smart");
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DROPPED_ITEMS)
>         {
>             switch (this.ofDroppedItems)
>             {
>                 case 1:
>                     return s + Lang.getFast();
> 
>                 case 2:
>                     return s + Lang.getFancy();
> 
>                 default:
>                     return s + Lang.getDefault();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.RAIN)
>         {
>             switch (this.ofRain)
>             {
>                 case 1:
>                     return s + Lang.getFast();
> 
>                 case 2:
>                     return s + Lang.getFancy();
> 
>                 case 3:
>                     return s + Lang.getOff();
> 
>                 default:
>                     return s + Lang.getDefault();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_WATER)
>         {
>             switch (this.ofAnimatedWater)
>             {
>                 case 1:
>                     return s + Lang.get("of.options.animation.dynamic");
> 
>                 case 2:
>                     return s + Lang.getOff();
> 
>                 default:
>                     return s + Lang.getOn();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_LAVA)
>         {
>             switch (this.ofAnimatedLava)
>             {
>                 case 1:
>                     return s + Lang.get("of.options.animation.dynamic");
> 
>                 case 2:
>                     return s + Lang.getOff();
> 
>                 default:
>                     return s + Lang.getOn();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_FIRE)
>         {
>             return this.ofAnimatedFire ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_PORTAL)
>         {
>             return this.ofAnimatedPortal ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_REDSTONE)
>         {
>             return this.ofAnimatedRedstone ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_EXPLOSION)
>         {
>             return this.ofAnimatedExplosion ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_FLAME)
>         {
>             return this.ofAnimatedFlame ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_SMOKE)
>         {
>             return this.ofAnimatedSmoke ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.VOID_PARTICLES)
>         {
>             return this.ofVoidParticles ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.WATER_PARTICLES)
>         {
>             return this.ofWaterParticles ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.PORTAL_PARTICLES)
>         {
>             return this.ofPortalParticles ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.POTION_PARTICLES)
>         {
>             return this.ofPotionParticles ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FIREWORK_PARTICLES)
>         {
>             return this.ofFireworkParticles ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DRIPPING_WATER_LAVA)
>         {
>             return this.ofDrippingWaterLava ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_TERRAIN)
>         {
>             return this.ofAnimatedTerrain ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_TEXTURES)
>         {
>             return this.ofAnimatedTextures ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.RAIN_SPLASH)
>         {
>             return this.ofRainSplash ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.LAGOMETER)
>         {
>             return this.ofLagometer ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SHOW_FPS)
>         {
>             return this.ofShowFps ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.AUTOSAVE_TICKS)
>         {
>             if (this.ofAutoSaveTicks <= 40)
>             {
>                 return s + Lang.get("of.options.save.default");
>             }
>             else if (this.ofAutoSaveTicks <= 400)
>             {
>                 return s + Lang.get("of.options.save.20s");
>             }
>             else
>             {
>                 return this.ofAutoSaveTicks <= 4000 ? s + Lang.get("of.options.save.3min") : s + Lang.get("of.options.save.30min");
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.BETTER_GRASS)
>         {
>             switch (this.ofBetterGrass)
>             {
>                 case 1:
>                     return s + Lang.getFast();
> 
>                 case 2:
>                     return s + Lang.getFancy();
> 
>                 default:
>                     return s + Lang.getOff();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CONNECTED_TEXTURES)
>         {
>             switch (this.ofConnectedTextures)
>             {
>                 case 1:
>                     return s + Lang.getFast();
> 
>                 case 2:
>                     return s + Lang.getFancy();
> 
>                 default:
>                     return s + Lang.getOff();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.WEATHER)
>         {
>             return this.ofWeather ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SKY)
>         {
>             return this.ofSky ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.STARS)
>         {
>             return this.ofStars ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SUN_MOON)
>         {
>             return this.ofSunMoon ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.VIGNETTE)
>         {
>             switch (this.ofVignette)
>             {
>                 case 1:
>                     return s + Lang.getFast();
> 
>                 case 2:
>                     return s + Lang.getFancy();
> 
>                 default:
>                     return s + Lang.getDefault();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CHUNK_UPDATES)
>         {
>             return s + this.ofChunkUpdates;
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CHUNK_UPDATES_DYNAMIC)
>         {
>             return this.ofChunkUpdatesDynamic ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.TIME)
>         {
>             if (this.ofTime == 1)
>             {
>                 return s + Lang.get("of.options.time.dayOnly");
>             }
>             else
>             {
>                 return this.ofTime == 2 ? s + Lang.get("of.options.time.nightOnly") : s + Lang.getDefault();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CLEAR_WATER)
>         {
>             return this.ofClearWater ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.AA_LEVEL)
>         {
>             String s3 = "";
> 
>             if (this.ofAaLevel != Config.getAntialiasingLevel())
>             {
>                 s3 = " (" + Lang.get("of.general.restart") + ")";
>             }
> 
>             return this.ofAaLevel == 0 ? s + Lang.getOff() + s3 : s + this.ofAaLevel + s3;
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.AF_LEVEL)
>         {
>             return this.ofAfLevel == 1 ? s + Lang.getOff() : s + this.ofAfLevel;
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.PROFILER)
>         {
>             return this.ofProfiler ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.BETTER_SNOW)
>         {
>             return this.ofBetterSnow ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SWAMP_COLORS)
>         {
>             return this.ofSwampColors ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.RANDOM_MOBS)
>         {
>             return this.ofRandomMobs ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_BIOMES)
>         {
>             return this.ofSmoothBiomes ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_FONTS)
>         {
>             return this.ofCustomFonts ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_COLORS)
>         {
>             return this.ofCustomColors ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_SKY)
>         {
>             return this.ofCustomSky ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SHOW_CAPES)
>         {
>             return this.ofShowCapes ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_ITEMS)
>         {
>             return this.ofCustomItems ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.NATURAL_TEXTURES)
>         {
>             return this.ofNaturalTextures ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FAST_MATH)
>         {
>             return this.ofFastMath ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FAST_RENDER)
>         {
>             return this.ofFastRender ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.TRANSLUCENT_BLOCKS)
>         {
>             if (this.ofTranslucentBlocks == 1)
>             {
>                 return s + Lang.getFast();
>             }
>             else
>             {
>                 return this.ofTranslucentBlocks == 2 ? s + Lang.getFancy() : s + Lang.getDefault();
>             }
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.LAZY_CHUNK_LOADING)
>         {
>             return this.ofLazyChunkLoading ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DYNAMIC_FOV)
>         {
>             return this.ofDynamicFov ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ALTERNATE_BLOCKS)
>         {
>             return this.ofAlternateBlocks ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DYNAMIC_LIGHTS)
>         {
>             int k = indexOf(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
>             return s + getTranslation(KEYS_DYNAMIC_LIGHTS, k);
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SCREENSHOT_SIZE)
>         {
>             return this.ofScreenshotSize <= 1 ? s + Lang.getDefault() : s + this.ofScreenshotSize + "x";
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_ENTITY_MODELS)
>         {
>             return this.ofCustomEntityModels ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_GUIS)
>         {
>             return this.ofCustomGuis ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
>         {
>             return this.ofFullscreenMode.equals("Default") ? s + Lang.getDefault() : s + this.ofFullscreenMode;
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.HELD_ITEM_TOOLTIPS)
>         {
>             return this.heldItemTooltips ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ADVANCED_TOOLTIPS)
>         {
>             return this.advancedItemTooltips ? s + Lang.getOn() : s + Lang.getOff();
>         }
>         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FRAMERATE_LIMIT)
>         {
>             float f = this.getOptionFloatValue(p_getKeyBindingOF_1_);
> 
>             if (f == 0.0F)
>             {
>                 return s + Lang.get("of.options.framerateLimit.vsync");
>             }
>             else
>             {
>                 return f == p_getKeyBindingOF_1_.valueMax ? s + I18n.format("options.framerateLimit.max") : s + (int)f + " fps";
>             }
>         }
>         else
>         {
>             return null;
>         }
>     }
> 
>     public void loadOfOptions()
>     {
>         try
>         {
>             File file1 = this.optionsFileOF;
> 
>             if (!file1.exists())
>             {
>                 file1 = this.optionsFile;
>             }
> 
>             if (!file1.exists())
>             {
>                 return;
>             }
> 
>             BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(new FileInputStream(file1), StandardCharsets.UTF_8));
>             String s = "";
> 
>             while ((s = bufferedreader.readLine()) != null)
>             {
>                 try
>                 {
>                     String[] astring = s.split(":");
> 
>                     if (astring[0].equals("ofRenderDistanceChunks") && astring.length >= 2)
>                     {
>                         this.renderDistanceChunks = Integer.valueOf(astring[1]).intValue();
>                         this.renderDistanceChunks = Config.limit(this.renderDistanceChunks, 2, 1024);
>                     }
> 
>                     if (astring[0].equals("ofFogType") && astring.length >= 2)
>                     {
>                         this.ofFogType = Integer.valueOf(astring[1]).intValue();
>                         this.ofFogType = Config.limit(this.ofFogType, 1, 3);
>                     }
> 
>                     if (astring[0].equals("ofFogStart") && astring.length >= 2)
>                     {
>                         this.ofFogStart = Float.valueOf(astring[1]).floatValue();
> 
>                         if (this.ofFogStart < 0.2F)
>                         {
>                             this.ofFogStart = 0.2F;
>                         }
> 
>                         if (this.ofFogStart > 0.81F)
>                         {
>                             this.ofFogStart = 0.8F;
>                         }
>                     }
> 
>                     if (astring[0].equals("ofMipmapType") && astring.length >= 2)
>                     {
>                         this.ofMipmapType = Integer.valueOf(astring[1]).intValue();
>                         this.ofMipmapType = Config.limit(this.ofMipmapType, 0, 3);
>                     }
> 
>                     if (astring[0].equals("ofOcclusionFancy") && astring.length >= 2)
>                     {
>                         this.ofOcclusionFancy = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofSmoothFps") && astring.length >= 2)
>                     {
>                         this.ofSmoothFps = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofSmoothWorld") && astring.length >= 2)
>                     {
>                         this.ofSmoothWorld = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAoLevel") && astring.length >= 2)
>                     {
>                         this.ofAoLevel = Float.valueOf(astring[1]).floatValue();
>                         this.ofAoLevel = Config.limit(this.ofAoLevel, 0.0F, 1.0F);
>                     }
> 
>                     if (astring[0].equals("ofClouds") && astring.length >= 2)
>                     {
>                         this.ofClouds = Integer.valueOf(astring[1]).intValue();
>                         this.ofClouds = Config.limit(this.ofClouds, 0, 3);
>                         this.updateRenderClouds();
>                     }
> 
>                     if (astring[0].equals("ofCloudsHeight") && astring.length >= 2)
>                     {
>                         this.ofCloudsHeight = Float.valueOf(astring[1]).floatValue();
>                         this.ofCloudsHeight = Config.limit(this.ofCloudsHeight, 0.0F, 1.0F);
>                     }
> 
>                     if (astring[0].equals("ofTrees") && astring.length >= 2)
>                     {
>                         this.ofTrees = Integer.valueOf(astring[1]).intValue();
>                         this.ofTrees = limit(this.ofTrees, OF_TREES_VALUES);
>                     }
> 
>                     if (astring[0].equals("ofDroppedItems") && astring.length >= 2)
>                     {
>                         this.ofDroppedItems = Integer.valueOf(astring[1]).intValue();
>                         this.ofDroppedItems = Config.limit(this.ofDroppedItems, 0, 2);
>                     }
> 
>                     if (astring[0].equals("ofRain") && astring.length >= 2)
>                     {
>                         this.ofRain = Integer.valueOf(astring[1]).intValue();
>                         this.ofRain = Config.limit(this.ofRain, 0, 3);
>                     }
> 
>                     if (astring[0].equals("ofAnimatedWater") && astring.length >= 2)
>                     {
>                         this.ofAnimatedWater = Integer.valueOf(astring[1]).intValue();
>                         this.ofAnimatedWater = Config.limit(this.ofAnimatedWater, 0, 2);
>                     }
> 
>                     if (astring[0].equals("ofAnimatedLava") && astring.length >= 2)
>                     {
>                         this.ofAnimatedLava = Integer.valueOf(astring[1]).intValue();
>                         this.ofAnimatedLava = Config.limit(this.ofAnimatedLava, 0, 2);
>                     }
> 
>                     if (astring[0].equals("ofAnimatedFire") && astring.length >= 2)
>                     {
>                         this.ofAnimatedFire = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAnimatedPortal") && astring.length >= 2)
>                     {
>                         this.ofAnimatedPortal = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAnimatedRedstone") && astring.length >= 2)
>                     {
>                         this.ofAnimatedRedstone = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAnimatedExplosion") && astring.length >= 2)
>                     {
>                         this.ofAnimatedExplosion = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAnimatedFlame") && astring.length >= 2)
>                     {
>                         this.ofAnimatedFlame = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAnimatedSmoke") && astring.length >= 2)
>                     {
>                         this.ofAnimatedSmoke = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofVoidParticles") && astring.length >= 2)
>                     {
>                         this.ofVoidParticles = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofWaterParticles") && astring.length >= 2)
>                     {
>                         this.ofWaterParticles = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofPortalParticles") && astring.length >= 2)
>                     {
>                         this.ofPortalParticles = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofPotionParticles") && astring.length >= 2)
>                     {
>                         this.ofPotionParticles = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofFireworkParticles") && astring.length >= 2)
>                     {
>                         this.ofFireworkParticles = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofDrippingWaterLava") && astring.length >= 2)
>                     {
>                         this.ofDrippingWaterLava = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAnimatedTerrain") && astring.length >= 2)
>                     {
>                         this.ofAnimatedTerrain = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAnimatedTextures") && astring.length >= 2)
>                     {
>                         this.ofAnimatedTextures = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofRainSplash") && astring.length >= 2)
>                     {
>                         this.ofRainSplash = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofLagometer") && astring.length >= 2)
>                     {
>                         this.ofLagometer = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofShowFps") && astring.length >= 2)
>                     {
>                         this.ofShowFps = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAutoSaveTicks") && astring.length >= 2)
>                     {
>                         this.ofAutoSaveTicks = Integer.valueOf(astring[1]).intValue();
>                         this.ofAutoSaveTicks = Config.limit(this.ofAutoSaveTicks, 40, 40000);
>                     }
> 
>                     if (astring[0].equals("ofBetterGrass") && astring.length >= 2)
>                     {
>                         this.ofBetterGrass = Integer.valueOf(astring[1]).intValue();
>                         this.ofBetterGrass = Config.limit(this.ofBetterGrass, 1, 3);
>                     }
> 
>                     if (astring[0].equals("ofConnectedTextures") && astring.length >= 2)
>                     {
>                         this.ofConnectedTextures = Integer.valueOf(astring[1]).intValue();
>                         this.ofConnectedTextures = Config.limit(this.ofConnectedTextures, 1, 3);
>                     }
> 
>                     if (astring[0].equals("ofWeather") && astring.length >= 2)
>                     {
>                         this.ofWeather = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofSky") && astring.length >= 2)
>                     {
>                         this.ofSky = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofStars") && astring.length >= 2)
>                     {
>                         this.ofStars = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofSunMoon") && astring.length >= 2)
>                     {
>                         this.ofSunMoon = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofVignette") && astring.length >= 2)
>                     {
>                         this.ofVignette = Integer.valueOf(astring[1]).intValue();
>                         this.ofVignette = Config.limit(this.ofVignette, 0, 2);
>                     }
> 
>                     if (astring[0].equals("ofChunkUpdates") && astring.length >= 2)
>                     {
>                         this.ofChunkUpdates = Integer.valueOf(astring[1]).intValue();
>                         this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 5);
>                     }
> 
>                     if (astring[0].equals("ofChunkUpdatesDynamic") && astring.length >= 2)
>                     {
>                         this.ofChunkUpdatesDynamic = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofTime") && astring.length >= 2)
>                     {
>                         this.ofTime = Integer.valueOf(astring[1]).intValue();
>                         this.ofTime = Config.limit(this.ofTime, 0, 2);
>                     }
> 
>                     if (astring[0].equals("ofClearWater") && astring.length >= 2)
>                     {
>                         this.ofClearWater = Boolean.valueOf(astring[1]).booleanValue();
>                         this.updateWaterOpacity();
>                     }
> 
>                     if (astring[0].equals("ofAaLevel") && astring.length >= 2)
>                     {
>                         this.ofAaLevel = Integer.valueOf(astring[1]).intValue();
>                         this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
>                     }
> 
>                     if (astring[0].equals("ofAfLevel") && astring.length >= 2)
>                     {
>                         this.ofAfLevel = Integer.valueOf(astring[1]).intValue();
>                         this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
>                     }
> 
>                     if (astring[0].equals("ofProfiler") && astring.length >= 2)
>                     {
>                         this.ofProfiler = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofBetterSnow") && astring.length >= 2)
>                     {
>                         this.ofBetterSnow = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofSwampColors") && astring.length >= 2)
>                     {
>                         this.ofSwampColors = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofRandomMobs") && astring.length >= 2)
>                     {
>                         this.ofRandomMobs = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofSmoothBiomes") && astring.length >= 2)
>                     {
>                         this.ofSmoothBiomes = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofCustomFonts") && astring.length >= 2)
>                     {
>                         this.ofCustomFonts = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofCustomColors") && astring.length >= 2)
>                     {
>                         this.ofCustomColors = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofCustomItems") && astring.length >= 2)
>                     {
>                         this.ofCustomItems = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofCustomSky") && astring.length >= 2)
>                     {
>                         this.ofCustomSky = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofShowCapes") && astring.length >= 2)
>                     {
>                         this.ofShowCapes = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofNaturalTextures") && astring.length >= 2)
>                     {
>                         this.ofNaturalTextures = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofLazyChunkLoading") && astring.length >= 2)
>                     {
>                         this.ofLazyChunkLoading = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofDynamicFov") && astring.length >= 2)
>                     {
>                         this.ofDynamicFov = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofAlternateBlocks") && astring.length >= 2)
>                     {
>                         this.ofAlternateBlocks = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofDynamicLights") && astring.length >= 2)
>                     {
>                         this.ofDynamicLights = Integer.valueOf(astring[1]).intValue();
>                         this.ofDynamicLights = limit(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
>                     }
> 
>                     if (astring[0].equals("ofScreenshotSize") && astring.length >= 2)
>                     {
>                         this.ofScreenshotSize = Integer.valueOf(astring[1]).intValue();
>                         this.ofScreenshotSize = Config.limit(this.ofScreenshotSize, 1, 4);
>                     }
> 
>                     if (astring[0].equals("ofCustomEntityModels") && astring.length >= 2)
>                     {
>                         this.ofCustomEntityModels = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofCustomGuis") && astring.length >= 2)
>                     {
>                         this.ofCustomGuis = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofFullscreenMode") && astring.length >= 2)
>                     {
>                         this.ofFullscreenMode = astring[1];
>                     }
> 
>                     if (astring[0].equals("ofFastMath") && astring.length >= 2)
>                     {
>                         this.ofFastMath = Boolean.valueOf(astring[1]).booleanValue();
>                         MathHelper.fastMath = this.ofFastMath;
>                     }
> 
>                     if (astring[0].equals("ofFastRender") && astring.length >= 2)
>                     {
>                         this.ofFastRender = Boolean.valueOf(astring[1]).booleanValue();
>                     }
> 
>                     if (astring[0].equals("ofTranslucentBlocks") && astring.length >= 2)
>                     {
>                         this.ofTranslucentBlocks = Integer.valueOf(astring[1]).intValue();
>                         this.ofTranslucentBlocks = Config.limit(this.ofTranslucentBlocks, 0, 2);
>                     }
> 
>                     if (astring[0].equals("key_" + this.ofKeyBindZoom.getKeyDescription()))
>                     {
>                         this.ofKeyBindZoom.setKeyCode(Integer.parseInt(astring[1]));
>                     }
>                 }
>                 catch (Exception exception1)
>                 {
>                     Config.dbg("Skipping bad option: " + s);
>                     exception1.printStackTrace();
>                 }
>             }
> 
>             KeyBinding.resetKeyBindingArrayAndHash();
>             bufferedreader.close();
>         }
>         catch (Exception exception11)
>         {
>             Config.warn("Failed to load options");
>             exception11.printStackTrace();
>         }
>     }
> 
>     public void saveOfOptions()
>     {
>         try
>         {
>             PrintWriter printwriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.optionsFileOF), StandardCharsets.UTF_8));
>             printwriter.println("ofRenderDistanceChunks:" + this.renderDistanceChunks);
>             printwriter.println("ofFogType:" + this.ofFogType);
>             printwriter.println("ofFogStart:" + this.ofFogStart);
>             printwriter.println("ofMipmapType:" + this.ofMipmapType);
>             printwriter.println("ofOcclusionFancy:" + this.ofOcclusionFancy);
>             printwriter.println("ofSmoothFps:" + this.ofSmoothFps);
>             printwriter.println("ofSmoothWorld:" + this.ofSmoothWorld);
>             printwriter.println("ofAoLevel:" + this.ofAoLevel);
>             printwriter.println("ofClouds:" + this.ofClouds);
>             printwriter.println("ofCloudsHeight:" + this.ofCloudsHeight);
>             printwriter.println("ofTrees:" + this.ofTrees);
>             printwriter.println("ofDroppedItems:" + this.ofDroppedItems);
>             printwriter.println("ofRain:" + this.ofRain);
>             printwriter.println("ofAnimatedWater:" + this.ofAnimatedWater);
>             printwriter.println("ofAnimatedLava:" + this.ofAnimatedLava);
>             printwriter.println("ofAnimatedFire:" + this.ofAnimatedFire);
>             printwriter.println("ofAnimatedPortal:" + this.ofAnimatedPortal);
>             printwriter.println("ofAnimatedRedstone:" + this.ofAnimatedRedstone);
>             printwriter.println("ofAnimatedExplosion:" + this.ofAnimatedExplosion);
>             printwriter.println("ofAnimatedFlame:" + this.ofAnimatedFlame);
>             printwriter.println("ofAnimatedSmoke:" + this.ofAnimatedSmoke);
>             printwriter.println("ofVoidParticles:" + this.ofVoidParticles);
>             printwriter.println("ofWaterParticles:" + this.ofWaterParticles);
>             printwriter.println("ofPortalParticles:" + this.ofPortalParticles);
>             printwriter.println("ofPotionParticles:" + this.ofPotionParticles);
>             printwriter.println("ofFireworkParticles:" + this.ofFireworkParticles);
>             printwriter.println("ofDrippingWaterLava:" + this.ofDrippingWaterLava);
>             printwriter.println("ofAnimatedTerrain:" + this.ofAnimatedTerrain);
>             printwriter.println("ofAnimatedTextures:" + this.ofAnimatedTextures);
>             printwriter.println("ofRainSplash:" + this.ofRainSplash);
>             printwriter.println("ofLagometer:" + this.ofLagometer);
>             printwriter.println("ofShowFps:" + this.ofShowFps);
>             printwriter.println("ofAutoSaveTicks:" + this.ofAutoSaveTicks);
>             printwriter.println("ofBetterGrass:" + this.ofBetterGrass);
>             printwriter.println("ofConnectedTextures:" + this.ofConnectedTextures);
>             printwriter.println("ofWeather:" + this.ofWeather);
>             printwriter.println("ofSky:" + this.ofSky);
>             printwriter.println("ofStars:" + this.ofStars);
>             printwriter.println("ofSunMoon:" + this.ofSunMoon);
>             printwriter.println("ofVignette:" + this.ofVignette);
>             printwriter.println("ofChunkUpdates:" + this.ofChunkUpdates);
>             printwriter.println("ofChunkUpdatesDynamic:" + this.ofChunkUpdatesDynamic);
>             printwriter.println("ofTime:" + this.ofTime);
>             printwriter.println("ofClearWater:" + this.ofClearWater);
>             printwriter.println("ofAaLevel:" + this.ofAaLevel);
>             printwriter.println("ofAfLevel:" + this.ofAfLevel);
>             printwriter.println("ofProfiler:" + this.ofProfiler);
>             printwriter.println("ofBetterSnow:" + this.ofBetterSnow);
>             printwriter.println("ofSwampColors:" + this.ofSwampColors);
>             printwriter.println("ofRandomMobs:" + this.ofRandomMobs);
>             printwriter.println("ofSmoothBiomes:" + this.ofSmoothBiomes);
>             printwriter.println("ofCustomFonts:" + this.ofCustomFonts);
>             printwriter.println("ofCustomColors:" + this.ofCustomColors);
>             printwriter.println("ofCustomItems:" + this.ofCustomItems);
>             printwriter.println("ofCustomSky:" + this.ofCustomSky);
>             printwriter.println("ofShowCapes:" + this.ofShowCapes);
>             printwriter.println("ofNaturalTextures:" + this.ofNaturalTextures);
>             printwriter.println("ofLazyChunkLoading:" + this.ofLazyChunkLoading);
>             printwriter.println("ofDynamicFov:" + this.ofDynamicFov);
>             printwriter.println("ofAlternateBlocks:" + this.ofAlternateBlocks);
>             printwriter.println("ofDynamicLights:" + this.ofDynamicLights);
>             printwriter.println("ofScreenshotSize:" + this.ofScreenshotSize);
>             printwriter.println("ofCustomEntityModels:" + this.ofCustomEntityModels);
>             printwriter.println("ofCustomGuis:" + this.ofCustomGuis);
>             printwriter.println("ofFullscreenMode:" + this.ofFullscreenMode);
>             printwriter.println("ofFastMath:" + this.ofFastMath);
>             printwriter.println("ofFastRender:" + this.ofFastRender);
>             printwriter.println("ofTranslucentBlocks:" + this.ofTranslucentBlocks);
>             printwriter.println("key_" + this.ofKeyBindZoom.getKeyDescription() + ":" + this.ofKeyBindZoom.getKeyCode());
>             printwriter.close();
>         }
>         catch (Exception exception1)
>         {
>             Config.warn("Failed to save options");
>             exception1.printStackTrace();
>         }
>     }
> 
>     private void updateRenderClouds()
>     {
>         switch (this.ofClouds)
>         {
>             case 1:
>                 this.clouds = 1;
>                 break;
> 
>             case 2:
>                 this.clouds = 2;
>                 break;
> 
>             case 3:
>                 this.clouds = 0;
>                 break;
> 
>             default:
>                 if (this.fancyGraphics)
>                 {
>                     this.clouds = 2;
>                 }
>                 else
>                 {
>                     this.clouds = 1;
>                 }
>         }
>     }
> 
>     public void resetSettings()
>     {
>         this.renderDistanceChunks = 8;
>         this.viewBobbing = true;
>         this.anaglyph = false;
>         this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
>         this.enableVsync = false;
>         this.updateVSync();
>         this.mipmapLevels = 4;
>         this.fancyGraphics = true;
>         this.ambientOcclusion = 2;
>         this.clouds = 2;
>         this.fovSetting = 70.0F;
>         this.gammaSetting = 0.0F;
>         this.guiScale = 0;
>         this.particleSetting = 0;
>         this.heldItemTooltips = true;
>         this.useVbo = false;
>         this.forceUnicodeFont = false;
>         this.ofFogType = 1;
>         this.ofFogStart = 0.8F;
>         this.ofMipmapType = 0;
>         this.ofOcclusionFancy = false;
>         this.ofSmoothFps = false;
>         Config.updateAvailableProcessors();
>         this.ofSmoothWorld = Config.isSingleProcessor();
>         this.ofLazyChunkLoading = Config.isSingleProcessor();
>         this.ofFastMath = false;
>         this.ofFastRender = false;
>         this.ofTranslucentBlocks = 0;
>         this.ofDynamicFov = true;
>         this.ofAlternateBlocks = true;
>         this.ofDynamicLights = 3;
>         this.ofScreenshotSize = 1;
>         this.ofCustomEntityModels = true;
>         this.ofCustomGuis = true;
>         this.ofAoLevel = 1.0F;
>         this.ofAaLevel = 0;
>         this.ofAfLevel = 1;
>         this.ofClouds = 0;
>         this.ofCloudsHeight = 0.0F;
>         this.ofTrees = 0;
>         this.ofRain = 0;
>         this.ofBetterGrass = 3;
>         this.ofAutoSaveTicks = 4000;
>         this.ofLagometer = false;
>         this.ofShowFps = false;
>         this.ofProfiler = false;
>         this.ofWeather = true;
>         this.ofSky = true;
>         this.ofStars = true;
>         this.ofSunMoon = true;
>         this.ofVignette = 0;
>         this.ofChunkUpdates = 1;
>         this.ofChunkUpdatesDynamic = false;
>         this.ofTime = 0;
>         this.ofClearWater = false;
>         this.ofBetterSnow = false;
>         this.ofFullscreenMode = "Default";
>         this.ofSwampColors = true;
>         this.ofRandomMobs = true;
>         this.ofSmoothBiomes = true;
>         this.ofCustomFonts = true;
>         this.ofCustomColors = true;
>         this.ofCustomItems = true;
>         this.ofCustomSky = true;
>         this.ofShowCapes = true;
>         this.ofConnectedTextures = 2;
>         this.ofNaturalTextures = false;
>         this.ofAnimatedWater = 0;
>         this.ofAnimatedLava = 0;
>         this.ofAnimatedFire = true;
>         this.ofAnimatedPortal = true;
>         this.ofAnimatedRedstone = true;
>         this.ofAnimatedExplosion = true;
>         this.ofAnimatedFlame = true;
>         this.ofAnimatedSmoke = true;
>         this.ofVoidParticles = true;
>         this.ofWaterParticles = true;
>         this.ofRainSplash = true;
>         this.ofPortalParticles = true;
>         this.ofPotionParticles = true;
>         this.ofFireworkParticles = true;
>         this.ofDrippingWaterLava = true;
>         this.ofAnimatedTerrain = true;
>         this.ofAnimatedTextures = true;
>         Shaders.setShaderPack(Shaders.packNameNone);
>         Shaders.configAntialiasingLevel = 0;
>         Shaders.uninit();
>         Shaders.storeConfig();
>         this.updateWaterOpacity();
>         this.mc.refreshResources();
>         this.saveOptions();
>     }
> 
>     public void updateVSync()
>     {
>         Display.setVSyncEnabled(this.enableVsync);
>     }
> 
>     private void updateWaterOpacity()
>     {
>         if (this.mc.isIntegratedServerRunning() && this.mc.getIntegratedServer() != null)
>         {
>             Config.waterOpacityChanged = true;
>         }
> 
>         ClearWater.updateWaterOpacity(this, this.mc.world);
>     }
> 
>     public void setAllAnimations(boolean p_setAllAnimations_1_)
>     {
>         int i = p_setAllAnimations_1_ ? 0 : 2;
>         this.ofAnimatedWater = i;
>         this.ofAnimatedLava = i;
>         this.ofAnimatedFire = p_setAllAnimations_1_;
>         this.ofAnimatedPortal = p_setAllAnimations_1_;
>         this.ofAnimatedRedstone = p_setAllAnimations_1_;
>         this.ofAnimatedExplosion = p_setAllAnimations_1_;
>         this.ofAnimatedFlame = p_setAllAnimations_1_;
>         this.ofAnimatedSmoke = p_setAllAnimations_1_;
>         this.ofVoidParticles = p_setAllAnimations_1_;
>         this.ofWaterParticles = p_setAllAnimations_1_;
>         this.ofRainSplash = p_setAllAnimations_1_;
>         this.ofPortalParticles = p_setAllAnimations_1_;
>         this.ofPotionParticles = p_setAllAnimations_1_;
>         this.ofFireworkParticles = p_setAllAnimations_1_;
>         this.particleSetting = p_setAllAnimations_1_ ? 0 : 2;
>         this.ofDrippingWaterLava = p_setAllAnimations_1_;
>         this.ofAnimatedTerrain = p_setAllAnimations_1_;
>         this.ofAnimatedTextures = p_setAllAnimations_1_;
>     }
> 
>     private static int nextValue(int p_nextValue_0_, int[] p_nextValue_1_)
>     {
>         int i = indexOf(p_nextValue_0_, p_nextValue_1_);
> 
>         if (i < 0)
>         {
>             return p_nextValue_1_[0];
>         }
>         else
>         {
>             ++i;
> 
>             if (i >= p_nextValue_1_.length)
>             {
>                 i = 0;
>             }
> 
>             return p_nextValue_1_[i];
>         }
>     }
> 
>     private static int limit(int p_limit_0_, int[] p_limit_1_)
>     {
>         int i = indexOf(p_limit_0_, p_limit_1_);
>         return i < 0 ? p_limit_1_[0] : p_limit_0_;
>     }
> 
>     private static int indexOf(int p_indexOf_0_, int[] p_indexOf_1_)
>     {
>         for (int i = 0; i < p_indexOf_1_.length; ++i)
>         {
>             if (p_indexOf_1_[i] == p_indexOf_0_)
>             {
>                 return i;
>             }
>         }
> 
>         return -1;
>     }
> 
>     private void setForgeKeybindProperties()
>     {
>         if (Reflector.KeyConflictContext_IN_GAME.exists())
>         {
>             if (Reflector.ForgeKeyBinding_setKeyConflictContext.exists())
>             {
>                 Object object = Reflector.getFieldValue(Reflector.KeyConflictContext_IN_GAME);
>                 Reflector.call(this.keyBindForward, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindLeft, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindBack, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindRight, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindJump, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindSneak, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindSprint, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindAttack, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindChat, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindPlayerList, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindCommand, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindTogglePerspective, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindSmoothCamera, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>                 Reflector.call(this.keyBindSwapHands, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
>             }
>         }
>     }
> 
>     public void onGuiClosed()
>     {
>         if (this.needsResourceRefresh)
>         {
>             this.mc.scheduleResourcesRefresh();
>             this.needsResourceRefresh = false;
>         }
>     }
> 
1398c3473
<         FRAMERATE_LIMIT("options.framerateLimit", true, false, 10.0F, 260.0F, 10.0F),
---
>         FRAMERATE_LIMIT("options.framerateLimit", true, false, 0.0F, 260.0F, 5.0F),
1429c3504,3572
<         NARRATOR("options.narrator", false, false);
---
>         NARRATOR("options.narrator", false, false),
>         FOG_FANCY("of.options.FOG_FANCY", false, false),
>         FOG_START("of.options.FOG_START", false, false),
>         MIPMAP_TYPE("of.options.MIPMAP_TYPE", true, false, 0.0F, 3.0F, 1.0F),
>         SMOOTH_FPS("of.options.SMOOTH_FPS", false, false),
>         CLOUDS("of.options.CLOUDS", false, false),
>         CLOUD_HEIGHT("of.options.CLOUD_HEIGHT", true, false),
>         TREES("of.options.TREES", false, false),
>         RAIN("of.options.RAIN", false, false),
>         ANIMATED_WATER("of.options.ANIMATED_WATER", false, false),
>         ANIMATED_LAVA("of.options.ANIMATED_LAVA", false, false),
>         ANIMATED_FIRE("of.options.ANIMATED_FIRE", false, false),
>         ANIMATED_PORTAL("of.options.ANIMATED_PORTAL", false, false),
>         AO_LEVEL("of.options.AO_LEVEL", true, false),
>         LAGOMETER("of.options.LAGOMETER", false, false),
>         SHOW_FPS("of.options.SHOW_FPS", false, false),
>         AUTOSAVE_TICKS("of.options.AUTOSAVE_TICKS", false, false),
>         BETTER_GRASS("of.options.BETTER_GRASS", false, false),
>         ANIMATED_REDSTONE("of.options.ANIMATED_REDSTONE", false, false),
>         ANIMATED_EXPLOSION("of.options.ANIMATED_EXPLOSION", false, false),
>         ANIMATED_FLAME("of.options.ANIMATED_FLAME", false, false),
>         ANIMATED_SMOKE("of.options.ANIMATED_SMOKE", false, false),
>         WEATHER("of.options.WEATHER", false, false),
>         SKY("of.options.SKY", false, false),
>         STARS("of.options.STARS", false, false),
>         SUN_MOON("of.options.SUN_MOON", false, false),
>         VIGNETTE("of.options.VIGNETTE", false, false),
>         CHUNK_UPDATES("of.options.CHUNK_UPDATES", false, false),
>         CHUNK_UPDATES_DYNAMIC("of.options.CHUNK_UPDATES_DYNAMIC", false, false),
>         TIME("of.options.TIME", false, false),
>         CLEAR_WATER("of.options.CLEAR_WATER", false, false),
>         SMOOTH_WORLD("of.options.SMOOTH_WORLD", false, false),
>         VOID_PARTICLES("of.options.VOID_PARTICLES", false, false),
>         WATER_PARTICLES("of.options.WATER_PARTICLES", false, false),
>         RAIN_SPLASH("of.options.RAIN_SPLASH", false, false),
>         PORTAL_PARTICLES("of.options.PORTAL_PARTICLES", false, false),
>         POTION_PARTICLES("of.options.POTION_PARTICLES", false, false),
>         FIREWORK_PARTICLES("of.options.FIREWORK_PARTICLES", false, false),
>         PROFILER("of.options.PROFILER", false, false),
>         DRIPPING_WATER_LAVA("of.options.DRIPPING_WATER_LAVA", false, false),
>         BETTER_SNOW("of.options.BETTER_SNOW", false, false),
>         FULLSCREEN_MODE("of.options.FULLSCREEN_MODE", true, false, 0.0F, (float)Config.getDisplayModes().length, 1.0F),
>         ANIMATED_TERRAIN("of.options.ANIMATED_TERRAIN", false, false),
>         SWAMP_COLORS("of.options.SWAMP_COLORS", false, false),
>         RANDOM_MOBS("of.options.RANDOM_MOBS", false, false),
>         SMOOTH_BIOMES("of.options.SMOOTH_BIOMES", false, false),
>         CUSTOM_FONTS("of.options.CUSTOM_FONTS", false, false),
>         CUSTOM_COLORS("of.options.CUSTOM_COLORS", false, false),
>         SHOW_CAPES("of.options.SHOW_CAPES", false, false),
>         CONNECTED_TEXTURES("of.options.CONNECTED_TEXTURES", false, false),
>         CUSTOM_ITEMS("of.options.CUSTOM_ITEMS", false, false),
>         AA_LEVEL("of.options.AA_LEVEL", true, false, 0.0F, 16.0F, 1.0F),
>         AF_LEVEL("of.options.AF_LEVEL", true, false, 1.0F, 16.0F, 1.0F),
>         ANIMATED_TEXTURES("of.options.ANIMATED_TEXTURES", false, false),
>         NATURAL_TEXTURES("of.options.NATURAL_TEXTURES", false, false),
>         HELD_ITEM_TOOLTIPS("of.options.HELD_ITEM_TOOLTIPS", false, false),
>         DROPPED_ITEMS("of.options.DROPPED_ITEMS", false, false),
>         LAZY_CHUNK_LOADING("of.options.LAZY_CHUNK_LOADING", false, false),
>         CUSTOM_SKY("of.options.CUSTOM_SKY", false, false),
>         FAST_MATH("of.options.FAST_MATH", false, false),
>         FAST_RENDER("of.options.FAST_RENDER", false, false),
>         TRANSLUCENT_BLOCKS("of.options.TRANSLUCENT_BLOCKS", false, false),
>         DYNAMIC_FOV("of.options.DYNAMIC_FOV", false, false),
>         DYNAMIC_LIGHTS("of.options.DYNAMIC_LIGHTS", false, false),
>         ALTERNATE_BLOCKS("of.options.ALTERNATE_BLOCKS", false, false),
>         CUSTOM_ENTITY_MODELS("of.options.CUSTOM_ENTITY_MODELS", false, false),
>         ADVANCED_TOOLTIPS("of.options.ADVANCED_TOOLTIPS", false, false),
>         SCREENSHOT_SIZE("of.options.SCREENSHOT_SIZE", false, false),
>         CUSTOM_GUIS("of.options.CUSTOM_GUIS", false, false);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/command/AdvancementCommand.java src\modified/src/minecraft/net/minecraft/command/AdvancementCommand.java
63c63
<                 AdvancementCommand.Mode advancementcommand$actiontype$mode = AdvancementCommand.Mode.func_193547_a(args[2]);
---
>                 AdvancementCommand.Mode advancementcommand$mode = AdvancementCommand.Mode.func_193547_a(args[2]);
65c65
<                 if (advancementcommand$actiontype$mode == null)
---
>                 if (advancementcommand$mode == null)
70c70
<                 this.func_193516_a(server, sender, args, entityplayermp, advancementcommand$actiontype, advancementcommand$actiontype$mode);
---
>                 this.func_193516_a(server, sender, args, entityplayermp, advancementcommand$actiontype, advancementcommand$mode);
248c248
<                 AdvancementCommand.Mode advancementcommand$actiontype$mode = AdvancementCommand.Mode.func_193547_a(args[2]);
---
>                 AdvancementCommand.Mode advancementcommand$mode = AdvancementCommand.Mode.func_193547_a(args[2]);
250c250
<                 if (advancementcommand$actiontype$mode != null && advancementcommand$actiontype$mode != AdvancementCommand.Mode.EVERYTHING)
---
>                 if (advancementcommand$mode != null && advancementcommand$mode != AdvancementCommand.Mode.EVERYTHING)
257c257
<                     if (args.length == 5 && advancementcommand$actiontype$mode == AdvancementCommand.Mode.ONLY)
---
>                     if (args.length == 5 && advancementcommand$mode == AdvancementCommand.Mode.ONLY)
469c469
<             for (AdvancementCommand.Mode advancementcommand$actiontype$mode : values())
---
>             for (AdvancementCommand.Mode advancementcommand$mode : values())
471c471
<                 if (advancementcommand$actiontype$mode.field_193554_g.equals(p_193547_0_))
---
>                 if (advancementcommand$mode.field_193554_g.equals(p_193547_0_))
473c473
<                     return advancementcommand$actiontype$mode;
---
>                     return advancementcommand$mode;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/crash/CrashReport.java src\modified/src/minecraft/net/minecraft/crash/CrashReport.java
15a16
> 
17a19,21
> import optifine.CrashReporter;
> import optifine.Reflector;
> 
42a47
>     private boolean reported = false;
61c66
<                 return "1.12";
---
>                 return "1.12.2";
130a136,141
> 
>         if (Reflector.FMLCommonHandler_enhanceCrashReport.exists())
>         {
>             Object object = Reflector.call(Reflector.FMLCommonHandler_instance);
>             Reflector.callString(object, Reflector.FMLCommonHandler_enhanceCrashReport, this, this.theReportCategory);
>         }
232a244,249
>         if (!this.reported)
>         {
>             this.reported = true;
>             CrashReporter.onCrashReport(this, this.theReportCategory);
>         }
> 
234a252,253
>         Reflector.call(Reflector.BlamingTransformer_onCrash, stringbuilder);
>         Reflector.call(Reflector.CoreModManager_onCrash, stringbuilder);
282c301
<             boolean flag1;
---
>             boolean flag;
289,290c308,310
<                 boolean lvt_3_1_ = true;
<                 return lvt_3_1_;
---
>                 boolean flag1 = true;
>                 boolean flag2 = flag1;
>                 return flag2;
292c312
<             catch (Throwable throwable)
---
>             catch (Throwable throwable1)
294,295c314,315
<                 LOGGER.error("Could not save crash report to {}", toFile, throwable);
<                 flag1 = false;
---
>                 LOGGER.error("Could not save crash report to {}", toFile, throwable1);
>                 flag = false;
302c322
<             return flag1;
---
>             return flag;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/entity/EntityLiving.java src\modified/src/minecraft/net/minecraft/entity/EntityLiving.java
19a20
> import net.minecraft.entity.monster.EntityMob;
39a41
> import net.minecraft.scoreboard.Team;
55a58
> import net.minecraft.world.biome.Biome;
57a61,62
> import optifine.Config;
> import optifine.Reflector;
104a110,114
>     public int randomMobsId = 0;
>     public Biome spawnBiome = null;
>     public BlockPos spawnPosition = null;
>     private UUID teamUuid = null;
>     private String teamUuidString = null;
123a134,137
> 
>         UUID uuid = this.getUniqueID();
>         long i = uuid.getLeastSignificantBits();
>         this.randomMobsId = (int)(i & 2147483647L);
203a218
>         Reflector.callVoid(Reflector.ForgeHooks_onLivingSetAttackTarget, this, entitylivingbaseIn);
349,351c364,368
<         super.onUpdate();
< 
<         if (!this.world.isRemote)
---
>         if (Config.isSmoothWorld() && this.canSkipUpdate())
>         {
>             this.onUpdateMinimal();
>         }
>         else
353c370
<             this.updateLeashedState();
---
>             super.onUpdate();
355c372
<             if (this.ticksExisted % 5 == 0)
---
>             if (!this.world.isRemote)
357,361c374,383
<                 boolean flag = !(this.getControllingPassenger() instanceof EntityLiving);
<                 boolean flag1 = !(this.getRidingEntity() instanceof EntityBoat);
<                 this.tasks.setControlFlag(1, flag);
<                 this.tasks.setControlFlag(4, flag && flag1);
<                 this.tasks.setControlFlag(2, flag);
---
>                 this.updateLeashedState();
> 
>                 if (this.ticksExisted % 5 == 0)
>                 {
>                     boolean flag = !(this.getControllingPassenger() instanceof EntityLiving);
>                     boolean flag1 = !(this.getRidingEntity() instanceof EntityBoat);
>                     this.tasks.setControlFlag(1, flag);
>                     this.tasks.setControlFlag(4, flag && flag1);
>                     this.tasks.setControlFlag(2, flag);
>                 }
791a814,817
>         Object object = null;
>         Object object1 = Reflector.getFieldValue(Reflector.Event_Result_DEFAULT);
>         Object object2 = Reflector.getFieldValue(Reflector.Event_Result_DENY);
> 
795a822,832
>         else if ((this.entityAge & 31) == 31 && (object = Reflector.call(Reflector.ForgeEventFactory_canEntityDespawn, this)) != object1)
>         {
>             if (object == object2)
>             {
>                 this.entityAge = 0;
>             }
>             else
>             {
>                 this.setDead();
>             }
>         }
888,889c925,926
<         double d2 = entityIn.posZ - this.posZ;
<         double d1;
---
>         double d1 = entityIn.posZ - this.posZ;
>         double d2;
894c931
<             d1 = entitylivingbase.posY + (double)entitylivingbase.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
---
>             d2 = entitylivingbase.posY + (double)entitylivingbase.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
898c935
<             d1 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
---
>             d2 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
901,903c938,940
<         double d3 = (double)MathHelper.sqrt(d0 * d0 + d2 * d2);
<         float f = (float)(MathHelper.atan2(d2, d0) * (180D / Math.PI)) - 90.0F;
<         float f1 = (float)(-(MathHelper.atan2(d1, d3) * (180D / Math.PI)));
---
>         double d3 = (double)MathHelper.sqrt(d0 * d0 + d1 * d1);
>         float f = (float)(MathHelper.atan2(d1, d0) * (180D / Math.PI)) - 90.0F;
>         float f1 = (float)(-(MathHelper.atan2(d2, d3) * (180D / Math.PI)));
1128c1165,1172
<                 return stack.getItem() == Items.SHIELD ? EntityEquipmentSlot.OFFHAND : EntityEquipmentSlot.MAINHAND;
---
>                 boolean flag = stack.getItem() == Items.SHIELD;
> 
>                 if (Reflector.ForgeItem_isShield.exists())
>                 {
>                     flag = Reflector.callBoolean(stack.getItem(), Reflector.ForgeItem_isShield, stack, null);
>                 }
> 
>                 return flag ? EntityEquipmentSlot.OFFHAND : EntityEquipmentSlot.MAINHAND;
1586a1631,1697
>     private boolean canSkipUpdate()
>     {
>         if (this.isChild())
>         {
>             return false;
>         }
>         else if (this.hurtTime > 0)
>         {
>             return false;
>         }
>         else if (this.ticksExisted < 20)
>         {
>             return false;
>         }
>         else
>         {
>             World world = this.getEntityWorld();
> 
>             if (world == null)
>             {
>                 return false;
>             }
>             else if (world.playerEntities.size() != 1)
>             {
>                 return false;
>             }
>             else
>             {
>                 Entity entity = world.playerEntities.get(0);
>                 double d0 = Math.max(Math.abs(this.posX - entity.posX) - 16.0D, 0.0D);
>                 double d1 = Math.max(Math.abs(this.posZ - entity.posZ) - 16.0D, 0.0D);
>                 double d2 = d0 * d0 + d1 * d1;
>                 return !this.isInRangeToRenderDist(d2);
>             }
>         }
>     }
> 
>     private void onUpdateMinimal()
>     {
>         ++this.entityAge;
> 
>         if (this instanceof EntityMob)
>         {
>             float f = this.getBrightness();
> 
>             if (f > 0.5F)
>             {
>                 this.entityAge += 2;
>             }
>         }
> 
>         this.despawnEntity();
>     }
> 
>     public Team getTeam()
>     {
>         UUID uuid = this.getUniqueID();
> 
>         if (this.teamUuid != uuid)
>         {
>             this.teamUuid = uuid;
>             this.teamUuidString = uuid.toString();
>         }
> 
>         return this.world.getScoreboard().getPlayersTeam(this.teamUuidString);
>     }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/entity/item/EntityEnderPearl.java src\modified/src/minecraft/net/minecraft/entity/item/EntityEnderPearl.java
2a3
> import javax.annotation.Nullable;
3a5
> import net.minecraft.entity.Entity;
142a145,155
> 
>     @Nullable
>     public Entity changeDimension(int dimensionIn)
>     {
>         if (this.thrower.dimension != dimensionIn)
>         {
>             this.thrower = null;
>         }
> 
>         return super.changeDimension(dimensionIn);
>     }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/entity/player/EntityPlayer.java src\modified/src/minecraft/net/minecraft/entity/player/EntityPlayer.java
986c986
<         compound.setInteger("DataVersion", 1139);
---
>         compound.setInteger("DataVersion", 1343);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/entity/projectile/EntityThrowable.java src\modified/src/minecraft/net/minecraft/entity/projectile/EntityThrowable.java
34c34
<     private EntityLivingBase thrower;
---
>     protected EntityLivingBase thrower;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/inventory/Container.java src\modified/src/minecraft/net/minecraft/inventory/Container.java
558,571d557
<     public void func_192388_b(int p_192388_1_, ItemStack p_192388_2_)
<     {
<         ItemStack itemstack = this.getSlot(p_192388_1_).getStack();
< 
<         if (itemstack.func_190926_b())
<         {
<             this.putStackInSlot(p_192388_1_, p_192388_2_);
<         }
<         else if (itemstack.getUnlocalizedName().equals(p_192388_2_.getUnlocalizedName()) && itemstack.func_190916_E() < itemstack.getMaxStackSize())
<         {
<             itemstack.func_190917_f(p_192388_2_.func_190916_E());
<         }
<     }
< 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/item/ItemPotion.java src\modified/src/minecraft/net/minecraft/item/ItemPotion.java
128c128,129
<         return super.hasEffect(stack) || !PotionUtils.getEffectsFromStack(stack).isEmpty();
---
>     	return false;
>         //return super.hasEffect(stack) || !PotionUtils.getEffectsFromStack(stack).isEmpty();
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/item/ItemRecord.java src\modified/src/minecraft/net/minecraft/item/ItemRecord.java
18a19
> import net.minecraft.util.text.TextFormatting;
61a63,69
>     
>     @Override
>     public String getItemStackDisplayName(ItemStack stack) {
>     	
>     
>     	return super.getItemStackDisplayName(stack);
>     }
67a76,81
>     	if(stack.getItem() instanceof ItemRecord) {
>     		ItemRecord record = (ItemRecord) stack.getItem();
>     		if(record.displayName.equals("item.record.11.desc")) {
>     			tooltip.add(TextFormatting.RED + "" + TextFormatting.ITALIC + "LTT Intro Music");
>     		}
>     	}
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/network/EnumConnectionState.java src\modified/src/minecraft/net/minecraft/network/EnumConnectionState.java
28a29
> import net.minecraft.network.play.client.CPacketPlaceRecipe;
35d35
< import net.minecraft.network.play.client.CPacketRecipePlacement;
82a83
> import net.minecraft.network.play.server.SPacketPlaceGhostRecipe;
179a181
>             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlaceGhostRecipe.class);
217d218
<             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketRecipePlacement.class);
234a236
>             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlaceRecipe.class);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/network/handshake/client/C00Handshake.java src\modified/src/minecraft/net/minecraft/network/handshake/client/C00Handshake.java
20c20
<     public C00Handshake(int version, String ip, int port, EnumConnectionState requestedState)
---
>     public C00Handshake(String p_i47613_1_, int p_i47613_2_, EnumConnectionState p_i47613_3_)
22,25c22,25
<         this.protocolVersion = version;
<         this.ip = ip;
<         this.port = port;
<         this.requestedState = requestedState;
---
>         this.protocolVersion = 340;
>         this.ip = p_i47613_1_;
>         this.port = p_i47613_2_;
>         this.requestedState = p_i47613_3_;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/network/NetHandlerPlayServer.java src\modified/src/minecraft/net/minecraft/network/NetHandlerPlayServer.java
65a66
> import net.minecraft.network.play.client.CPacketPlaceRecipe;
72d72
< import net.minecraft.network.play.client.CPacketRecipePlacement;
107a108
> import net.minecraft.util.ServerRecipeBookHelper;
130,132c131,133
<     private int keepAliveId;
<     private long lastPingTime;
<     private long lastSentPingPacket;
---
>     private long field_194402_f;
>     private boolean field_194403_g;
>     private long field_194404_h;
171a173
>     private ServerRecipeBookHelper field_194309_H = new ServerRecipeBookHelper();
241a244
>         long i = this.currentTimeMillis();
243c246
<         if ((long)this.networkTickCount - this.lastSentPingPacket > 40L)
---
>         if (i - this.field_194402_f >= 15000L)
245,248c248,258
<             this.lastSentPingPacket = (long)this.networkTickCount;
<             this.lastPingTime = this.currentTimeMillis();
<             this.keepAliveId = (int)this.lastPingTime;
<             this.sendPacket(new SPacketKeepAlive(this.keepAliveId));
---
>             if (this.field_194403_g)
>             {
>                 this.func_194028_b(new TextComponentTranslation("disconnect.timeout", new Object[0]));
>             }
>             else
>             {
>                 this.field_194403_g = true;
>                 this.field_194402_f = i;
>                 this.field_194404_h = i;
>                 this.sendPacket(new SPacketKeepAlive(this.field_194404_h));
>             }
1239c1249
<     public void func_191985_a(CPacketRecipePlacement p_191985_1_)
---
>     public void func_194308_a(CPacketPlaceRecipe p_194308_1_)
1241c1251
<         PacketThreadUtil.checkThreadAndEnqueue(p_191985_1_, this, this.playerEntity.getServerWorld());
---
>         PacketThreadUtil.checkThreadAndEnqueue(p_194308_1_, this, this.playerEntity.getServerWorld());
1244,1320c1254
<         if (this.playerEntity.openContainer.windowId == p_191985_1_.func_192613_a() && this.playerEntity.openContainer.getCanCraft(this.playerEntity))
<         {
<             this.playerEntity.connection.sendPacket(new SPacketConfirmTransaction(p_191985_1_.func_192613_a(), p_191985_1_.func_192614_b(), true));
< 
<             if (!p_191985_1_.func_192610_d().isEmpty())
<             {
<                 for (CPacketRecipePlacement.ItemMove cpacketrecipeplacement$itemmove : p_191985_1_.func_192610_d())
<                 {
<                     ItemStack itemstack = this.playerEntity.openContainer.getSlot(cpacketrecipeplacement$itemmove.field_192674_b).getStack();
< 
<                     if (this.func_193074_a(cpacketrecipeplacement$itemmove.field_192673_a, itemstack))
<                     {
<                         int i = cpacketrecipeplacement$itemmove.field_192673_a.func_190916_E();
< 
<                         if (cpacketrecipeplacement$itemmove.field_192675_c == -1)
<                         {
<                             this.playerEntity.dropItem(cpacketrecipeplacement$itemmove.field_192673_a, true);
<                         }
<                         else
<                         {
<                             ItemStack itemstack1 = this.playerEntity.inventory.getStackInSlot(cpacketrecipeplacement$itemmove.field_192675_c);
< 
<                             if (itemstack1.func_190926_b())
<                             {
<                                 this.playerEntity.inventory.setInventorySlotContents(cpacketrecipeplacement$itemmove.field_192675_c, cpacketrecipeplacement$itemmove.field_192673_a);
<                             }
<                             else
<                             {
<                                 itemstack1.func_190917_f(i);
<                             }
<                         }
< 
<                         if (itemstack.func_190916_E() == i)
<                         {
<                             this.playerEntity.openContainer.putStackInSlot(cpacketrecipeplacement$itemmove.field_192674_b, ItemStack.field_190927_a);
<                         }
<                         else
<                         {
<                             itemstack.func_190918_g(i);
<                         }
<                     }
<                 }
<             }
< 
<             if (!p_191985_1_.func_192615_c().isEmpty())
<             {
<                 for (CPacketRecipePlacement.ItemMove cpacketrecipeplacement$itemmove1 : p_191985_1_.func_192615_c())
<                 {
<                     ItemStack itemstack2 = this.playerEntity.inventory.getStackInSlot(cpacketrecipeplacement$itemmove1.field_192675_c);
< 
<                     if (this.func_193074_a(cpacketrecipeplacement$itemmove1.field_192673_a, itemstack2))
<                     {
<                         int j = cpacketrecipeplacement$itemmove1.field_192673_a.func_190916_E();
< 
<                         if (itemstack2.func_190916_E() == j)
<                         {
<                             this.playerEntity.inventory.removeStackFromSlot(cpacketrecipeplacement$itemmove1.field_192675_c);
<                         }
<                         else
<                         {
<                             itemstack2.func_190918_g(j);
<                         }
< 
<                         this.playerEntity.openContainer.func_192388_b(cpacketrecipeplacement$itemmove1.field_192674_b, cpacketrecipeplacement$itemmove1.field_192673_a);
<                     }
<                 }
<             }
< 
<             this.playerEntity.openContainer.detectAndSendChanges();
<         }
<     }
< 
<     private boolean func_193074_a(ItemStack p_193074_1_, ItemStack p_193074_2_)
<     {
<         ItemStack itemstack = p_193074_2_.copy();
< 
<         if (itemstack.func_190916_E() < p_193074_1_.func_190916_E())
---
>         if (!this.playerEntity.isSpectator() && this.playerEntity.openContainer.windowId == p_194308_1_.func_194318_a() && this.playerEntity.openContainer.getCanCraft(this.playerEntity))
1322,1327c1256
<             return false;
<         }
<         else
<         {
<             itemstack.func_190920_e(p_193074_1_.func_190916_E());
<             return ItemStack.areItemStacksEqual(p_193074_1_, itemstack);
---
>             this.field_194309_H.func_194327_a(this.playerEntity, p_194308_1_.func_194317_b(), p_194308_1_.func_194319_c());
1466c1395
<         if (packetIn.getKey() == this.keepAliveId)
---
>         if (this.field_194403_g && packetIn.getKey() == this.field_194404_h)
1468c1397
<             int i = (int)(this.currentTimeMillis() - this.lastPingTime);
---
>             int i = (int)(this.currentTimeMillis() - this.field_194402_f);
1469a1399,1403
>             this.field_194403_g = false;
>         }
>         else if (!this.playerEntity.getName().equals(this.serverController.getServerOwner()))
>         {
>             this.func_194028_b(new TextComponentTranslation("disconnect.timeout", new Object[0]));
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/network/play/client/CPacketKeepAlive.java src\modified/src/minecraft/net/minecraft/network/play/client/CPacketKeepAlive.java
10c10
<     private int key;
---
>     private long key;
16c16
<     public CPacketKeepAlive(int idIn)
---
>     public CPacketKeepAlive(long idIn)
34c34
<         this.key = buf.readVarIntFromBuffer();
---
>         this.key = buf.readLong();
42c42
<         buf.writeVarIntToBuffer(this.key);
---
>         buf.writeLong(this.key);
45c45
<     public int getKey()
---
>     public long getKey()
Only in src\modified/src/minecraft/net/minecraft/network/play/client: CPacketPlaceRecipe.java
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/network/play/client/CPacketRecipePlacement.java src\modified/src/minecraft/net/minecraft/network/play/client/CPacketRecipePlacement.java
95c95
<         handler.func_191985_a(this);
---
>        // handler.func_191985_a(this); //TODO: IDK what this is
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/network/play/INetHandlerPlayClient.java src\modified/src/minecraft/net/minecraft/network/play/INetHandlerPlayClient.java
42a43
> import net.minecraft.network.play.server.SPacketPlaceGhostRecipe;
391a393,394
> 
>     void func_194307_a(SPacketPlaceGhostRecipe p_194307_1_);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/network/play/INetHandlerPlayServer.java src\modified/src/minecraft/net/minecraft/network/play/INetHandlerPlayServer.java
18a19
> import net.minecraft.network.play.client.CPacketPlaceRecipe;
25d25
< import net.minecraft.network.play.client.CPacketRecipePlacement;
81c81
<     void func_191985_a(CPacketRecipePlacement p_191985_1_);
---
>     void func_194308_a(CPacketPlaceRecipe p_194308_1_);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/network/play/server/SPacketKeepAlive.java src\modified/src/minecraft/net/minecraft/network/play/server/SPacketKeepAlive.java
10c10
<     private int id;
---
>     private long id;
16c16
<     public SPacketKeepAlive(int idIn)
---
>     public SPacketKeepAlive(long idIn)
34c34
<         this.id = buf.readVarIntFromBuffer();
---
>         this.id = buf.readLong();
42c42
<         buf.writeVarIntToBuffer(this.id);
---
>         buf.writeLong(this.id);
45c45
<     public int getId()
---
>     public long getId()
Only in src\modified/src/minecraft/net/minecraft/network/play/server: SPacketPlaceGhostRecipe.java
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/potion/PotionUtils.java src\modified/src/minecraft/net/minecraft/potion/PotionUtils.java
19a20,21
> import optifine.Config;
> import optifine.CustomColors;
100c102
<             return 3694022;
---
>             return Config.isCustomColors() ? CustomColors.getPotionColor((Potion)null, i) : 3694022;
113a116,121
> 
>                     if (Config.isCustomColors())
>                     {
>                         k = CustomColors.getPotionColor(potioneffect.getPotion(), k);
>                     }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/profiler/Profiler.java src\modified/src/minecraft/net/minecraft/profiler/Profiler.java
7a8,12
> import java.util.function.Supplier;
> import net.minecraft.client.renderer.GlStateManager;
> import optifine.Config;
> import optifine.Lagometer;
> 
22a28,44
>     public boolean profilerGlobalEnabled = true;
>     private boolean profilerLocalEnabled;
>     private static final String SCHEDULED_EXECUTABLES = "scheduledExecutables";
>     private static final String TICK = "tick";
>     private static final String PRE_RENDER_ERRORS = "preRenderErrors";
>     private static final String RENDER = "render";
>     private static final String DISPLAY = "display";
>     private static final int HASH_SCHEDULED_EXECUTABLES = "scheduledExecutables".hashCode();
>     private static final int HASH_TICK = "tick".hashCode();
>     private static final int HASH_PRE_RENDER_ERRORS = "preRenderErrors".hashCode();
>     private static final int HASH_RENDER = "render".hashCode();
>     private static final int HASH_DISPLAY = "display".hashCode();
> 
>     public Profiler()
>     {
>         this.profilerLocalEnabled = this.profilerGlobalEnabled;
>     }
31a54
>         this.profilerLocalEnabled = this.profilerGlobalEnabled;
39c62
<         if (this.profilingEnabled)
---
>         if (Lagometer.isActive())
41c64,70
<             if (!this.profilingSection.isEmpty())
---
>             int i = name.hashCode();
> 
>             if (i == HASH_SCHEDULED_EXECUTABLES && name.equals("scheduledExecutables"))
>             {
>                 Lagometer.timerScheduledExecutables.start();
>             }
>             else if (i == HASH_TICK && name.equals("tick") && Config.isMinecraftThread())
43c72,73
<                 this.profilingSection = this.profilingSection + ".";
---
>                 Lagometer.timerScheduledExecutables.end();
>                 Lagometer.timerTick.start();
44a75,83
>             else if (i == HASH_PRE_RENDER_ERRORS && name.equals("preRenderErrors"))
>             {
>                 Lagometer.timerTick.end();
>             }
>         }
> 
>         if (Config.isFastRender())
>         {
>             int j = name.hashCode();
46,48c85,118
<             this.profilingSection = this.profilingSection + name;
<             this.sectionList.add(this.profilingSection);
<             this.timestampList.add(Long.valueOf(System.nanoTime()));
---
>             if (j == HASH_RENDER && name.equals("render"))
>             {
>                 GlStateManager.clearEnabled = false;
>             }
>             else if (j == HASH_DISPLAY && name.equals("display"))
>             {
>                 GlStateManager.clearEnabled = true;
>             }
>         }
> 
>         if (this.profilerLocalEnabled)
>         {
>             if (this.profilingEnabled)
>             {
>                 if (!this.profilingSection.isEmpty())
>                 {
>                     this.profilingSection = this.profilingSection + ".";
>                 }
> 
>                 this.profilingSection = this.profilingSection + name;
>                 this.sectionList.add(this.profilingSection);
>                 this.timestampList.add(Long.valueOf(System.nanoTime()));
>             }
>         }
>     }
> 
>     public void func_194340_a(Supplier<String> p_194340_1_)
>     {
>         if (this.profilerLocalEnabled)
>         {
>             if (this.profilingEnabled)
>             {
>                 this.startSection(p_194340_1_.get());
>             }
57c127
<         if (this.profilingEnabled)
---
>         if (this.profilerLocalEnabled)
59,68c129
<             long i = System.nanoTime();
<             long j = ((Long)this.timestampList.remove(this.timestampList.size() - 1)).longValue();
<             this.sectionList.remove(this.sectionList.size() - 1);
<             long k = i - j;
< 
<             if (this.profilingMap.containsKey(this.profilingSection))
<             {
<                 this.profilingMap.put(this.profilingSection, Long.valueOf(((Long)this.profilingMap.get(this.profilingSection)).longValue() + k));
<             }
<             else
---
>             if (this.profilingEnabled)
70,71c131,134
<                 this.profilingMap.put(this.profilingSection, Long.valueOf(k));
<             }
---
>                 long i = System.nanoTime();
>                 long j = ((Long)this.timestampList.remove(this.timestampList.size() - 1)).longValue();
>                 this.sectionList.remove(this.sectionList.size() - 1);
>                 long k = i - j;
73,76c136,148
<             if (k > 100000000L)
<             {
<                 LOGGER.warn("Something's taking too long! '{}' took aprox {} ms", this.profilingSection, Double.valueOf((double)k / 1000000.0D));
<             }
---
>                 if (this.profilingMap.containsKey(this.profilingSection))
>                 {
>                     this.profilingMap.put(this.profilingSection, Long.valueOf(((Long)this.profilingMap.get(this.profilingSection)).longValue() + k));
>                 }
>                 else
>                 {
>                     this.profilingMap.put(this.profilingSection, Long.valueOf(k));
>                 }
> 
>                 if (k > 100000000L)
>                 {
>                     LOGGER.warn("Something's taking too long! '{}' took aprox {} ms", this.profilingSection, Double.valueOf((double)k / 1000000.0D));
>                 }
78c150,151
<             this.profilingSection = this.sectionList.isEmpty() ? "" : (String)this.sectionList.get(this.sectionList.size() - 1);
---
>                 this.profilingSection = this.sectionList.isEmpty() ? "" : (String)this.sectionList.get(this.sectionList.size() - 1);
>             }
135c208
<                 this.profilingMap.put(s3, Long.valueOf(((Long)this.profilingMap.get(s3)).longValue() * 999L / 1000L));
---
>                 this.profilingMap.put(s3, Long.valueOf(((Long)this.profilingMap.get(s3)).longValue() * 950L / 1000L));
154,155c227,240
<         this.endSection();
<         this.startSection(name);
---
>         if (this.profilerLocalEnabled)
>         {
>             this.endSection();
>             this.startSection(name);
>         }
>     }
> 
>     public void func_194339_b(Supplier<String> p_194339_1_)
>     {
>         if (this.profilerLocalEnabled)
>         {
>             this.endSection();
>             this.func_194340_a(p_194339_1_);
>         }
162a248,255
>     public void startSection(Class<?> p_startSection_1_)
>     {
>         if (this.profilingEnabled)
>         {
>             this.startSection(p_startSection_1_.getSimpleName());
>         }
>     }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/profiler/Snooper.java src\modified/src/minecraft/net/minecraft/profiler/Snooper.java
101c101
<         this.addClientStat("version", "1.12");
---
>         this.addClientStat("version", "1.12.2");
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/realms/RealmsConnect.java src\modified/src/minecraft/net/minecraft/realms/RealmsConnect.java
59c59
<                     RealmsConnect.this.connection.sendPacket(new C00Handshake(335, p_connect_1_, p_connect_2_, EnumConnectionState.LOGIN));
---
>                     RealmsConnect.this.connection.sendPacket(new C00Handshake(p_connect_1_, p_connect_2_, EnumConnectionState.LOGIN));
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/realms/RealmsSharedConstants.java src\modified/src/minecraft/net/minecraft/realms/RealmsSharedConstants.java
7c7
<     public static int NETWORK_PROTOCOL_VERSION = 335;
---
>     public static int NETWORK_PROTOCOL_VERSION = 340;
9c9
<     public static String VERSION_STRING = "1.12";
---
>     public static String VERSION_STRING = "1.12.2";
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/server/integrated/IntegratedServer.java src\modified/src/minecraft/net/minecraft/server/integrated/IntegratedServer.java
33a34,36
> import optifine.Reflector;
> import optifine.WorldServerOF;
> 
70,71d72
<         this.worldServers = new WorldServer[3];
<         this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
76c77
<         if (worldinfo == null)
---
>         if (Reflector.DimensionManager.exists())
78c79,107
<             worldinfo = new WorldInfo(this.theWorldSettings, worldNameIn);
---
>             WorldServer worldserver = this.isDemo() ? (WorldServer)((WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, 0, this.theProfiler)).init()) : (WorldServer)(new WorldServerOF(this, isavehandler, worldinfo, 0, this.theProfiler)).init();
>             worldserver.initialize(this.theWorldSettings);
>             Integer[] ainteger = (Integer[])Reflector.call(Reflector.DimensionManager_getStaticDimensionIDs);
>             Integer[] ainteger1 = ainteger;
>             int i1 = ainteger.length;
> 
>             for (int j1 = 0; j1 < i1; ++j1)
>             {
>                 int k = ainteger1[j1].intValue();
>                 WorldServer worldserver1 = k == 0 ? worldserver : (WorldServer)((WorldServer)(new WorldServerMulti(this, isavehandler, k, worldserver, this.theProfiler)).init());
>                 worldserver1.addEventListener(new ServerWorldEventHandler(this, worldserver1));
> 
>                 if (!this.isSinglePlayer())
>                 {
>                     worldserver1.getWorldInfo().setGameType(this.getGameType());
>                 }
> 
>                 if (Reflector.EventBus.exists())
>                 {
>                     Reflector.postForgeBusEvent(Reflector.WorldEvent_Load_Constructor, worldserver1);
>                 }
>             }
> 
>             this.getPlayerList().setPlayerManager(new WorldServer[] {worldserver});
> 
>             if (worldserver.getWorldInfo().getDifficulty() == null)
>             {
>                 this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
>             }
82,87c111,113
<             worldinfo.setWorldName(worldNameIn);
<         }
< 
<         for (int i = 0; i < this.worldServers.length; ++i)
<         {
<             int j = 0;
---
>             this.worldServers = new WorldServer[3];
>             this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
>             this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
89c115
<             if (i == 1)
---
>             if (worldinfo == null)
91c117
<                 j = -1;
---
>                 worldinfo = new WorldInfo(this.theWorldSettings, worldNameIn);
93,94c119
< 
<             if (i == 2)
---
>             else
96c121
<                 j = 1;
---
>                 worldinfo.setWorldName(worldNameIn);
99c124
<             if (i == 0)
---
>             for (int l = 0; l < this.worldServers.length; ++l)
101c126,133
<                 if (this.isDemo())
---
>                 int i1 = 0;
> 
>                 if (l == 1)
>                 {
>                     i1 = -1;
>                 }
> 
>                 if (l == 2)
103c135,149
<                     this.worldServers[i] = (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, j, this.theProfiler)).init();
---
>                     i1 = 1;
>                 }
> 
>                 if (l == 0)
>                 {
>                     if (this.isDemo())
>                     {
>                         this.worldServers[l] = (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, i1, this.theProfiler)).init();
>                     }
>                     else
>                     {
>                         this.worldServers[l] = (WorldServer)(new WorldServerOF(this, isavehandler, worldinfo, i1, this.theProfiler)).init();
>                     }
> 
>                     this.worldServers[l].initialize(this.theWorldSettings);
107c153
<                     this.worldServers[i] = (WorldServer)(new WorldServer(this, isavehandler, worldinfo, j, this.theProfiler)).init();
---
>                     this.worldServers[l] = (WorldServer)(new WorldServerMulti(this, isavehandler, i1, this.worldServers[0], this.theProfiler)).init();
110,114c156
<                 this.worldServers[i].initialize(this.theWorldSettings);
<             }
<             else
<             {
<                 this.worldServers[i] = (WorldServer)(new WorldServerMulti(this, isavehandler, j, this.worldServers[0], this.theProfiler)).init();
---
>                 this.worldServers[l].addEventListener(new ServerWorldEventHandler(this, this.worldServers[l]));
117,120c159
<             this.worldServers[i].addEventListener(new ServerWorldEventHandler(this, this.worldServers[i]));
<         }
< 
<         this.getPlayerList().setPlayerManager(this.worldServers);
---
>             this.getPlayerList().setPlayerManager(this.worldServers);
122,124c161,164
<         if (this.worldServers[0].getWorldInfo().getDifficulty() == null)
<         {
<             this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
---
>             if (this.worldServers[0].getWorldInfo().getDifficulty() == null)
>             {
>                 this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
>             }
135c175
<         LOGGER.info("Starting integrated minecraft server version 1.12");
---
>         LOGGER.info("Starting integrated minecraft server version 1.12.2");
142a183,193
> 
>         if (Reflector.FMLCommonHandler_handleServerAboutToStart.exists())
>         {
>             Object object = Reflector.call(Reflector.FMLCommonHandler_instance);
> 
>             if (!Reflector.callBoolean(object, Reflector.FMLCommonHandler_handleServerAboutToStart, this))
>             {
>                 return false;
>             }
>         }
> 
144a196,208
> 
>         if (Reflector.FMLCommonHandler_handleServerStarting.exists())
>         {
>             Object object1 = Reflector.call(Reflector.FMLCommonHandler_instance);
> 
>             if (Reflector.FMLCommonHandler_handleServerStarting.getReturnType() == Boolean.TYPE)
>             {
>                 return Reflector.callBoolean(object1, Reflector.FMLCommonHandler_handleServerStarting, this);
>             }
> 
>             Reflector.callVoid(object1, Reflector.FMLCommonHandler_handleServerStarting, this);
>         }
> 
224c288
<         return this.mc.world.getWorldInfo().getDifficulty();
---
>         return this.mc.world == null ? this.mc.gameSettings.difficulty : this.mc.world.getWorldInfo().getDifficulty();
384c448
<         catch (IOException var6)
---
>         catch (IOException var61)
409c473
<         Futures.getUnchecked(this.addScheduledTask(new Runnable()
---
>         if (!Reflector.MinecraftForge.exists() || this.isServerRunning())
411c475
<             public void run()
---
>             Futures.getUnchecked(this.addScheduledTask(new Runnable()
413c477
<                 for (EntityPlayerMP entityplayermp : Lists.newArrayList(IntegratedServer.this.getPlayerList().getPlayerList()))
---
>                 public void run()
415c479
<                     if (!entityplayermp.getUniqueID().equals(IntegratedServer.this.mc.player.getUniqueID()))
---
>                     for (EntityPlayerMP entityplayermp : Lists.newArrayList(IntegratedServer.this.getPlayerList().getPlayerList()))
417c481,484
<                         IntegratedServer.this.getPlayerList().playerLoggedOut(entityplayermp);
---
>                         if (!entityplayermp.getUniqueID().equals(IntegratedServer.this.mc.player.getUniqueID()))
>                         {
>                             IntegratedServer.this.getPlayerList().playerLoggedOut(entityplayermp);
>                         }
420,421c487,489
<             }
<         }));
---
>             }));
>         }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/server/MinecraftServer.java src\modified/src/minecraft/net/minecraft/server/MinecraftServer.java
35a36
> import java.util.function.Supplier;
531c532
<                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.12", 335));
---
>                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.12.2", 340));
768c769,772
<                 this.theProfiler.startSection(worldserver.getWorldInfo().getWorldName());
---
>                 this.theProfiler.func_194340_a(() ->
>                 {
>                     return worldserver.getWorldInfo().getWorldName();
>                 });
874c878
<         return "1.12";
---
>         return "1.12.2";
1080c1084
<         for (WorldServer worldserver : this.worldServers)
---
>         for (WorldServer worldserver1 : this.worldServers)
1082c1086
<             if (worldserver != null)
---
>             if (worldserver1 != null)
1084c1088
<                 if (worldserver.getWorldInfo().isHardcoreModeEnabled())
---
>                 if (worldserver1.getWorldInfo().isHardcoreModeEnabled())
1086,1087c1090,1091
<                     worldserver.getWorldInfo().setDifficulty(EnumDifficulty.HARD);
<                     worldserver.setAllowedSpawnTypes(true, true);
---
>                     worldserver1.getWorldInfo().setDifficulty(EnumDifficulty.HARD);
>                     worldserver1.setAllowedSpawnTypes(true, true);
1091,1092c1095,1096
<                     worldserver.getWorldInfo().setDifficulty(difficulty);
<                     worldserver.setAllowedSpawnTypes(worldserver.getDifficulty() != EnumDifficulty.PEACEFUL, true);
---
>                     worldserver1.getWorldInfo().setDifficulty(difficulty);
>                     worldserver1.setAllowedSpawnTypes(worldserver1.getDifficulty() != EnumDifficulty.PEACEFUL, true);
1096,1097c1100,1101
<                     worldserver.getWorldInfo().setDifficulty(difficulty);
<                     worldserver.setAllowedSpawnTypes(this.allowSpawnMonsters(), this.canSpawnAnimals);
---
>                     worldserver1.getWorldInfo().setDifficulty(difficulty);
>                     worldserver1.setAllowedSpawnTypes(this.allowSpawnMonsters(), this.canSpawnAnimals);
1166c1170
<         int i = 0;
---
>         int l = 0;
1170c1174
<             for (WorldServer worldserver : this.worldServers)
---
>             for (WorldServer worldserver1 : this.worldServers)
1172c1176
<                 if (worldserver != null)
---
>                 if (worldserver1 != null)
1174,1183c1178,1187
<                     WorldInfo worldinfo = worldserver.getWorldInfo();
<                     playerSnooper.addClientStat("world[" + i + "][dimension]", Integer.valueOf(worldserver.provider.getDimensionType().getId()));
<                     playerSnooper.addClientStat("world[" + i + "][mode]", worldinfo.getGameType());
<                     playerSnooper.addClientStat("world[" + i + "][difficulty]", worldserver.getDifficulty());
<                     playerSnooper.addClientStat("world[" + i + "][hardcore]", Boolean.valueOf(worldinfo.isHardcoreModeEnabled()));
<                     playerSnooper.addClientStat("world[" + i + "][generator_name]", worldinfo.getTerrainType().getWorldTypeName());
<                     playerSnooper.addClientStat("world[" + i + "][generator_version]", Integer.valueOf(worldinfo.getTerrainType().getGeneratorVersion()));
<                     playerSnooper.addClientStat("world[" + i + "][height]", Integer.valueOf(this.buildLimit));
<                     playerSnooper.addClientStat("world[" + i + "][chunks_loaded]", Integer.valueOf(worldserver.getChunkProvider().getLoadedChunkCount()));
<                     ++i;
---
>                     WorldInfo worldinfo = worldserver1.getWorldInfo();
>                     playerSnooper.addClientStat("world[" + l + "][dimension]", Integer.valueOf(worldserver1.provider.getDimensionType().getId()));
>                     playerSnooper.addClientStat("world[" + l + "][mode]", worldinfo.getGameType());
>                     playerSnooper.addClientStat("world[" + l + "][difficulty]", worldserver1.getDifficulty());
>                     playerSnooper.addClientStat("world[" + l + "][hardcore]", Boolean.valueOf(worldinfo.isHardcoreModeEnabled()));
>                     playerSnooper.addClientStat("world[" + l + "][generator_name]", worldinfo.getTerrainType().getWorldTypeName());
>                     playerSnooper.addClientStat("world[" + l + "][generator_version]", Integer.valueOf(worldinfo.getTerrainType().getGeneratorVersion()));
>                     playerSnooper.addClientStat("world[" + l + "][height]", Integer.valueOf(this.buildLimit));
>                     playerSnooper.addClientStat("world[" + l + "][chunks_loaded]", Integer.valueOf(worldserver1.getChunkProvider().getLoadedChunkCount()));
>                     ++l;
1188c1192
<         playerSnooper.addClientStat("worlds", Integer.valueOf(i));
---
>         playerSnooper.addClientStat("worlds", Integer.valueOf(l));
1315c1319
<         for (WorldServer worldserver : this.worldServers)
---
>         for (WorldServer worldserver1 : this.worldServers)
1317c1321
<             worldserver.getWorldInfo().setGameType(gameMode);
---
>             worldserver1.getWorldInfo().setGameType(gameMode);
1426c1430
<         for (WorldServer worldserver : this.worldServers)
---
>         for (WorldServer worldserver1 : this.worldServers)
1428c1432
<             if (worldserver != null)
---
>             if (worldserver1 != null)
1430c1434
<                 Entity entity = worldserver.getEntityFromUuid(uuid);
---
>                 Entity entity = worldserver1.getEntityFromUuid(uuid);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/server/network/NetHandlerHandshakeTCP.java src\modified/src/minecraft/net/minecraft/server/network/NetHandlerHandshakeTCP.java
35c35
<                 if (packetIn.getProtocolVersion() > 335)
---
>                 if (packetIn.getProtocolVersion() > 340)
37c37
<                     ITextComponent itextcomponent = new TextComponentTranslation("multiplayer.disconnect.outdated_server", new Object[] {"1.12"});
---
>                     ITextComponent itextcomponent = new TextComponentTranslation("multiplayer.disconnect.outdated_server", new Object[] {"1.12.2"});
41c41
<                 else if (packetIn.getProtocolVersion() < 335)
---
>                 else if (packetIn.getProtocolVersion() < 340)
43c43
<                     ITextComponent itextcomponent1 = new TextComponentTranslation("multiplayer.disconnect.outdated_client", new Object[] {"1.12"});
---
>                     ITextComponent itextcomponent1 = new TextComponentTranslation("multiplayer.disconnect.outdated_client", new Object[] {"1.12.2"});
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/stats/RecipeBook.java src\modified/src/minecraft/net/minecraft/stats/RecipeBook.java
3a4
> import javax.annotation.Nullable;
30c31
<     public boolean func_193830_f(IRecipe p_193830_1_)
---
>     public boolean func_193830_f(@Nullable IRecipe p_193830_1_)
42c43
<     protected static int func_194075_d(IRecipe p_194075_0_)
---
>     protected static int func_194075_d(@Nullable IRecipe p_194075_0_)
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/util/datafix/DataFixer.java src\modified/src/minecraft/net/minecraft/util/datafix/DataFixer.java
27c27
<         return i >= 1139 ? compound : this.process(type, compound, i);
---
>         return i >= 1343 ? compound : this.process(type, compound, i);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/util/datafix/DataFixesManager.java src\modified/src/minecraft/net/minecraft/util/datafix/DataFixesManager.java
167c167
<         DataFixer datafixer = new DataFixer(1139);
---
>         DataFixer datafixer = new DataFixer(1343);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/util/EnumFacing.java src\modified/src/minecraft/net/minecraft/util/EnumFacing.java
41c41
<     private static final EnumFacing[] VALUES = new EnumFacing[6];
---
>     public static final EnumFacing[] VALUES = new EnumFacing[6];
87c87
<         return getFront(this.opposite);
---
>         return VALUES[this.opposite];
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/util/IntegerCache.java src\modified/src/minecraft/net/minecraft/util/IntegerCache.java
12c12
<         return value > 0 && value < CACHE.length ? CACHE[value] : value;
---
>         return value > 0 && value < CACHE.length ? CACHE[value].intValue() : value;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/util/math/ChunkPos.java src\modified/src/minecraft/net/minecraft/util/math/ChunkPos.java
11a12
>     private int cachedHashCode = 0;
35,37c36,46
<         int i = 1664525 * this.chunkXPos + 1013904223;
<         int j = 1664525 * (this.chunkZPos ^ -559038737) + 1013904223;
<         return i ^ j;
---
>         if (this.cachedHashCode != 0)
>         {
>             return this.cachedHashCode;
>         }
>         else
>         {
>             int i = 1664525 * this.chunkXPos + 1013904223;
>             int j = 1664525 * (this.chunkZPos ^ -559038737) + 1013904223;
>             this.cachedHashCode = i ^ j;
>             return this.cachedHashCode;
>         }
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/util/math/MathHelper.java src\modified/src/minecraft/net/minecraft/util/math/MathHelper.java
8a9,21
>     private static final int SIN_BITS = 12;
>     private static final int SIN_MASK = 4095;
>     private static final int SIN_COUNT = 4096;
>     public static final float PI = (float)Math.PI;
>     public static final float PI2 = ((float)Math.PI * 2F);
>     public static final float PId2 = ((float)Math.PI / 2F);
>     private static final float radFull = ((float)Math.PI * 2F);
>     private static final float degFull = 360.0F;
>     private static final float radToIndex = 651.8986F;
>     private static final float degToIndex = 11.377778F;
>     public static final float deg2Rad = 0.017453292F;
>     private static final float[] SIN_TABLE_FAST = new float[4096];
>     public static boolean fastMath = false;
33c46
<         return SIN_TABLE[(int)(value * 10430.378F) & 65535];
---
>         return fastMath ? SIN_TABLE_FAST[(int)(value * 651.8986F) & 4095] : SIN_TABLE[(int)(value * 10430.378F) & 65535];
41c54
<         return SIN_TABLE[(int)(value * 10430.378F + 16384.0F) & 65535];
---
>         return fastMath ? SIN_TABLE_FAST[(int)((value + ((float)Math.PI / 2F)) * 651.8986F) & 4095] : SIN_TABLE[(int)(value * 10430.378F + 16384.0F) & 65535];
434,436c447,449
<         int lvt_3_1_ = (rIn << 8) + gIn;
<         lvt_3_1_ = (lvt_3_1_ << 8) + bIn;
<         return lvt_3_1_;
---
>         int i = (rIn << 8) + gIn;
>         i = (i << 8) + bIn;
>         return i;
642a656,665
>         for (int j = 0; j < 4096; ++j)
>         {
>             SIN_TABLE_FAST[j] = (float)Math.sin((double)(((float)j + 0.5F) / 4096.0F * ((float)Math.PI * 2F)));
>         }
> 
>         for (int k = 0; k < 360; k += 90)
>         {
>             SIN_TABLE_FAST[(int)((float)k * 11.377778F) & 4095] = (float)Math.sin((double)((float)k * 0.017453292F));
>         }
> 
648c671
<         for (int j = 0; j < 257; ++j)
---
>         for (int l = 0; l < 257; ++l)
650c673
<             double d0 = (double)j / 256.0D;
---
>             double d0 = (double)l / 256.0D;
652,653c675,676
<             COS_TAB[j] = Math.cos(d1);
<             ASINE_TAB[j] = d1;
---
>             COS_TAB[l] = Math.cos(d1);
>             ASINE_TAB[l] = d1;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/util/ScreenShotHelper.java src\modified/src/minecraft/net/minecraft/util/ScreenShotHelper.java
10a11,12
> import net.minecraft.client.Minecraft;
> import net.minecraft.client.gui.ScaledResolution;
18a21,23
> import optifine.Config;
> import optifine.Reflector;
> 
54a60,76
>             Minecraft minecraft = Minecraft.getMinecraft();
>             int i = Config.getGameSettings().guiScale;
>             ScaledResolution scaledresolution = new ScaledResolution(minecraft);
>             int j = scaledresolution.getScaleFactor();
>             int k = Config.getScreenshotSize();
>             boolean flag = OpenGlHelper.isFramebufferEnabled() && k > 1;
> 
>             if (flag)
>             {
>                 Config.getGameSettings().guiScale = j * k;
>                 resize(width * k, height * k);
>                 GlStateManager.pushMatrix();
>                 GlStateManager.clear(16640);
>                 minecraft.getFramebuffer().bindFramebuffer(true);
>                 minecraft.entityRenderer.updateCameraAndRender(minecraft.getRenderPartialTicks(), System.nanoTime());
>             }
> 
55a78,86
> 
>             if (flag)
>             {
>                 minecraft.getFramebuffer().unbindFramebuffer();
>                 GlStateManager.popMatrix();
>                 Config.getGameSettings().guiScale = i;
>                 resize(width, height);
>             }
> 
66a98,112
>             file2 = file2.getCanonicalFile();
>             Object object = null;
> 
>             if (Reflector.ForgeHooksClient_onScreenshot.exists())
>             {
>                 object = Reflector.call(Reflector.ForgeHooksClient_onScreenshot, bufferedimage, file2);
> 
>                 if (Reflector.callBoolean(object, Reflector.Event_isCanceled))
>                 {
>                     return (ITextComponent)Reflector.call(object, Reflector.ScreenshotEvent_getCancelMessage);
>                 }
> 
>                 file2 = (File)Reflector.call(object, Reflector.ScreenshotEvent_getScreenshotFile);
>             }
> 
70a117,127
> 
>             if (object != null)
>             {
>                 ITextComponent itextcomponent1 = (ITextComponent)Reflector.call(object, Reflector.ScreenshotEvent_getResultMessage);
> 
>                 if (itextcomponent1 != null)
>                 {
>                     return itextcomponent1;
>                 }
>             }
> 
73c130
<         catch (Exception exception)
---
>         catch (Exception exception1)
75,76c132,133
<             LOGGER.warn("Couldn't save screenshot", (Throwable)exception);
<             return new TextComponentTranslation("screenshot.failure", new Object[] {exception.getMessage()});
---
>             LOGGER.warn("Couldn't save screenshot", (Throwable)exception1);
>             return new TextComponentTranslation("screenshot.failure", new Object[] {exception1.getMessage()});
139a197,222
> 
>     private static void resize(int p_resize_0_, int p_resize_1_)
>     {
>         Minecraft minecraft = Minecraft.getMinecraft();
>         minecraft.displayWidth = Math.max(1, p_resize_0_);
>         minecraft.displayHeight = Math.max(1, p_resize_1_);
> 
>         if (minecraft.currentScreen != null)
>         {
>             ScaledResolution scaledresolution = new ScaledResolution(minecraft);
>             minecraft.currentScreen.onResize(minecraft, scaledresolution.getScaledWidth(), scaledresolution.getScaledHeight());
>         }
> 
>         updateFramebufferSize();
>     }
> 
>     private static void updateFramebufferSize()
>     {
>         Minecraft minecraft = Minecraft.getMinecraft();
>         minecraft.getFramebuffer().createBindFramebuffer(minecraft.displayWidth, minecraft.displayHeight);
> 
>         if (minecraft.entityRenderer != null)
>         {
>             minecraft.entityRenderer.updateShaderGroupSize(minecraft.displayWidth, minecraft.displayHeight);
>         }
>     }
Only in src\modified/src/minecraft/net/minecraft/util: ServerRecipeBookHelper.java
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java src\modified/src/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
133c133
<             nbttagcompound.setInteger("DataVersion", 1139);
---
>             nbttagcompound.setInteger("DataVersion", 1343);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/world/chunk/storage/ExtendedBlockStorage.java src\modified/src/minecraft/net/minecraft/world/chunk/storage/ExtendedBlockStorage.java
7a8
> import optifine.Reflector;
52a54,58
>         if (Reflector.IExtendedBlockState.isInstance(state))
>         {
>             state = (IBlockState)Reflector.call(state, Reflector.IExtendedBlockState_getClean);
>         }
> 
139,140c145,147
<         this.blockRefCount = 0;
<         this.tickRefCount = 0;
---
>         IBlockState iblockstate = Blocks.AIR.getDefaultState();
>         int i = 0;
>         int j = 0;
142c149
<         for (int i = 0; i < 16; ++i)
---
>         for (int k = 0; k < 16; ++k)
144c151
<             for (int j = 0; j < 16; ++j)
---
>             for (int l = 0; l < 16; ++l)
146c153
<                 for (int k = 0; k < 16; ++k)
---
>                 for (int i1 = 0; i1 < 16; ++i1)
148c155
<                     Block block = this.get(i, j, k).getBlock();
---
>                     IBlockState iblockstate1 = this.data.get(i1, k, l);
150c157
<                     if (block != Blocks.AIR)
---
>                     if (iblockstate1 != iblockstate)
152c159,160
<                         ++this.blockRefCount;
---
>                         ++i;
>                         Block block = iblockstate1.getBlock();
156c164
<                             ++this.tickRefCount;
---
>                             ++j;
161a170,172
> 
>         this.blockRefCount = i;
>         this.tickRefCount = j;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/world/GameRules.java src\modified/src/minecraft/net/minecraft/world/GameRules.java
148a149,164
> 
>             if (value != null)
>             {
>                 if (value.equals("false"))
>                 {
>                     this.valueBoolean = false;
>                     return;
>                 }
> 
>                 if (value.equals("true"))
>                 {
>                     this.valueBoolean = true;
>                     return;
>                 }
>             }
> 
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/world/gen/structure/template/Template.java src\modified/src/minecraft/net/minecraft/world/gen/structure/template/Template.java
554c554
<         nbt.setInteger("DataVersion", 1139);
---
>         nbt.setInteger("DataVersion", 1343);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/world/storage/WorldInfo.java src\modified/src/minecraft/net/minecraft/world/storage/WorldInfo.java
369,370c369,370
<         nbttagcompound.setString("Name", "1.12");
<         nbttagcompound.setInteger("Id", 1139);
---
>         nbttagcompound.setString("Name", "1.12.2");
>         nbttagcompound.setInteger("Id", 1343);
373c373
<         nbt.setInteger("DataVersion", 1139);
---
>         nbt.setInteger("DataVersion", 1343);
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/world/storage/WorldSummary.java src\modified/src/minecraft/net/minecraft/world/storage/WorldSummary.java
117c117
<         return this.versionId > 1139;
---
>         return this.versionId > 1343;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/world/World.java src\modified/src/minecraft/net/minecraft/world/World.java
12a13
> import java.util.function.Supplier;
1825a1827,1834
> 
>         if (!this.tileEntitiesToBeRemoved.isEmpty())
>         {
>             this.tickableTileEntities.removeAll(this.tileEntitiesToBeRemoved);
>             this.loadedTileEntityList.removeAll(this.tileEntitiesToBeRemoved);
>             this.tileEntitiesToBeRemoved.clear();
>         }
> 
1841c1850,1853
<                         this.theProfiler.startSection(tileentity.getClass().getSimpleName());
---
>                         this.theProfiler.func_194340_a(() ->
>                         {
>                             return String.valueOf((Object)TileEntity.func_190559_a(tileentity.getClass()));
>                         });
1868,1875d1879
< 
<         if (!this.tileEntitiesToBeRemoved.isEmpty())
<         {
<             this.tickableTileEntities.removeAll(this.tileEntitiesToBeRemoved);
<             this.loadedTileEntityList.removeAll(this.tileEntitiesToBeRemoved);
<             this.tileEntitiesToBeRemoved.clear();
<         }
< 
1923,1925c1927,1929
<             BlockPos blockpos = tile.getPos();
<             IBlockState iblockstate = this.getBlockState(blockpos);
<             this.notifyBlockUpdate(blockpos, iblockstate, iblockstate, 2);
---
>             BlockPos blockpos1 = tile.getPos();
>             IBlockState iblockstate1 = this.getBlockState(blockpos1);
>             this.notifyBlockUpdate(blockpos1, iblockstate1, iblockstate1, 2);
1939c1943
<             for (TileEntity tileentity : tileEntityCollection)
---
>             for (TileEntity tileentity2 : tileEntityCollection)
1941c1945
<                 this.addTileEntity(tileentity);
---
>                 this.addTileEntity(tileentity2);
1961,1963c1965,1967
<             int i = MathHelper.floor(entityIn.posX);
<             int j = MathHelper.floor(entityIn.posZ);
<             int k = 32;
---
>             int j2 = MathHelper.floor(entityIn.posX);
>             int k2 = MathHelper.floor(entityIn.posZ);
>             int l2 = 32;
1965c1969
<             if (forceUpdate && !this.isAreaLoaded(i - 32, 0, j - 32, i + 32, 0, j + 32, true))
---
>             if (forceUpdate && !this.isAreaLoaded(j2 - 32, 0, k2 - 32, j2 + 32, 0, k2 + 32, true))
2018,2020c2022,2024
<         int l = MathHelper.floor(entityIn.posX / 16.0D);
<         int i1 = MathHelper.floor(entityIn.posY / 16.0D);
<         int j1 = MathHelper.floor(entityIn.posZ / 16.0D);
---
>         int i3 = MathHelper.floor(entityIn.posX / 16.0D);
>         int j3 = MathHelper.floor(entityIn.posY / 16.0D);
>         int k3 = MathHelper.floor(entityIn.posZ / 16.0D);
2022c2026
<         if (!entityIn.addedToChunk || entityIn.chunkCoordX != l || entityIn.chunkCoordY != i1 || entityIn.chunkCoordZ != j1)
---
>         if (!entityIn.addedToChunk || entityIn.chunkCoordX != i3 || entityIn.chunkCoordY != j3 || entityIn.chunkCoordZ != k3)
2029c2033
<             if (!entityIn.setPositionNonDirty() && !this.isChunkLoaded(l, j1, true))
---
>             if (!entityIn.setPositionNonDirty() && !this.isChunkLoaded(i3, k3, true))
2035c2039
<                 this.getChunkFromChunkCoords(l, j1).addEntity(entityIn);
---
>                 this.getChunkFromChunkCoords(i3, k3).addEntity(entityIn);
2043c2047
<             for (Entity entity : entityIn.getPassengers())
---
>             for (Entity entity4 : entityIn.getPassengers())
2045c2049
<                 if (!entity.isDead && entity.getRidingEntity() == entityIn)
---
>                 if (!entity4.isDead && entity4.getRidingEntity() == entityIn)
2047c2051
<                     this.updateEntity(entity);
---
>                     this.updateEntity(entity4);
2051c2055
<                     entity.dismountRidingEntity();
---
>                     entity4.dismountRidingEntity();
2072c2076
<         for (int i = 0; i < list.size(); ++i)
---
>         for (int j2 = 0; j2 < list.size(); ++j2)
2074c2078
<             Entity entity = list.get(i);
---
>             Entity entity4 = list.get(j2);
2076c2080
<             if (!entity.isDead && entity.preventEntitySpawning && entity != entityIn && (entityIn == null || entity.isRidingSameEntity(entityIn)))
---
>             if (!entity4.isDead && entity4.preventEntitySpawning && entity4 != entityIn && (entityIn == null || entity4.isRidingSameEntity(entityIn)))
2090,2095c2094,2099
<         int i = MathHelper.floor(bb.minX);
<         int j = MathHelper.ceil(bb.maxX);
<         int k = MathHelper.floor(bb.minY);
<         int l = MathHelper.ceil(bb.maxY);
<         int i1 = MathHelper.floor(bb.minZ);
<         int j1 = MathHelper.ceil(bb.maxZ);
---
>         int j2 = MathHelper.floor(bb.minX);
>         int k2 = MathHelper.ceil(bb.maxX);
>         int l2 = MathHelper.floor(bb.minY);
>         int i3 = MathHelper.ceil(bb.maxY);
>         int j3 = MathHelper.floor(bb.minZ);
>         int k3 = MathHelper.ceil(bb.maxZ);
2098c2102
<         for (int k1 = i; k1 < j; ++k1)
---
>         for (int l3 = j2; l3 < k2; ++l3)
2100c2104
<             for (int l1 = k; l1 < l; ++l1)
---
>             for (int i4 = l2; i4 < i3; ++i4)
2102c2106
<                 for (int i2 = i1; i2 < j1; ++i2)
---
>                 for (int j4 = j3; j4 < k3; ++j4)
2104c2108
<                     IBlockState iblockstate = this.getBlockState(blockpos$pooledmutableblockpos.setPos(k1, l1, i2));
---
>                     IBlockState iblockstate1 = this.getBlockState(blockpos$pooledmutableblockpos.setPos(l3, i4, j4));
2106c2110
<                     if (iblockstate.getMaterial() != Material.AIR)
---
>                     if (iblockstate1.getMaterial() != Material.AIR)
2124,2129c2128,2133
<         int i = MathHelper.floor(bb.minX);
<         int j = MathHelper.ceil(bb.maxX);
<         int k = MathHelper.floor(bb.minY);
<         int l = MathHelper.ceil(bb.maxY);
<         int i1 = MathHelper.floor(bb.minZ);
<         int j1 = MathHelper.ceil(bb.maxZ);
---
>         int j2 = MathHelper.floor(bb.minX);
>         int k2 = MathHelper.ceil(bb.maxX);
>         int l2 = MathHelper.floor(bb.minY);
>         int i3 = MathHelper.ceil(bb.maxY);
>         int j3 = MathHelper.floor(bb.minZ);
>         int k3 = MathHelper.ceil(bb.maxZ);
2132c2136
<         for (int k1 = i; k1 < j; ++k1)
---
>         for (int l3 = j2; l3 < k2; ++l3)
2134c2138
<             for (int l1 = k; l1 < l; ++l1)
---
>             for (int i4 = l2; i4 < i3; ++i4)
2136c2140
<                 for (int i2 = i1; i2 < j1; ++i2)
---
>                 for (int j4 = j3; j4 < k3; ++j4)
2138c2142
<                     IBlockState iblockstate = this.getBlockState(blockpos$pooledmutableblockpos.setPos(k1, l1, i2));
---
>                     IBlockState iblockstate1 = this.getBlockState(blockpos$pooledmutableblockpos.setPos(l3, i4, j4));
2140c2144
<                     if (iblockstate.getMaterial().isLiquid())
---
>                     if (iblockstate1.getMaterial().isLiquid())
2155,2160c2159,2164
<         int i = MathHelper.floor(bb.minX);
<         int j = MathHelper.ceil(bb.maxX);
<         int k = MathHelper.floor(bb.minY);
<         int l = MathHelper.ceil(bb.maxY);
<         int i1 = MathHelper.floor(bb.minZ);
<         int j1 = MathHelper.ceil(bb.maxZ);
---
>         int j2 = MathHelper.floor(bb.minX);
>         int k2 = MathHelper.ceil(bb.maxX);
>         int l2 = MathHelper.floor(bb.minY);
>         int i3 = MathHelper.ceil(bb.maxY);
>         int j3 = MathHelper.floor(bb.minZ);
>         int k3 = MathHelper.ceil(bb.maxZ);
2162c2166
<         if (this.isAreaLoaded(i, k, i1, j, l, j1, true))
---
>         if (this.isAreaLoaded(j2, l2, j3, k2, i3, k3, true))
2166c2170
<             for (int k1 = i; k1 < j; ++k1)
---
>             for (int l3 = j2; l3 < k2; ++l3)
2168c2172
<                 for (int l1 = k; l1 < l; ++l1)
---
>                 for (int i4 = l2; i4 < i3; ++i4)
2170c2174
<                     for (int i2 = i1; i2 < j1; ++i2)
---
>                     for (int j4 = j3; j4 < k3; ++j4)
2172c2176
<                         Block block = this.getBlockState(blockpos$pooledmutableblockpos.setPos(k1, l1, i2)).getBlock();
---
>                         Block block = this.getBlockState(blockpos$pooledmutableblockpos.setPos(l3, i4, j4)).getBlock();
2194,2199c2198,2203
<         int i = MathHelper.floor(bb.minX);
<         int j = MathHelper.ceil(bb.maxX);
<         int k = MathHelper.floor(bb.minY);
<         int l = MathHelper.ceil(bb.maxY);
<         int i1 = MathHelper.floor(bb.minZ);
<         int j1 = MathHelper.ceil(bb.maxZ);
---
>         int j2 = MathHelper.floor(bb.minX);
>         int k2 = MathHelper.ceil(bb.maxX);
>         int l2 = MathHelper.floor(bb.minY);
>         int i3 = MathHelper.ceil(bb.maxY);
>         int j3 = MathHelper.floor(bb.minZ);
>         int k3 = MathHelper.ceil(bb.maxZ);
2201c2205
<         if (!this.isAreaLoaded(i, k, i1, j, l, j1, true))
---
>         if (!this.isAreaLoaded(j2, l2, j3, k2, i3, k3, true))
2211c2215
<             for (int k1 = i; k1 < j; ++k1)
---
>             for (int l3 = j2; l3 < k2; ++l3)
2213c2217
<                 for (int l1 = k; l1 < l; ++l1)
---
>                 for (int i4 = l2; i4 < i3; ++i4)
2215c2219
<                     for (int i2 = i1; i2 < j1; ++i2)
---
>                     for (int j4 = j3; j4 < k3; ++j4)
2217,2219c2221,2223
<                         blockpos$pooledmutableblockpos.setPos(k1, l1, i2);
<                         IBlockState iblockstate = this.getBlockState(blockpos$pooledmutableblockpos);
<                         Block block = iblockstate.getBlock();
---
>                         blockpos$pooledmutableblockpos.setPos(l3, i4, j4);
>                         IBlockState iblockstate1 = this.getBlockState(blockpos$pooledmutableblockpos);
>                         Block block = iblockstate1.getBlock();
2221c2225
<                         if (iblockstate.getMaterial() == materialIn)
---
>                         if (iblockstate1.getMaterial() == materialIn)
2223c2227
<                             double d0 = (double)((float)(l1 + 1) - BlockLiquid.getLiquidHeightPercent(((Integer)iblockstate.getValue(BlockLiquid.LEVEL)).intValue()));
---
>                             double d0 = (double)((float)(i4 + 1) - BlockLiquid.getLiquidHeightPercent(((Integer)iblockstate1.getValue(BlockLiquid.LEVEL)).intValue()));
2225c2229
<                             if ((double)l >= d0)
---
>                             if ((double)i3 >= d0)
2255,2260c2259,2264
<         int i = MathHelper.floor(bb.minX);
<         int j = MathHelper.ceil(bb.maxX);
<         int k = MathHelper.floor(bb.minY);
<         int l = MathHelper.ceil(bb.maxY);
<         int i1 = MathHelper.floor(bb.minZ);
<         int j1 = MathHelper.ceil(bb.maxZ);
---
>         int j2 = MathHelper.floor(bb.minX);
>         int k2 = MathHelper.ceil(bb.maxX);
>         int l2 = MathHelper.floor(bb.minY);
>         int i3 = MathHelper.ceil(bb.maxY);
>         int j3 = MathHelper.floor(bb.minZ);
>         int k3 = MathHelper.ceil(bb.maxZ);
2263c2267
<         for (int k1 = i; k1 < j; ++k1)
---
>         for (int l3 = j2; l3 < k2; ++l3)
2265c2269
<             for (int l1 = k; l1 < l; ++l1)
---
>             for (int i4 = l2; i4 < i3; ++i4)
2267c2271
<                 for (int i2 = i1; i2 < j1; ++i2)
---
>                 for (int j4 = j3; j4 < k3; ++j4)
2269c2273
<                     if (this.getBlockState(blockpos$pooledmutableblockpos.setPos(k1, l1, i2)).getMaterial() == materialIn)
---
>                     if (this.getBlockState(blockpos$pooledmutableblockpos.setPos(l3, i4, j4)).getMaterial() == materialIn)
2314,2315c2318,2319
<             int i = 0;
<             int j = 0;
---
>             int j2 = 0;
>             int k2 = 0;
2329c2333
<                             ++i;
---
>                             ++j2;
2332c2336
<                         ++j;
---
>                         ++k2;
2337c2341
<             return (float)i / (float)j;
---
>             return (float)j2 / (float)k2;
2389c2393
<             TileEntity tileentity = null;
---
>             TileEntity tileentity2 = null;
2393c2397
<                 tileentity = this.getPendingTileEntityAt(pos);
---
>                 tileentity2 = this.getPendingTileEntityAt(pos);
2396c2400
<             if (tileentity == null)
---
>             if (tileentity2 == null)
2398c2402
<                 tileentity = this.getChunkFromBlockCoords(pos).getTileEntity(pos, Chunk.EnumCreateEntityType.IMMEDIATE);
---
>                 tileentity2 = this.getChunkFromBlockCoords(pos).getTileEntity(pos, Chunk.EnumCreateEntityType.IMMEDIATE);
2401c2405
<             if (tileentity == null)
---
>             if (tileentity2 == null)
2403c2407
<                 tileentity = this.getPendingTileEntityAt(pos);
---
>                 tileentity2 = this.getPendingTileEntityAt(pos);
2406c2410
<             return tileentity;
---
>             return tileentity2;
2413c2417
<         for (int i = 0; i < this.addedTileEntityList.size(); ++i)
---
>         for (int j2 = 0; j2 < this.addedTileEntityList.size(); ++j2)
2415c2419
<             TileEntity tileentity = this.addedTileEntityList.get(i);
---
>             TileEntity tileentity2 = this.addedTileEntityList.get(j2);
2417c2421
<             if (!tileentity.isInvalid() && tileentity.getPos().equals(p_189508_1_))
---
>             if (!tileentity2.isInvalid() && tileentity2.getPos().equals(p_189508_1_))
2419c2423
<                 return tileentity;
---
>                 return tileentity2;
2435c2439
<                     Iterator<TileEntity> iterator = this.addedTileEntityList.iterator();
---
>                     Iterator<TileEntity> iterator1 = this.addedTileEntityList.iterator();
2437c2441
<                     while (iterator.hasNext())
---
>                     while (iterator1.hasNext())
2439c2443
<                         TileEntity tileentity = iterator.next();
---
>                         TileEntity tileentity2 = iterator1.next();
2441c2445
<                         if (tileentity.getPos().equals(pos))
---
>                         if (tileentity2.getPos().equals(pos))
2443,2444c2447,2448
<                             tileentity.invalidate();
<                             iterator.remove();
---
>                             tileentity2.invalidate();
>                             iterator1.remove();
2461c2465
<         TileEntity tileentity = this.getTileEntity(pos);
---
>         TileEntity tileentity2 = this.getTileEntity(pos);
2463c2467
<         if (tileentity != null && this.processingLoadedTiles)
---
>         if (tileentity2 != null && this.processingLoadedTiles)
2465,2466c2469,2470
<             tileentity.invalidate();
<             this.addedTileEntityList.remove(tileentity);
---
>             tileentity2.invalidate();
>             this.addedTileEntityList.remove(tileentity2);
2470c2474
<             if (tileentity != null)
---
>             if (tileentity2 != null)
2472,2474c2476,2478
<                 this.addedTileEntityList.remove(tileentity);
<                 this.loadedTileEntityList.remove(tileentity);
<                 this.tickableTileEntities.remove(tileentity);
---
>                 this.addedTileEntityList.remove(tileentity2);
>                 this.loadedTileEntityList.remove(tileentity2);
>                 this.tickableTileEntities.remove(tileentity2);
2506c2510
<             Chunk chunk = this.chunkProvider.getLoadedChunk(pos.getX() >> 4, pos.getZ() >> 4);
---
>             Chunk chunk1 = this.chunkProvider.getLoadedChunk(pos.getX() >> 4, pos.getZ() >> 4);
2508c2512
<             if (chunk != null && !chunk.isEmpty())
---
>             if (chunk1 != null && !chunk1.isEmpty())
2510,2511c2514,2515
<                 IBlockState iblockstate = this.getBlockState(pos);
<                 return iblockstate.getMaterial().isOpaque() && iblockstate.isFullCube();
---
>                 IBlockState iblockstate1 = this.getBlockState(pos);
>                 return iblockstate1.getMaterial().isOpaque() && iblockstate1.isFullCube();
2525c2529
<         int i = this.calculateSkylightSubtracted(1.0F);
---
>         int j2 = this.calculateSkylightSubtracted(1.0F);
2527c2531
<         if (i != this.skylightSubtracted)
---
>         if (j2 != this.skylightSubtracted)
2529c2533
<             this.skylightSubtracted = i;
---
>             this.skylightSubtracted = j2;
2579c2583
<                     int i = this.worldInfo.getCleanWeatherTime();
---
>                     int j2 = this.worldInfo.getCleanWeatherTime();
2581c2585
<                     if (i > 0)
---
>                     if (j2 > 0)
2583,2584c2587,2588
<                         --i;
<                         this.worldInfo.setCleanWeatherTime(i);
---
>                         --j2;
>                         this.worldInfo.setCleanWeatherTime(j2);
2589c2593
<                     int j = this.worldInfo.getThunderTime();
---
>                     int k2 = this.worldInfo.getThunderTime();
2591c2595
<                     if (j <= 0)
---
>                     if (k2 <= 0)
2604,2605c2608,2609
<                         --j;
<                         this.worldInfo.setThunderTime(j);
---
>                         --k2;
>                         this.worldInfo.setThunderTime(k2);
2607c2611
<                         if (j <= 0)
---
>                         if (k2 <= 0)
2613c2617
<                     int k = this.worldInfo.getRainTime();
---
>                     int l2 = this.worldInfo.getRainTime();
2615c2619
<                     if (k <= 0)
---
>                     if (l2 <= 0)
2628,2629c2632,2633
<                         --k;
<                         this.worldInfo.setRainTime(k);
---
>                         --l2;
>                         this.worldInfo.setRainTime(l2);
2631c2635
<                         if (k <= 0)
---
>                         if (l2 <= 0)
2708,2709c2712,2713
<                 IBlockState iblockstate = this.getBlockState(pos);
<                 Block block = iblockstate.getBlock();
---
>                 IBlockState iblockstate1 = this.getBlockState(pos);
>                 Block block = iblockstate1.getBlock();
2711c2715
<                 if ((block == Blocks.WATER || block == Blocks.FLOWING_WATER) && ((Integer)iblockstate.getValue(BlockLiquid.LEVEL)).intValue() == 0)
---
>                 if ((block == Blocks.WATER || block == Blocks.FLOWING_WATER) && ((Integer)iblockstate1.getValue(BlockLiquid.LEVEL)).intValue() == 0)
2756c2760
<                 IBlockState iblockstate = this.getBlockState(pos);
---
>                 IBlockState iblockstate1 = this.getBlockState(pos);
2758c2762
<                 if (iblockstate.getMaterial() == Material.AIR && Blocks.SNOW_LAYER.canPlaceBlockAt(this, pos))
---
>                 if (iblockstate1.getMaterial() == Material.AIR && Blocks.SNOW_LAYER.canPlaceBlockAt(this, pos))
2792,2794c2796,2798
<             IBlockState iblockstate = this.getBlockState(pos);
<             int i = lightType == EnumSkyBlock.SKY ? 0 : iblockstate.getLightValue();
<             int j = iblockstate.getLightOpacity();
---
>             IBlockState iblockstate1 = this.getBlockState(pos);
>             int j2 = lightType == EnumSkyBlock.SKY ? 0 : iblockstate1.getLightValue();
>             int k2 = iblockstate1.getLightOpacity();
2796c2800
<             if (j >= 15 && iblockstate.getLightValue() > 0)
---
>             if (k2 >= 15 && iblockstate1.getLightValue() > 0)
2798c2802
<                 j = 1;
---
>                 k2 = 1;
2801c2805
<             if (j < 1)
---
>             if (k2 < 1)
2803c2807
<                 j = 1;
---
>                 k2 = 1;
2806c2810
<             if (j >= 15)
---
>             if (k2 >= 15)
2810c2814
<             else if (i >= 14)
---
>             else if (j2 >= 14)
2812c2816
<                 return i;
---
>                 return j2;
2823c2827
<                         int k = this.getLightFor(lightType, blockpos$pooledmutableblockpos) - j;
---
>                         int l2 = this.getLightFor(lightType, blockpos$pooledmutableblockpos) - k2;
2825c2829
<                         if (k > i)
---
>                         if (l2 > j2)
2827c2831
<                             i = k;
---
>                             j2 = l2;
2830c2834
<                         if (i >= 14)
---
>                         if (j2 >= 14)
2832,2833c2836,2837
<                             int l = i;
<                             return l;
---
>                             int i3 = j2;
>                             return i3;
2837c2841
<                     return i;
---
>                     return j2;
2855,2856c2859,2860
<             int i = 0;
<             int j = 0;
---
>             int j2 = 0;
>             int k2 = 0;
2858,2862c2862,2866
<             int k = this.getLightFor(lightType, pos);
<             int l = this.getRawLight(pos, lightType);
<             int i1 = pos.getX();
<             int j1 = pos.getY();
<             int k1 = pos.getZ();
---
>             int l2 = this.getLightFor(lightType, pos);
>             int i3 = this.getRawLight(pos, lightType);
>             int j3 = pos.getX();
>             int k3 = pos.getY();
>             int l3 = pos.getZ();
2864c2868
<             if (l > k)
---
>             if (i3 > l2)
2866c2870
<                 this.lightUpdateBlockList[j++] = 133152;
---
>                 this.lightUpdateBlockList[k2++] = 133152;
2868c2872
<             else if (l < k)
---
>             else if (i3 < l2)
2870c2874
<                 this.lightUpdateBlockList[j++] = 133152 | k << 18;
---
>                 this.lightUpdateBlockList[k2++] = 133152 | l2 << 18;
2872c2876
<                 while (i < j)
---
>                 while (j2 < k2)
2874,2880c2878,2884
<                     int l1 = this.lightUpdateBlockList[i++];
<                     int i2 = (l1 & 63) - 32 + i1;
<                     int j2 = (l1 >> 6 & 63) - 32 + j1;
<                     int k2 = (l1 >> 12 & 63) - 32 + k1;
<                     int l2 = l1 >> 18 & 15;
<                     BlockPos blockpos = new BlockPos(i2, j2, k2);
<                     int i3 = this.getLightFor(lightType, blockpos);
---
>                     int i4 = this.lightUpdateBlockList[j2++];
>                     int j4 = (i4 & 63) - 32 + j3;
>                     int k4 = (i4 >> 6 & 63) - 32 + k3;
>                     int l4 = (i4 >> 12 & 63) - 32 + l3;
>                     int i5 = i4 >> 18 & 15;
>                     BlockPos blockpos1 = new BlockPos(j4, k4, l4);
>                     int j5 = this.getLightFor(lightType, blockpos1);
2882c2886
<                     if (i3 == l2)
---
>                     if (j5 == i5)
2884c2888
<                         this.setLightFor(lightType, blockpos, 0);
---
>                         this.setLightFor(lightType, blockpos1, 0);
2886c2890
<                         if (l2 > 0)
---
>                         if (i5 > 0)
2888,2890c2892,2894
<                             int j3 = MathHelper.abs(i2 - i1);
<                             int k3 = MathHelper.abs(j2 - j1);
<                             int l3 = MathHelper.abs(k2 - k1);
---
>                             int k5 = MathHelper.abs(j4 - j3);
>                             int l5 = MathHelper.abs(k4 - k3);
>                             int i6 = MathHelper.abs(l4 - l3);
2892c2896
<                             if (j3 + k3 + l3 < 17)
---
>                             if (k5 + l5 + i6 < 17)
2898,2903c2902,2907
<                                     int i4 = i2 + enumfacing.getFrontOffsetX();
<                                     int j4 = j2 + enumfacing.getFrontOffsetY();
<                                     int k4 = k2 + enumfacing.getFrontOffsetZ();
<                                     blockpos$pooledmutableblockpos.setPos(i4, j4, k4);
<                                     int l4 = Math.max(1, this.getBlockState(blockpos$pooledmutableblockpos).getLightOpacity());
<                                     i3 = this.getLightFor(lightType, blockpos$pooledmutableblockpos);
---
>                                     int j6 = j4 + enumfacing.getFrontOffsetX();
>                                     int k6 = k4 + enumfacing.getFrontOffsetY();
>                                     int l6 = l4 + enumfacing.getFrontOffsetZ();
>                                     blockpos$pooledmutableblockpos.setPos(j6, k6, l6);
>                                     int i7 = Math.max(1, this.getBlockState(blockpos$pooledmutableblockpos).getLightOpacity());
>                                     j5 = this.getLightFor(lightType, blockpos$pooledmutableblockpos);
2905c2909
<                                     if (i3 == l2 - l4 && j < this.lightUpdateBlockList.length)
---
>                                     if (j5 == i5 - i7 && k2 < this.lightUpdateBlockList.length)
2907c2911
<                                         this.lightUpdateBlockList[j++] = i4 - i1 + 32 | j4 - j1 + 32 << 6 | k4 - k1 + 32 << 12 | l2 - l4 << 18;
---
>                                         this.lightUpdateBlockList[k2++] = j6 - j3 + 32 | k6 - k3 + 32 << 6 | l6 - l3 + 32 << 12 | i5 - i7 << 18;
2917c2921
<                 i = 0;
---
>                 j2 = 0;
2923c2927
<             while (i < j)
---
>             while (j2 < k2)
2925,2931c2929,2935
<                 int i5 = this.lightUpdateBlockList[i++];
<                 int j5 = (i5 & 63) - 32 + i1;
<                 int k5 = (i5 >> 6 & 63) - 32 + j1;
<                 int l5 = (i5 >> 12 & 63) - 32 + k1;
<                 BlockPos blockpos1 = new BlockPos(j5, k5, l5);
<                 int i6 = this.getLightFor(lightType, blockpos1);
<                 int j6 = this.getRawLight(blockpos1, lightType);
---
>                 int j7 = this.lightUpdateBlockList[j2++];
>                 int k7 = (j7 & 63) - 32 + j3;
>                 int l7 = (j7 >> 6 & 63) - 32 + k3;
>                 int i8 = (j7 >> 12 & 63) - 32 + l3;
>                 BlockPos blockpos2 = new BlockPos(k7, l7, i8);
>                 int j8 = this.getLightFor(lightType, blockpos2);
>                 int k8 = this.getRawLight(blockpos2, lightType);
2933c2937
<                 if (j6 != i6)
---
>                 if (k8 != j8)
2935c2939
<                     this.setLightFor(lightType, blockpos1, j6);
---
>                     this.setLightFor(lightType, blockpos2, k8);
2937c2941
<                     if (j6 > i6)
---
>                     if (k8 > j8)
2939,2942c2943,2946
<                         int k6 = Math.abs(j5 - i1);
<                         int l6 = Math.abs(k5 - j1);
<                         int i7 = Math.abs(l5 - k1);
<                         boolean flag = j < this.lightUpdateBlockList.length - 6;
---
>                         int l8 = Math.abs(k7 - j3);
>                         int i9 = Math.abs(l7 - k3);
>                         int j9 = Math.abs(i8 - l3);
>                         boolean flag = k2 < this.lightUpdateBlockList.length - 6;
2944c2948
<                         if (k6 + l6 + i7 < 17 && flag)
---
>                         if (l8 + i9 + j9 < 17 && flag)
2946c2950
<                             if (this.getLightFor(lightType, blockpos1.west()) < j6)
---
>                             if (this.getLightFor(lightType, blockpos2.west()) < k8)
2948c2952
<                                 this.lightUpdateBlockList[j++] = j5 - 1 - i1 + 32 + (k5 - j1 + 32 << 6) + (l5 - k1 + 32 << 12);
---
>                                 this.lightUpdateBlockList[k2++] = k7 - 1 - j3 + 32 + (l7 - k3 + 32 << 6) + (i8 - l3 + 32 << 12);
2951c2955
<                             if (this.getLightFor(lightType, blockpos1.east()) < j6)
---
>                             if (this.getLightFor(lightType, blockpos2.east()) < k8)
2953c2957
<                                 this.lightUpdateBlockList[j++] = j5 + 1 - i1 + 32 + (k5 - j1 + 32 << 6) + (l5 - k1 + 32 << 12);
---
>                                 this.lightUpdateBlockList[k2++] = k7 + 1 - j3 + 32 + (l7 - k3 + 32 << 6) + (i8 - l3 + 32 << 12);
2956c2960
<                             if (this.getLightFor(lightType, blockpos1.down()) < j6)
---
>                             if (this.getLightFor(lightType, blockpos2.down()) < k8)
2958c2962
<                                 this.lightUpdateBlockList[j++] = j5 - i1 + 32 + (k5 - 1 - j1 + 32 << 6) + (l5 - k1 + 32 << 12);
---
>                                 this.lightUpdateBlockList[k2++] = k7 - j3 + 32 + (l7 - 1 - k3 + 32 << 6) + (i8 - l3 + 32 << 12);
2961c2965
<                             if (this.getLightFor(lightType, blockpos1.up()) < j6)
---
>                             if (this.getLightFor(lightType, blockpos2.up()) < k8)
2963c2967
<                                 this.lightUpdateBlockList[j++] = j5 - i1 + 32 + (k5 + 1 - j1 + 32 << 6) + (l5 - k1 + 32 << 12);
---
>                                 this.lightUpdateBlockList[k2++] = k7 - j3 + 32 + (l7 + 1 - k3 + 32 << 6) + (i8 - l3 + 32 << 12);
2966c2970
<                             if (this.getLightFor(lightType, blockpos1.north()) < j6)
---
>                             if (this.getLightFor(lightType, blockpos2.north()) < k8)
2968c2972
<                                 this.lightUpdateBlockList[j++] = j5 - i1 + 32 + (k5 - j1 + 32 << 6) + (l5 - 1 - k1 + 32 << 12);
---
>                                 this.lightUpdateBlockList[k2++] = k7 - j3 + 32 + (l7 - k3 + 32 << 6) + (i8 - 1 - l3 + 32 << 12);
2971c2975
<                             if (this.getLightFor(lightType, blockpos1.south()) < j6)
---
>                             if (this.getLightFor(lightType, blockpos2.south()) < k8)
2973c2977
<                                 this.lightUpdateBlockList[j++] = j5 - i1 + 32 + (k5 - j1 + 32 << 6) + (l5 + 1 - k1 + 32 << 12);
---
>                                 this.lightUpdateBlockList[k2++] = k7 - j3 + 32 + (l7 - k3 + 32 << 6) + (i8 + 1 - l3 + 32 << 12);
3013,3016c3017,3020
<         int i = MathHelper.floor((boundingBox.minX - 2.0D) / 16.0D);
<         int j = MathHelper.floor((boundingBox.maxX + 2.0D) / 16.0D);
<         int k = MathHelper.floor((boundingBox.minZ - 2.0D) / 16.0D);
<         int l = MathHelper.floor((boundingBox.maxZ + 2.0D) / 16.0D);
---
>         int j2 = MathHelper.floor((boundingBox.minX - 2.0D) / 16.0D);
>         int k2 = MathHelper.floor((boundingBox.maxX + 2.0D) / 16.0D);
>         int l2 = MathHelper.floor((boundingBox.minZ - 2.0D) / 16.0D);
>         int i3 = MathHelper.floor((boundingBox.maxZ + 2.0D) / 16.0D);
3018c3022
<         for (int i1 = i; i1 <= j; ++i1)
---
>         for (int j3 = j2; j3 <= k2; ++j3)
3020c3024
<             for (int j1 = k; j1 <= l; ++j1)
---
>             for (int k3 = l2; k3 <= i3; ++k3)
3022c3026
<                 if (this.isChunkLoaded(i1, j1, true))
---
>                 if (this.isChunkLoaded(j3, k3, true))
3024c3028
<                     this.getChunkFromChunkCoords(i1, j1).getEntitiesWithinAABBForEntity(entityIn, boundingBox, list, predicate);
---
>                     this.getChunkFromChunkCoords(j3, k3).getEntitiesWithinAABBForEntity(entityIn, boundingBox, list, predicate);
3036c3040
<         for (Entity entity : this.loadedEntityList)
---
>         for (Entity entity4 : this.loadedEntityList)
3038c3042
<             if (entityType.isAssignableFrom(entity.getClass()) && filter.apply((T)entity))
---
>             if (entityType.isAssignableFrom(entity4.getClass()) && filter.apply((T)entity4))
3040c3044
<                 list.add((T)entity);
---
>                 list.add((T)entity4);
3051c3055
<         for (Entity entity : this.playerEntities)
---
>         for (Entity entity4 : this.playerEntities)
3053c3057
<             if (playerType.isAssignableFrom(entity.getClass()) && filter.apply((T)entity))
---
>             if (playerType.isAssignableFrom(entity4.getClass()) && filter.apply((T)entity4))
3055c3059
<                 list.add((T)entity);
---
>                 list.add((T)entity4);
3069,3072c3073,3076
<         int i = MathHelper.floor((aabb.minX - 2.0D) / 16.0D);
<         int j = MathHelper.ceil((aabb.maxX + 2.0D) / 16.0D);
<         int k = MathHelper.floor((aabb.minZ - 2.0D) / 16.0D);
<         int l = MathHelper.ceil((aabb.maxZ + 2.0D) / 16.0D);
---
>         int j2 = MathHelper.floor((aabb.minX - 2.0D) / 16.0D);
>         int k2 = MathHelper.ceil((aabb.maxX + 2.0D) / 16.0D);
>         int l2 = MathHelper.floor((aabb.minZ - 2.0D) / 16.0D);
>         int i3 = MathHelper.ceil((aabb.maxZ + 2.0D) / 16.0D);
3075c3079
<         for (int i1 = i; i1 < j; ++i1)
---
>         for (int j3 = j2; j3 < k2; ++j3)
3077c3081
<             for (int j1 = k; j1 < l; ++j1)
---
>             for (int k3 = l2; k3 < i3; ++k3)
3079c3083
<                 if (this.isChunkLoaded(i1, j1, true))
---
>                 if (this.isChunkLoaded(j3, k3, true))
3081c3085
<                     this.getChunkFromChunkCoords(i1, j1).getEntitiesOfTypeWithinAAAB(clazz, aabb, list, filter);
---
>                     this.getChunkFromChunkCoords(j3, k3).getEntitiesOfTypeWithinAAAB(clazz, aabb, list, filter);
3096c3100
<         for (int i = 0; i < list.size(); ++i)
---
>         for (int j2 = 0; j2 < list.size(); ++j2)
3098c3102
<             T t1 = list.get(i);
---
>             T t1 = list.get(j2);
3143c3147
<         int i = 0;
---
>         int j2 = 0;
3145c3149
<         for (Entity entity : this.loadedEntityList)
---
>         for (Entity entity4 : this.loadedEntityList)
3147c3151
<             if ((!(entity instanceof EntityLiving) || !((EntityLiving)entity).isNoDespawnRequired()) && entityType.isAssignableFrom(entity.getClass()))
---
>             if ((!(entity4 instanceof EntityLiving) || !((EntityLiving)entity4).isNoDespawnRequired()) && entityType.isAssignableFrom(entity4.getClass()))
3149c3153
<                 ++i;
---
>                 ++j2;
3153c3157
<         return i;
---
>         return j2;
3160c3164
<         for (Entity entity : entityCollection)
---
>         for (Entity entity4 : entityCollection)
3162c3166
<             this.onEntityAdded(entity);
---
>             this.onEntityAdded(entity4);
3173c3177
<         IBlockState iblockstate = this.getBlockState(p_190527_2_);
---
>         IBlockState iblockstate1 = this.getBlockState(p_190527_2_);
3180c3184
<         else if (iblockstate.getMaterial() == Material.CIRCUITS && p_190527_1_ == Blocks.ANVIL)
---
>         else if (iblockstate1.getMaterial() == Material.CIRCUITS && p_190527_1_ == Blocks.ANVIL)
3186c3190
<             return iblockstate.getMaterial().isReplaceable() && p_190527_1_.canPlaceBlockOnSide(this, p_190527_2_, p_190527_4_);
---
>             return iblockstate1.getMaterial().isReplaceable() && p_190527_1_.canPlaceBlockOnSide(this, p_190527_2_, p_190527_4_);
3218,3219c3222,3223
<         int i = 0;
<         i = Math.max(i, this.getStrongPower(pos.down(), EnumFacing.DOWN));
---
>         int j2 = 0;
>         j2 = Math.max(j2, this.getStrongPower(pos.down(), EnumFacing.DOWN));
3221c3225
<         if (i >= 15)
---
>         if (j2 >= 15)
3223c3227
<             return i;
---
>             return j2;
3227c3231
<             i = Math.max(i, this.getStrongPower(pos.up(), EnumFacing.UP));
---
>             j2 = Math.max(j2, this.getStrongPower(pos.up(), EnumFacing.UP));
3229c3233
<             if (i >= 15)
---
>             if (j2 >= 15)
3231c3235
<                 return i;
---
>                 return j2;
3235c3239
<                 i = Math.max(i, this.getStrongPower(pos.north(), EnumFacing.NORTH));
---
>                 j2 = Math.max(j2, this.getStrongPower(pos.north(), EnumFacing.NORTH));
3237c3241
<                 if (i >= 15)
---
>                 if (j2 >= 15)
3239c3243
<                     return i;
---
>                     return j2;
3243c3247
<                     i = Math.max(i, this.getStrongPower(pos.south(), EnumFacing.SOUTH));
---
>                     j2 = Math.max(j2, this.getStrongPower(pos.south(), EnumFacing.SOUTH));
3245c3249
<                     if (i >= 15)
---
>                     if (j2 >= 15)
3247c3251
<                         return i;
---
>                         return j2;
3251c3255
<                         i = Math.max(i, this.getStrongPower(pos.west(), EnumFacing.WEST));
---
>                         j2 = Math.max(j2, this.getStrongPower(pos.west(), EnumFacing.WEST));
3253c3257
<                         if (i >= 15)
---
>                         if (j2 >= 15)
3255c3259
<                             return i;
---
>                             return j2;
3259,3260c3263,3264
<                             i = Math.max(i, this.getStrongPower(pos.east(), EnumFacing.EAST));
<                             return i >= 15 ? i : i;
---
>                             j2 = Math.max(j2, this.getStrongPower(pos.east(), EnumFacing.EAST));
>                             return j2 >= 15 ? j2 : j2;
3275,3276c3279,3280
<         IBlockState iblockstate = this.getBlockState(pos);
<         return iblockstate.isNormalCube() ? this.getStrongPower(pos) : iblockstate.getWeakPower(this, pos, facing);
---
>         IBlockState iblockstate1 = this.getBlockState(pos);
>         return iblockstate1.isNormalCube() ? this.getStrongPower(pos) : iblockstate1.getWeakPower(this, pos, facing);
3313c3317
<         int i = 0;
---
>         int j2 = 0;
3317c3321
<             int j = this.getRedstonePower(pos.offset(enumfacing), enumfacing);
---
>             int k2 = this.getRedstonePower(pos.offset(enumfacing), enumfacing);
3319c3323
<             if (j >= 15)
---
>             if (k2 >= 15)
3324c3328
<             if (j > i)
---
>             if (k2 > j2)
3326c3330
<                 i = j;
---
>                 j2 = k2;
3330c3334
<         return i;
---
>         return j2;
3362c3366
<         for (int i = 0; i < this.playerEntities.size(); ++i)
---
>         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
3364c3368
<             EntityPlayer entityplayer1 = this.playerEntities.get(i);
---
>             EntityPlayer entityplayer1 = this.playerEntities.get(j2);
3383c3387
<         for (int i = 0; i < this.playerEntities.size(); ++i)
---
>         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
3385c3389
<             EntityPlayer entityplayer = this.playerEntities.get(i);
---
>             EntityPlayer entityplayer = this.playerEntities.get(j2);
3419c3423
<         for (int i = 0; i < this.playerEntities.size(); ++i)
---
>         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
3421c3425
<             EntityPlayer entityplayer1 = this.playerEntities.get(i);
---
>             EntityPlayer entityplayer1 = this.playerEntities.get(j2);
3468c3472
<         for (int i = 0; i < this.playerEntities.size(); ++i)
---
>         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
3470c3474
<             EntityPlayer entityplayer = this.playerEntities.get(i);
---
>             EntityPlayer entityplayer = this.playerEntities.get(j2);
3484c3488
<         for (int i = 0; i < this.playerEntities.size(); ++i)
---
>         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
3486c3490
<             EntityPlayer entityplayer = this.playerEntities.get(i);
---
>             EntityPlayer entityplayer = this.playerEntities.get(j2);
3548c3552
<         BlockPos blockpos = new BlockPos(this.worldInfo.getSpawnX(), this.worldInfo.getSpawnY(), this.worldInfo.getSpawnZ());
---
>         BlockPos blockpos1 = new BlockPos(this.worldInfo.getSpawnX(), this.worldInfo.getSpawnY(), this.worldInfo.getSpawnZ());
3550c3554
<         if (!this.getWorldBorder().contains(blockpos))
---
>         if (!this.getWorldBorder().contains(blockpos1))
3552c3556
<             blockpos = this.getHeight(new BlockPos(this.getWorldBorder().getCenterX(), 0.0D, this.getWorldBorder().getCenterZ()));
---
>             blockpos1 = this.getHeight(new BlockPos(this.getWorldBorder().getCenterX(), 0.0D, this.getWorldBorder().getCenterZ()));
3555c3559
<         return blockpos;
---
>         return blockpos1;
3568,3570c3572,3574
<         int i = MathHelper.floor(entityIn.posX / 16.0D);
<         int j = MathHelper.floor(entityIn.posZ / 16.0D);
<         int k = 2;
---
>         int j2 = MathHelper.floor(entityIn.posX / 16.0D);
>         int k2 = MathHelper.floor(entityIn.posZ / 16.0D);
>         int l2 = 2;
3572c3576
<         for (int l = -2; l <= 2; ++l)
---
>         for (int i3 = -2; i3 <= 2; ++i3)
3574c3578
<             for (int i1 = -2; i1 <= 2; ++i1)
---
>             for (int j3 = -2; j3 <= 2; ++j3)
3576c3580
<                 this.getChunkFromChunkCoords(i + l, j + i1);
---
>                 this.getChunkFromChunkCoords(j2 + i3, k2 + j3);
3764c3768
<         for (int i = 0; i < this.eventListeners.size(); ++i)
---
>         for (int j2 = 0; j2 < this.eventListeners.size(); ++j2)
3766c3770
<             ((IWorldEventListener)this.eventListeners.get(i)).broadcastSound(id, pos, data);
---
>             ((IWorldEventListener)this.eventListeners.get(j2)).broadcastSound(id, pos, data);
3779c3783
<             for (int i = 0; i < this.eventListeners.size(); ++i)
---
>             for (int j2 = 0; j2 < this.eventListeners.size(); ++j2)
3781c3785
<                 ((IWorldEventListener)this.eventListeners.get(i)).playEvent(player, type, pos, data);
---
>                 ((IWorldEventListener)this.eventListeners.get(j2)).playEvent(player, type, pos, data);
3784c3788
<         catch (Throwable throwable)
---
>         catch (Throwable throwable3)
3786,3792c3790,3796
<             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Playing level event");
<             CrashReportCategory crashreportcategory = crashreport.makeCategory("Level event being played");
<             crashreportcategory.addCrashSection("Block coordinates", CrashReportCategory.getCoordinateInfo(pos));
<             crashreportcategory.addCrashSection("Event source", player);
<             crashreportcategory.addCrashSection("Event type", Integer.valueOf(type));
<             crashreportcategory.addCrashSection("Event data", Integer.valueOf(data));
<             throw new ReportedException(crashreport);
---
>             CrashReport crashreport3 = CrashReport.makeCrashReport(throwable3, "Playing level event");
>             CrashReportCategory crashreportcategory3 = crashreport3.makeCategory("Level event being played");
>             crashreportcategory3.addCrashSection("Block coordinates", CrashReportCategory.getCoordinateInfo(pos));
>             crashreportcategory3.addCrashSection("Event source", player);
>             crashreportcategory3.addCrashSection("Event type", Integer.valueOf(type));
>             crashreportcategory3.addCrashSection("Event data", Integer.valueOf(data));
>             throw new ReportedException(crashreport3);
3817,3818c3821,3822
<         long i = (long)p_72843_1_ * 341873128712L + (long)p_72843_2_ * 132897987541L + this.getWorldInfo().getSeed() + (long)p_72843_3_;
<         this.rand.setSeed(i);
---
>         long j2 = (long)p_72843_1_ * 341873128712L + (long)p_72843_2_ * 132897987541L + this.getWorldInfo().getSeed() + (long)p_72843_3_;
>         this.rand.setSeed(j2);
3835,3837c3839,3841
<         CrashReportCategory crashreportcategory = report.makeCategoryDepth("Affected level", 1);
<         crashreportcategory.addCrashSection("Level name", this.worldInfo == null ? "????" : this.worldInfo.getWorldName());
<         crashreportcategory.setDetail("All players", new ICrashReportDetail<String>()
---
>         CrashReportCategory crashreportcategory3 = report.makeCategoryDepth("Affected level", 1);
>         crashreportcategory3.addCrashSection("Level name", this.worldInfo == null ? "????" : this.worldInfo.getWorldName());
>         crashreportcategory3.setDetail("All players", new ICrashReportDetail<String>()
3844c3848
<         crashreportcategory.setDetail("Chunk stats", new ICrashReportDetail<String>()
---
>         crashreportcategory3.setDetail("Chunk stats", new ICrashReportDetail<String>()
3854c3858
<             this.worldInfo.addToCrashReport(crashreportcategory);
---
>             this.worldInfo.addToCrashReport(crashreportcategory3);
3856c3860
<         catch (Throwable throwable)
---
>         catch (Throwable throwable3)
3858c3862
<             crashreportcategory.addCrashSectionThrowable("Level Data Unobtainable", throwable);
---
>             crashreportcategory3.addCrashSectionThrowable("Level Data Unobtainable", throwable3);
3861c3865
<         return crashreportcategory;
---
>         return crashreportcategory3;
3866c3870
<         for (int i = 0; i < this.eventListeners.size(); ++i)
---
>         for (int j2 = 0; j2 < this.eventListeners.size(); ++j2)
3868c3872
<             IWorldEventListener iworldeventlistener = this.eventListeners.get(i);
---
>             IWorldEventListener iworldeventlistener = this.eventListeners.get(j2);
3899c3903
<             BlockPos blockpos = pos.offset(enumfacing);
---
>             BlockPos blockpos1 = pos.offset(enumfacing);
3901c3905
<             if (this.isBlockLoaded(blockpos))
---
>             if (this.isBlockLoaded(blockpos1))
3903c3907
<                 IBlockState iblockstate = this.getBlockState(blockpos);
---
>                 IBlockState iblockstate1 = this.getBlockState(blockpos1);
3905c3909
<                 if (Blocks.UNPOWERED_COMPARATOR.isSameDiode(iblockstate))
---
>                 if (Blocks.UNPOWERED_COMPARATOR.isSameDiode(iblockstate1))
3907c3911
<                     iblockstate.neighborChanged(this, blockpos, blockIn, pos);
---
>                     iblockstate1.neighborChanged(this, blockpos1, blockIn, pos);
3909c3913
<                 else if (iblockstate.isNormalCube())
---
>                 else if (iblockstate1.isNormalCube())
3911,3912c3915,3916
<                     blockpos = blockpos.offset(enumfacing);
<                     iblockstate = this.getBlockState(blockpos);
---
>                     blockpos1 = blockpos1.offset(enumfacing);
>                     iblockstate1 = this.getBlockState(blockpos1);
3914c3918
<                     if (Blocks.UNPOWERED_COMPARATOR.isSameDiode(iblockstate))
---
>                     if (Blocks.UNPOWERED_COMPARATOR.isSameDiode(iblockstate1))
3916c3920
<                         iblockstate.neighborChanged(this, blockpos, blockIn, pos);
---
>                         iblockstate1.neighborChanged(this, blockpos1, blockIn, pos);
3925c3929
<         long i = 0L;
---
>         long j2 = 0L;
3931c3935
<             i = this.getChunkFromBlockCoords(pos).getInhabitedTime();
---
>             j2 = this.getChunkFromBlockCoords(pos).getInhabitedTime();
3934c3938
<         return new DifficultyInstance(this.getDifficulty(), this.getWorldTime(), i, f);
---
>         return new DifficultyInstance(this.getDifficulty(), this.getWorldTime(), j2, f);
3977,3981c3981,3985
<         BlockPos blockpos = this.getSpawnPoint();
<         int i = x * 16 + 8 - blockpos.getX();
<         int j = z * 16 + 8 - blockpos.getZ();
<         int k = 128;
<         return i >= -128 && i <= 128 && j >= -128 && j <= 128;
---
>         BlockPos blockpos1 = this.getSpawnPoint();
>         int j2 = x * 16 + 8 - blockpos1.getX();
>         int k2 = z * 16 + 8 - blockpos1.getZ();
>         int l2 = 128;
>         return j2 >= -128 && j2 <= 128 && k2 >= -128 && k2 <= 128;
diff --normal --recursive --from-file src\orig src\orig/src/minecraft/net/minecraft/world/WorldServer.java src\modified/src/minecraft/net/minecraft/world/WorldServer.java
3d2
< import com.google.common.base.Predicate;
17a17,18
> import java.util.function.Predicate;
> import java.util.stream.Collectors;
284c285
<         for (EntityPlayer entityplayer : this.playerEntities)
---
>         for (EntityPlayer entityplayer : this.playerEntities.stream().filter(EntityPlayer::isPlayerSleeping).collect(Collectors.toList()))
286,289c287
<             if (entityplayer.isPlayerSleeping())
<             {
<                 entityplayer.wakeUpPlayer(false, false, true);
<             }
---
>             entityplayer.wakeUpPlayer(false, false, true);
506c504
<         List<EntityLivingBase> list = this.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb, new Predicate<EntityLivingBase>()
---
>         List<EntityLivingBase> list = this.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb, new com.google.common.base.Predicate<EntityLivingBase>()
